
ECET260_LAB4_ADCDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08006a00  08006a00  00016a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d38  08006d38  00016d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08006d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  2000067c  080073c4  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ac0  080073c4  00020ac0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000efa4  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002207  00000000  00000000  0002f650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005f0e  00000000  00000000  00031857  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008b0  00000000  00000000  00037768  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000db0  00000000  00000000  00038018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005095  00000000  00000000  00038dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004114  00000000  00000000  0003de5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00041f71  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002658  00000000  00000000  00041ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000067c 	.word	0x2000067c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069e8 	.word	0x080069e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000680 	.word	0x20000680
 80001cc:	080069e8 	.word	0x080069e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f54:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	b908      	cbnz	r0, 8000f5e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_InitTick+0x44>)
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f68:	6810      	ldr	r0, [r2, #0]
 8000f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f6e:	f000 fcef 	bl	8001950 <HAL_SYSTICK_Config>
 8000f72:	4604      	mov	r4, r0
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	2d0f      	cmp	r5, #15
 8000f7a:	d8ee      	bhi.n	8000f5a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 fca2 	bl	80018cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_InitTick+0x48>)
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_Init>:
{
 8000f9c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 fc82 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ffd3 	bl	8000f50 <HAL_InitTick>
 8000faa:	4604      	mov	r4, r0
 8000fac:	b918      	cbnz	r0, 8000fb6 <HAL_Init+0x1a>
    HAL_MspInit();
 8000fae:	f001 fea1 	bl	8002cf4 <HAL_MspInit>
}
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000fb6:	2401      	movs	r4, #1
 8000fb8:	e7fb      	b.n	8000fb2 <HAL_Init+0x16>
	...

08000fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_IncTick+0x10>)
 8000fbe:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <HAL_IncTick+0x14>)
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	6809      	ldr	r1, [r1, #0]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200006d8 	.word	0x200006d8
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_GetTick+0x8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200006d8 	.word	0x200006d8

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff6 	bl	8000fd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	bf1c      	itt	ne
 8000fec:	4b05      	ldrne	r3, [pc, #20]	; (8001004 <HAL_Delay+0x24>)
 8000fee:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	bf18      	it	ne
 8000ff4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f7ff ffed 	bl	8000fd4 <HAL_GetTick>
 8000ffa:	1b40      	subs	r0, r0, r5
 8000ffc:	4284      	cmp	r4, r0
 8000ffe:	d8fa      	bhi.n	8000ff6 <HAL_Delay+0x16>
  {
  }
}
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000

08001008 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001008:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800100a:	0dcc      	lsrs	r4, r1, #23
 800100c:	f004 0404 	and.w	r4, r4, #4
 8001010:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001012:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001016:	5823      	ldr	r3, [r4, r0]
 8001018:	2507      	movs	r5, #7
 800101a:	408d      	lsls	r5, r1
 800101c:	ea23 0305 	bic.w	r3, r3, r5
 8001020:	fa02 f101 	lsl.w	r1, r2, r1
 8001024:	4319      	orrs	r1, r3
 8001026:	5021      	str	r1, [r4, r0]
 8001028:	bd30      	pop	{r4, r5, pc}

0800102a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800102a:	6880      	ldr	r0, [r0, #8]
}
 800102c:	f000 0001 	and.w	r0, r0, #1
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001032:	6880      	ldr	r0, [r0, #8]
}
 8001034:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001038:	4770      	bx	lr
	...

0800103c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800103e:	2300      	movs	r3, #0
 8001040:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001042:	4604      	mov	r4, r0
 8001044:	2800      	cmp	r0, #0
 8001046:	f000 8085 	beq.w	8001154 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800104c:	b925      	cbnz	r5, 8001058 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	f001 fe69 	bl	8002d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001054:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001058:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800105a:	6883      	ldr	r3, [r0, #8]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	d47b      	bmi.n	8001158 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001060:	6883      	ldr	r3, [r0, #8]
 8001062:	00dd      	lsls	r5, r3, #3
 8001064:	d57f      	bpl.n	8001166 <HAL_ADC_Init+0x12a>
 8001066:	6883      	ldr	r3, [r0, #8]
 8001068:	00d9      	lsls	r1, r3, #3
 800106a:	f140 808a 	bpl.w	8001182 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106e:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001070:	f7ff ffdf 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001074:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001076:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107c:	d167      	bne.n	800114e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800107e:	2800      	cmp	r0, #0
 8001080:	d165      	bne.n	800114e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	f7ff ffcc 	bl	800102a <LL_ADC_IsEnabled>
 8001092:	b998      	cbnz	r0, 80010bc <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001094:	4852      	ldr	r0, [pc, #328]	; (80011e0 <HAL_ADC_Init+0x1a4>)
 8001096:	f7ff ffc8 	bl	800102a <LL_ADC_IsEnabled>
 800109a:	4603      	mov	r3, r0
 800109c:	4851      	ldr	r0, [pc, #324]	; (80011e4 <HAL_ADC_Init+0x1a8>)
 800109e:	f7ff ffc4 	bl	800102a <LL_ADC_IsEnabled>
 80010a2:	4303      	orrs	r3, r0
 80010a4:	4850      	ldr	r0, [pc, #320]	; (80011e8 <HAL_ADC_Init+0x1ac>)
 80010a6:	f7ff ffc0 	bl	800102a <LL_ADC_IsEnabled>
 80010aa:	4303      	orrs	r3, r0
 80010ac:	d106      	bne.n	80010bc <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ae:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_ADC_Init+0x1b0>)
 80010b0:	6860      	ldr	r0, [r4, #4]
 80010b2:	6893      	ldr	r3, [r2, #8]
 80010b4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010b8:	4303      	orrs	r3, r0
 80010ba:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80010bc:	68e0      	ldr	r0, [r4, #12]
 80010be:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010c0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80010c4:	4303      	orrs	r3, r0
 80010c6:	68a0      	ldr	r0, [r4, #8]
 80010c8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ca:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010cc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80010ce:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010d6:	bf02      	ittt	eq
 80010d8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80010da:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80010de:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010e4:	b122      	cbz	r2, 80010f0 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80010e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010e8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010ec:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010ee:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010f0:	6820      	ldr	r0, [r4, #0]
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_ADC_Init+0x1b4>)
 80010f4:	68c5      	ldr	r5, [r0, #12]
 80010f6:	402a      	ands	r2, r5
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010fc:	f7ff ff99 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001100:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	0712      	lsls	r2, r2, #28
 8001106:	d546      	bpl.n	8001196 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001108:	6922      	ldr	r2, [r4, #16]
 800110a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800110c:	bf05      	ittet	eq
 800110e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001110:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001112:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001114:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001118:	bf06      	itte	eq
 800111a:	f020 000f 	biceq.w	r0, r0, #15
 800111e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001120:	f022 020f 	bicne.w	r2, r2, #15
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001128:	f023 0303 	bic.w	r3, r3, #3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001132:	4608      	mov	r0, r1
 8001134:	b003      	add	sp, #12
 8001136:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800113e:	9b01      	ldr	r3, [sp, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <HAL_ADC_Init+0xfc>
 8001144:	e78f      	b.n	8001066 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	e045      	b.n	80011da <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001154:	2101      	movs	r1, #1
 8001156:	e7ec      	b.n	8001132 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001158:	6883      	ldr	r3, [r0, #8]
 800115a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800115e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001162:	6083      	str	r3, [r0, #8]
 8001164:	e77c      	b.n	8001060 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8001166:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_ADC_Init+0x1b8>)
 800116a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800116e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6083      	str	r3, [r0, #8]
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_ADC_Init+0x1bc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001180:	e7dc      	b.n	800113c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001192:	2101      	movs	r1, #1
 8001194:	e76c      	b.n	8001070 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001196:	2800      	cmp	r0, #0
 8001198:	d1b6      	bne.n	8001108 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800119a:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800119c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011a0:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011a2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011a4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011ac:	f020 0002 	bic.w	r0, r0, #2
 80011b0:	4302      	orrs	r2, r0
 80011b2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80011b4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	d1c4      	bne.n	8001146 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80011bc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80011be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011c0:	6918      	ldr	r0, [r3, #16]
 80011c2:	432a      	orrs	r2, r5
 80011c4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	432a      	orrs	r2, r5
 80011cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80011ce:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80011d2:	432a      	orrs	r2, r5
 80011d4:	f020 0004 	bic.w	r0, r0, #4
 80011d8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	e794      	b.n	8001108 <HAL_ADC_Init+0xcc>
 80011de:	bf00      	nop
 80011e0:	50040000 	.word	0x50040000
 80011e4:	50040100 	.word	0x50040100
 80011e8:	50040200 	.word	0x50040200
 80011ec:	50040300 	.word	0x50040300
 80011f0:	fff0c007 	.word	0xfff0c007
 80011f4:	00030d40 	.word	0x00030d40
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_ADC_ConvCpltCallback>:
 80011fc:	4770      	bx	lr

080011fe <HAL_ADC_ConvHalfCpltCallback>:
 80011fe:	4770      	bx	lr

08001200 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001200:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001202:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001204:	f7ff fffb 	bl	80011fe <HAL_ADC_ConvHalfCpltCallback>
 8001208:	bd08      	pop	{r3, pc}

0800120a <HAL_ADC_ErrorCallback>:
{
 800120a:	4770      	bx	lr

0800120c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800120c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800120e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001210:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001214:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001216:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001218:	d121      	bne.n	800125e <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800121a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	6811      	ldr	r1, [r2, #0]
 8001224:	0708      	lsls	r0, r1, #28
 8001226:	d507      	bpl.n	8001238 <ADC_DMAConvCplt+0x2c>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001228:	68d1      	ldr	r1, [r2, #12]
 800122a:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 800122e:	d112      	bne.n	8001256 <ADC_DMAConvCplt+0x4a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001230:	68d2      	ldr	r2, [r2, #12]
 8001232:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001236:	e002      	b.n	800123e <ADC_DMAConvCplt+0x32>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001238:	68d2      	ldr	r2, [r2, #12]
 800123a:	f012 0f02 	tst.w	r2, #2
 800123e:	d10a      	bne.n	8001256 <ADC_DMAConvCplt+0x4a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001240:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800124a:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800124c:	bf5e      	ittt	pl
 800124e:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8001250:	f042 0201 	orrpl.w	r2, r2, #1
 8001254:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ffd0 	bl	80011fc <HAL_ADC_ConvCpltCallback>
 800125c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800125e:	06d2      	lsls	r2, r2, #27
 8001260:	d503      	bpl.n	800126a <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ffd1 	bl	800120a <HAL_ADC_ErrorCallback>
 8001268:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800126a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800126c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001272:	4718      	bx	r3

08001274 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001274:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001276:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001278:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800127a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800127e:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001280:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001288:	f7ff ffbf 	bl	800120a <HAL_ADC_ErrorCallback>
 800128c:	bd08      	pop	{r3, pc}
	...

08001290 <HAL_ADC_ConfigChannel>:
{
 8001290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001296:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800129a:	2b01      	cmp	r3, #1
{
 800129c:	4605      	mov	r5, r0
 800129e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012a0:	f000 8184 	beq.w	80015ac <HAL_ADC_ConfigChannel+0x31c>
 80012a4:	2301      	movs	r3, #1
 80012a6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012aa:	6800      	ldr	r0, [r0, #0]
 80012ac:	f7ff fec1 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	f040 8175 	bne.w	80015a0 <HAL_ADC_ConfigChannel+0x310>
    if (sConfig->Rank <= 5U)
 80012b6:	684b      	ldr	r3, [r1, #4]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d808      	bhi.n	80012ce <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 80012bc:	3b02      	subs	r3, #2
 80012be:	2b03      	cmp	r3, #3
 80012c0:	d866      	bhi.n	8001390 <HAL_ADC_ConfigChannel+0x100>
 80012c2:	e8df f003 	tbb	[pc, r3]
 80012c6:	5e02      	.short	0x5e02
 80012c8:	6260      	.short	0x6260
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80012ca:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80012cc:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012ce:	6862      	ldr	r2, [r4, #4]
 80012d0:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 80012d2:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012d4:	0991      	lsrs	r1, r2, #6
 80012d6:	f001 010c 	and.w	r1, r1, #12
 80012da:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80012de:	f002 021f 	and.w	r2, r2, #31
 80012e2:	59ce      	ldr	r6, [r1, r7]
 80012e4:	f04f 0e1f 	mov.w	lr, #31
 80012e8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80012ec:	4093      	lsls	r3, r2
 80012ee:	fa0e f202 	lsl.w	r2, lr, r2
 80012f2:	ea26 0202 	bic.w	r2, r6, r2
 80012f6:	4313      	orrs	r3, r2
 80012f8:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012fa:	f7ff fe9a 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012fe:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	0711      	lsls	r1, r2, #28
 8001304:	f140 8154 	bpl.w	80015b0 <HAL_ADC_ConfigChannel+0x320>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001308:	6828      	ldr	r0, [r5, #0]
 800130a:	f7ff fe8e 	bl	800102a <LL_ADC_IsEnabled>
 800130e:	2800      	cmp	r0, #0
 8001310:	f040 80d3 	bne.w	80014ba <HAL_ADC_ConfigChannel+0x22a>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001314:	68e6      	ldr	r6, [r4, #12]
 8001316:	6828      	ldr	r0, [r5, #0]
 8001318:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800131a:	4aba      	ldr	r2, [pc, #744]	; (8001604 <HAL_ADC_ConfigChannel+0x374>)
 800131c:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001320:	f006 0e18 	and.w	lr, r6, #24
 8001324:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001328:	fa22 f20e 	lsr.w	r2, r2, lr
 800132c:	401a      	ands	r2, r3
 800132e:	ea21 0107 	bic.w	r1, r1, r7
 8001332:	430a      	orrs	r2, r1
 8001334:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001338:	4ab3      	ldr	r2, [pc, #716]	; (8001608 <HAL_ADC_ConfigChannel+0x378>)
 800133a:	4296      	cmp	r6, r2
 800133c:	f040 80bd 	bne.w	80014ba <HAL_ADC_ConfigChannel+0x22a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001340:	2f00      	cmp	r7, #0
 8001342:	f040 808f 	bne.w	8001464 <HAL_ADC_ConfigChannel+0x1d4>
 8001346:	0e9e      	lsrs	r6, r3, #26
 8001348:	3601      	adds	r6, #1
 800134a:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800134e:	2a09      	cmp	r2, #9
 8001350:	f04f 0101 	mov.w	r1, #1
 8001354:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8001358:	f240 809e 	bls.w	8001498 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800135c:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001360:	4091      	lsls	r1, r2
 8001362:	ea41 0206 	orr.w	r2, r1, r6
 8001366:	2f00      	cmp	r7, #0
 8001368:	f040 80c7 	bne.w	80014fa <HAL_ADC_ConfigChannel+0x26a>
 800136c:	0e9b      	lsrs	r3, r3, #26
 800136e:	3301      	adds	r3, #1
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001378:	391e      	subs	r1, #30
 800137a:	0509      	lsls	r1, r1, #20
 800137c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001380:	e097      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001382:	2312      	movs	r3, #18
 8001384:	e7a2      	b.n	80012cc <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001386:	2318      	movs	r3, #24
 8001388:	e7a0      	b.n	80012cc <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	e79d      	b.n	80012cc <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001390:	2306      	movs	r3, #6
 8001392:	e79b      	b.n	80012cc <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001394:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001396:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001398:	f3c2 0612 	ubfx	r6, r2, #0, #19
 800139c:	f3c1 6184 	ubfx	r1, r1, #26, #5
 80013a0:	2e00      	cmp	r6, #0
 80013a2:	d13e      	bne.n	8001422 <HAL_ADC_ConfigChannel+0x192>
 80013a4:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80013a8:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 80013aa:	bf02      	ittt	eq
 80013ac:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 80013ae:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 80013b2:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80013ba:	f3c2 0712 	ubfx	r7, r2, #0, #19
 80013be:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80013c2:	f100 010c 	add.w	r1, r0, #12
 80013c6:	bb8f      	cbnz	r7, 800142c <HAL_ADC_ConfigChannel+0x19c>
 80013c8:	f3c2 6784 	ubfx	r7, r2, #26, #5
 80013cc:	42be      	cmp	r6, r7
 80013ce:	f040 8112 	bne.w	80015f6 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 80013d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80013d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80013d8:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013da:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013dc:	6883      	ldr	r3, [r0, #8]
 80013de:	6883      	ldr	r3, [r0, #8]
 80013e0:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e4:	f100 0608 	add.w	r6, r0, #8
 80013e8:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013ec:	bb57      	cbnz	r7, 8001444 <HAL_ADC_ConfigChannel+0x1b4>
 80013ee:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f040 811c 	bne.w	8001630 <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 80013f8:	6833      	ldr	r3, [r6, #0]
 80013fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fe:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001400:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001402:	6823      	ldr	r3, [r4, #0]
 8001404:	68c2      	ldr	r2, [r0, #12]
 8001406:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800140a:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800140e:	bb20      	cbnz	r0, 800145a <HAL_ADC_ConfigChannel+0x1ca>
 8001410:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001414:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 8001416:	bf02      	ittt	eq
 8001418:	680b      	ldreq	r3, [r1, #0]
 800141a:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800141e:	600b      	streq	r3, [r1, #0]
 8001420:	e772      	b.n	8001308 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001422:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001426:	fab2 f282 	clz	r2, r2
 800142a:	e7bd      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x118>
 800142c:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001430:	fab7 f787 	clz	r7, r7
 8001434:	42be      	cmp	r6, r7
 8001436:	d0cc      	beq.n	80013d2 <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001438:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800143c:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 800143e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	fa92 f2a2 	rbit	r2, r2
 8001448:	fab2 f282 	clz	r2, r2
 800144c:	429a      	cmp	r2, r3
 800144e:	d0d3      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0x168>
 8001450:	68c3      	ldr	r3, [r0, #12]
 8001452:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800145a:	fa93 f3a3 	rbit	r3, r3
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	e7d7      	b.n	8001414 <HAL_ADC_ConfigChannel+0x184>
 8001464:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001468:	fab2 f282 	clz	r2, r2
 800146c:	3201      	adds	r2, #1
 800146e:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001472:	2a09      	cmp	r2, #9
 8001474:	d830      	bhi.n	80014d8 <HAL_ADC_ConfigChannel+0x248>
 8001476:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800147a:	fab6 f686 	clz	r6, r6
 800147e:	3601      	adds	r6, #1
 8001480:	06b6      	lsls	r6, r6, #26
 8001482:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001486:	fa93 f1a3 	rbit	r1, r3
 800148a:	fab1 f181 	clz	r1, r1
 800148e:	3101      	adds	r1, #1
 8001490:	f001 021f 	and.w	r2, r1, #31
 8001494:	2101      	movs	r1, #1
 8001496:	e001      	b.n	800149c <HAL_ADC_ConfigChannel+0x20c>
 8001498:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800149c:	4091      	lsls	r1, r2
 800149e:	ea41 0206 	orr.w	r2, r1, r6
 80014a2:	b9a7      	cbnz	r7, 80014ce <HAL_ADC_ConfigChannel+0x23e>
 80014a4:	0e99      	lsrs	r1, r3, #26
 80014a6:	3101      	adds	r1, #1
 80014a8:	f001 011f 	and.w	r1, r1, #31
 80014ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80014b0:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b2:	4311      	orrs	r1, r2
 80014b4:	68a2      	ldr	r2, [r4, #8]
 80014b6:	f7ff fda7 	bl	8001008 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014ba:	6822      	ldr	r2, [r4, #0]
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_ADC_ConfigChannel+0x37c>)
 80014be:	421a      	tst	r2, r3
 80014c0:	d120      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80014c4:	2300      	movs	r3, #0
 80014c6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 80014ca:	b003      	add	sp, #12
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014d2:	fab1 f181 	clz	r1, r1
 80014d6:	e7e6      	b.n	80014a6 <HAL_ADC_ConfigChannel+0x216>
 80014d8:	fa93 f2a3 	rbit	r2, r3
 80014dc:	fab2 f282 	clz	r2, r2
 80014e0:	3201      	adds	r2, #1
 80014e2:	0692      	lsls	r2, r2, #26
 80014e4:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 80014e8:	fa93 f1a3 	rbit	r1, r3
 80014ec:	fab1 f181 	clz	r1, r1
 80014f0:	3101      	adds	r1, #1
 80014f2:	f001 021f 	and.w	r2, r1, #31
 80014f6:	2101      	movs	r1, #1
 80014f8:	e732      	b.n	8001360 <HAL_ADC_ConfigChannel+0xd0>
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	e734      	b.n	800136e <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001504:	4942      	ldr	r1, [pc, #264]	; (8001610 <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001506:	4b43      	ldr	r3, [pc, #268]	; (8001614 <HAL_ADC_ConfigChannel+0x384>)
 8001508:	6888      	ldr	r0, [r1, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001510:	460c      	mov	r4, r1
 8001512:	d11e      	bne.n	8001552 <HAL_ADC_ConfigChannel+0x2c2>
 8001514:	0202      	lsls	r2, r0, #8
 8001516:	d4d4      	bmi.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001518:	682b      	ldr	r3, [r5, #0]
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <HAL_ADC_ConfigChannel+0x388>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d003      	beq.n	8001528 <HAL_ADC_ConfigChannel+0x298>
 8001520:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001524:	4293      	cmp	r3, r2
 8001526:	d1cc      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001528:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800152a:	4a3c      	ldr	r2, [pc, #240]	; (800161c <HAL_ADC_ConfigChannel+0x38c>)
 800152c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001530:	4333      	orrs	r3, r6
 8001532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001536:	60a3      	str	r3, [r4, #8]
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_ADC_ConfigChannel+0x390>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001540:	230c      	movs	r3, #12
 8001542:	4353      	muls	r3, r2
            wait_loop_index--;
 8001544:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ba      	beq.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 800154c:	9b01      	ldr	r3, [sp, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	e7f8      	b.n	8001544 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001552:	4b34      	ldr	r3, [pc, #208]	; (8001624 <HAL_ADC_ConfigChannel+0x394>)
 8001554:	429a      	cmp	r2, r3
 8001556:	d111      	bne.n	800157c <HAL_ADC_ConfigChannel+0x2ec>
 8001558:	01c3      	lsls	r3, r0, #7
 800155a:	d4b2      	bmi.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <HAL_ADC_ConfigChannel+0x388>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_ADC_ConfigChannel+0x2dc>
 8001564:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001568:	4293      	cmp	r3, r2
 800156a:	d1aa      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
 800156c:	68a3      	ldr	r3, [r4, #8]
 800156e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001572:	4333      	orrs	r3, r6
 8001574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001578:	60a3      	str	r3, [r4, #8]
 800157a:	e7a2      	b.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800157c:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <HAL_ADC_ConfigChannel+0x398>)
 800157e:	429a      	cmp	r2, r3
 8001580:	d19f      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001582:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001586:	d19c      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001588:	682a      	ldr	r2, [r5, #0]
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_ADC_ConfigChannel+0x388>)
 800158c:	429a      	cmp	r2, r3
 800158e:	d198      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x232>
 8001590:	688b      	ldr	r3, [r1, #8]
 8001592:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001596:	4333      	orrs	r3, r6
 8001598:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159c:	608b      	str	r3, [r1, #8]
 800159e:	e791      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80015a8:	4618      	mov	r0, r3
 80015aa:	e78b      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 80015ac:	2002      	movs	r0, #2
 80015ae:	e78c      	b.n	80014ca <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015b0:	2800      	cmp	r0, #0
 80015b2:	f47f aea9 	bne.w	8001308 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015b6:	4618      	mov	r0, r3
 80015b8:	68a2      	ldr	r2, [r4, #8]
 80015ba:	6821      	ldr	r1, [r4, #0]
 80015bc:	f7ff fd24 	bl	8001008 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015c0:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015c2:	682b      	ldr	r3, [r5, #0]
 80015c4:	6822      	ldr	r2, [r4, #0]
 80015c6:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80015c8:	2e04      	cmp	r6, #4
 80015ca:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80015ce:	f43f aee1 	beq.w	8001394 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80015d2:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 80015d6:	0059      	lsls	r1, r3, #1
 80015d8:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 80015da:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80015de:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80015e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015e6:	408b      	lsls	r3, r1
 80015e8:	4313      	orrs	r3, r2
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_ADC_ConfigChannel+0x39c>)
 80015ec:	403a      	ands	r2, r7
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 80015f4:	e688      	b.n	8001308 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f6:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015fa:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80015fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fe:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001602:	e6f4      	b.n	80013ee <HAL_ADC_ConfigChannel+0x15e>
 8001604:	0007ffff 	.word	0x0007ffff
 8001608:	407f0000 	.word	0x407f0000
 800160c:	80080000 	.word	0x80080000
 8001610:	50040300 	.word	0x50040300
 8001614:	c7520000 	.word	0xc7520000
 8001618:	50040000 	.word	0x50040000
 800161c:	00030d40 	.word	0x00030d40
 8001620:	20000008 	.word	0x20000008
 8001624:	cb840000 	.word	0xcb840000
 8001628:	80000001 	.word	0x80000001
 800162c:	03fff000 	.word	0x03fff000
 8001630:	68c3      	ldr	r3, [r0, #12]
 8001632:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800163a:	e6e9      	b.n	8001410 <HAL_ADC_ConfigChannel+0x180>

0800163c <ADC_Enable>:
{
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001640:	6800      	ldr	r0, [r0, #0]
 8001642:	f7ff fcf2 	bl	800102a <LL_ADC_IsEnabled>
 8001646:	b108      	cbz	r0, 800164c <ADC_Enable+0x10>
  return HAL_OK;
 8001648:	2000      	movs	r0, #0
 800164a:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <ADC_Enable+0x68>)
 8001650:	6891      	ldr	r1, [r2, #8]
 8001652:	4219      	tst	r1, r3
 8001654:	d009      	beq.n	800166a <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
 8001668:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800166a:	6893      	ldr	r3, [r2, #8]
 800166c:	4d0e      	ldr	r5, [pc, #56]	; (80016a8 <ADC_Enable+0x6c>)
 800166e:	402b      	ands	r3, r5
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001676:	f7ff fcad 	bl	8000fd4 <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800167c:	6820      	ldr	r0, [r4, #0]
 800167e:	6803      	ldr	r3, [r0, #0]
 8001680:	07db      	lsls	r3, r3, #31
 8001682:	d4e1      	bmi.n	8001648 <ADC_Enable+0xc>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001684:	f7ff fcd1 	bl	800102a <LL_ADC_IsEnabled>
 8001688:	b928      	cbnz	r0, 8001696 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 800168a:	6822      	ldr	r2, [r4, #0]
 800168c:	6893      	ldr	r3, [r2, #8]
 800168e:	402b      	ands	r3, r5
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001696:	f7ff fc9d 	bl	8000fd4 <HAL_GetTick>
 800169a:	1b80      	subs	r0, r0, r6
 800169c:	2802      	cmp	r0, #2
 800169e:	d9ed      	bls.n	800167c <ADC_Enable+0x40>
 80016a0:	e7d9      	b.n	8001656 <ADC_Enable+0x1a>
 80016a2:	bf00      	nop
 80016a4:	8000003f 	.word	0x8000003f
 80016a8:	7fffffc0 	.word	0x7fffffc0

080016ac <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016ac:	4b39      	ldr	r3, [pc, #228]	; (8001794 <HAL_ADC_Start_DMA+0xe8>)
{
 80016ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b2:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016b4:	6800      	ldr	r0, [r0, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
{
 80016b8:	460e      	mov	r6, r1
 80016ba:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016bc:	f7ff fcb9 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d15f      	bne.n	8001784 <HAL_ADC_Start_DMA+0xd8>
    __HAL_LOCK(hadc);
 80016c4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80016c8:	2a01      	cmp	r2, #1
 80016ca:	d05b      	beq.n	8001784 <HAL_ADC_Start_DMA+0xd8>
 80016cc:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016d0:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80016d4:	f04f 0301 	mov.w	r3, #1
 80016d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016dc:	bf9e      	ittt	ls
 80016de:	f240 2321 	movwls	r3, #545	; 0x221
 80016e2:	fa23 f308 	lsrls.w	r3, r3, r8
 80016e6:	43db      	mvnls	r3, r3
 80016e8:	f013 0501 	ands.w	r5, r3, #1
 80016ec:	d144      	bne.n	8001778 <HAL_ADC_Start_DMA+0xcc>
      tmp_hal_status = ADC_Enable(hadc);
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff ffa4 	bl	800163c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80016f4:	2800      	cmp	r0, #0
 80016f6:	d13b      	bne.n	8001770 <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 80016f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016fa:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80016fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001708:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <HAL_ADC_Start_DMA+0xec>)
 800170c:	4299      	cmp	r1, r3
 800170e:	d03c      	beq.n	800178a <HAL_ADC_Start_DMA+0xde>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001716:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001718:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800171a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800171c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001720:	bf1c      	itt	ne
 8001722:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 8001724:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001728:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_ADC_Start_DMA+0xf0>)
 800172c:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_ADC_Start_DMA+0xf4>)
 8001730:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_ADC_Start_DMA+0xf8>)
 8001734:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001736:	231c      	movs	r3, #28
 8001738:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 800173a:	2300      	movs	r3, #0
 800173c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001740:	684b      	ldr	r3, [r1, #4]
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001748:	68cb      	ldr	r3, [r1, #12]
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001750:	4632      	mov	r2, r6
 8001752:	463b      	mov	r3, r7
 8001754:	3140      	adds	r1, #64	; 0x40
 8001756:	f000 f973 	bl	8001a40 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800175a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800175c:	6893      	ldr	r3, [r2, #8]
 800175e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001762:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6093      	str	r3, [r2, #8]
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8001770:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8001774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_UNLOCK(hadc);
 8001778:	2300      	movs	r3, #0
 800177a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 800177e:	2001      	movs	r0, #1
 8001780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8001784:	2002      	movs	r0, #2
 8001786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800178a:	f1b8 0f00 	cmp.w	r8, #0
 800178e:	d0bf      	beq.n	8001710 <HAL_ADC_Start_DMA+0x64>
 8001790:	e7c2      	b.n	8001718 <HAL_ADC_Start_DMA+0x6c>
 8001792:	bf00      	nop
 8001794:	50040300 	.word	0x50040300
 8001798:	50040100 	.word	0x50040100
 800179c:	0800120d 	.word	0x0800120d
 80017a0:	08001201 	.word	0x08001201
 80017a4:	08001275 	.word	0x08001275

080017a8 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a8:	6880      	ldr	r0, [r0, #8]
}
 80017aa:	f000 0001 	and.w	r0, r0, #1
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b0:	6880      	ldr	r0, [r0, #8]
}
 80017b2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80017b6:	4770      	bx	lr

080017b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80017b8:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017ba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80017be:	2b01      	cmp	r3, #1
{
 80017c0:	b09b      	sub	sp, #108	; 0x6c
 80017c2:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80017c4:	d066      	beq.n	8001894 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 80017c6:	2301      	movs	r3, #1
 80017c8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80017ce:	6800      	ldr	r0, [r0, #0]
 80017d0:	4298      	cmp	r0, r3
 80017d2:	bf0c      	ite	eq
 80017d4:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 80017d8:	2300      	movne	r3, #0
 80017da:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80017dc:	9801      	ldr	r0, [sp, #4]
 80017de:	b940      	cbnz	r0, 80017f2 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017e2:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	f043 0320 	orr.w	r3, r3, #32
 80017ea:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80017ee:	b01b      	add	sp, #108	; 0x6c
 80017f0:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80017f2:	f7ff ffdd 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 80017f6:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017f8:	6810      	ldr	r0, [r2, #0]
 80017fa:	f7ff ffd9 	bl	80017b0 <LL_ADC_REG_IsConversionOngoing>
 80017fe:	2800      	cmp	r0, #0
 8001800:	d142      	bne.n	8001888 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001802:	2b00      	cmp	r3, #0
 8001804:	d140      	bne.n	8001888 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001806:	680b      	ldr	r3, [r1, #0]
 8001808:	4c24      	ldr	r4, [pc, #144]	; (800189c <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 800180a:	b333      	cbz	r3, 800185a <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800180c:	68a3      	ldr	r3, [r4, #8]
 800180e:	6848      	ldr	r0, [r1, #4]
 8001810:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001814:	4303      	orrs	r3, r0
 8001816:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 800181a:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 800181e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001820:	481d      	ldr	r0, [pc, #116]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001822:	f7ff ffc1 	bl	80017a8 <LL_ADC_IsEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	481d      	ldr	r0, [pc, #116]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800182a:	f7ff ffbd 	bl	80017a8 <LL_ADC_IsEnabled>
 800182e:	4303      	orrs	r3, r0
 8001830:	481c      	ldr	r0, [pc, #112]	; (80018a4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001832:	f7ff ffb9 	bl	80017a8 <LL_ADC_IsEnabled>
 8001836:	4318      	orrs	r0, r3
 8001838:	d004      	beq.n	8001844 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800183c:	2300      	movs	r3, #0
 800183e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8001842:	e7d4      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8001844:	680b      	ldr	r3, [r1, #0]
 8001846:	68a5      	ldr	r5, [r4, #8]
 8001848:	6889      	ldr	r1, [r1, #8]
 800184a:	430b      	orrs	r3, r1
 800184c:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8001850:	f021 010f 	bic.w	r1, r1, #15
 8001854:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001856:	60a3      	str	r3, [r4, #8]
 8001858:	e7f0      	b.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800185a:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800185c:	480e      	ldr	r0, [pc, #56]	; (8001898 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800185e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001862:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001864:	f7ff ffa0 	bl	80017a8 <LL_ADC_IsEnabled>
 8001868:	4603      	mov	r3, r0
 800186a:	480d      	ldr	r0, [pc, #52]	; (80018a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 800186c:	f7ff ff9c 	bl	80017a8 <LL_ADC_IsEnabled>
 8001870:	4303      	orrs	r3, r0
 8001872:	480c      	ldr	r0, [pc, #48]	; (80018a4 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001874:	f7ff ff98 	bl	80017a8 <LL_ADC_IsEnabled>
 8001878:	4318      	orrs	r0, r3
 800187a:	d1de      	bne.n	800183a <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800187c:	68a3      	ldr	r3, [r4, #8]
 800187e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001882:	f023 030f 	bic.w	r3, r3, #15
 8001886:	e7e6      	b.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001890:	2001      	movs	r0, #1
 8001892:	e7d3      	b.n	800183c <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001894:	2002      	movs	r0, #2
 8001896:	e7aa      	b.n	80017ee <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001898:	50040000 	.word	0x50040000
 800189c:	50040300 	.word	0x50040300
 80018a0:	50040100 	.word	0x50040100
 80018a4:	50040200 	.word	0x50040200

080018a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018b8:	0200      	lsls	r0, r0, #8
 80018ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80018c2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80018c4:	60d3      	str	r3, [r2, #12]
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ce:	b530      	push	{r4, r5, lr}
 80018d0:	68dc      	ldr	r4, [r3, #12]
 80018d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	2b04      	cmp	r3, #4
 80018de:	bf28      	it	cs
 80018e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	f04f 0501 	mov.w	r5, #1
 80018e8:	fa05 f303 	lsl.w	r3, r5, r3
 80018ec:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f0:	bf8c      	ite	hi
 80018f2:	3c03      	subhi	r4, #3
 80018f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f6:	4019      	ands	r1, r3
 80018f8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fa:	fa05 f404 	lsl.w	r4, r5, r4
 80018fe:	3c01      	subs	r4, #1
 8001900:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001902:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	ea42 0201 	orr.w	r2, r2, r1
 8001908:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	bfad      	iteet	ge
 800190e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	f000 000f 	andlt.w	r0, r0, #15
 8001916:	4b06      	ldrlt	r3, [pc, #24]	; (8001930 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	bfb5      	itete	lt
 800191e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001924:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001928:	bd30      	pop	{r4, r5, pc}
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00
 8001930:	e000ed14 	.word	0xe000ed14

08001934 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001934:	2800      	cmp	r0, #0
 8001936:	db08      	blt.n	800194a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001938:	0942      	lsrs	r2, r0, #5
 800193a:	2301      	movs	r3, #1
 800193c:	f000 001f 	and.w	r0, r0, #31
 8001940:	fa03 f000 	lsl.w	r0, r3, r0
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <HAL_NVIC_EnableIRQ+0x18>)
 8001946:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100

08001950 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	3801      	subs	r0, #1
 8001952:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001956:	d20a      	bcs.n	800196e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195e:	21f0      	movs	r1, #240	; 0xf0
 8001960:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001966:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001968:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800197c:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800197e:	2800      	cmp	r0, #0
 8001980:	d04e      	beq.n	8001a20 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001982:	6801      	ldr	r1, [r0, #0]
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_DMA_Init+0xa8>)
 8001986:	4299      	cmp	r1, r3
 8001988:	f04f 0414 	mov.w	r4, #20
 800198c:	d840      	bhi.n	8001a10 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_DMA_Init+0xac>)
 8001990:	440a      	add	r2, r1
 8001992:	fbb2 f2f4 	udiv	r2, r2, r4
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800199a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 800199e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019a0:	2302      	movs	r3, #2
 80019a2:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019a6:	6884      	ldr	r4, [r0, #8]
 80019a8:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80019ac:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80019ae:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b0:	432b      	orrs	r3, r5
 80019b2:	6945      	ldr	r5, [r0, #20]
 80019b4:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	6985      	ldr	r5, [r0, #24]
 80019b8:	432b      	orrs	r3, r5
 80019ba:	69c5      	ldr	r5, [r0, #28]
 80019bc:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019c0:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80019c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80019c8:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80019ca:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019cc:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 80019d0:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019d2:	d014      	beq.n	80019fe <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_DMA_Init+0xb0>)
 80019d8:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019da:	bf0c      	ite	eq
 80019dc:	4914      	ldreq	r1, [pc, #80]	; (8001a30 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019de:	4915      	ldrne	r1, [pc, #84]	; (8001a34 <HAL_DMA_Init+0xb8>)
 80019e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019e2:	680a      	ldr	r2, [r1, #0]
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	240f      	movs	r4, #15
 80019ea:	409c      	lsls	r4, r3
 80019ec:	ea22 0204 	bic.w	r2, r2, r4
 80019f0:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019f2:	6842      	ldr	r2, [r0, #4]
 80019f4:	680c      	ldr	r4, [r1, #0]
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	4323      	orrs	r3, r4
 80019fc:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019fe:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a00:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a02:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a04:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8001a08:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_DMA_Init+0xbc>)
 8001a12:	440b      	add	r3, r1
 8001a14:	fbb3 f3f4 	udiv	r3, r3, r4
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_DMA_Init+0xc0>)
 8001a1e:	e7be      	b.n	800199e <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001a20:	2001      	movs	r0, #1
}
 8001a22:	bd30      	pop	{r4, r5, pc}
 8001a24:	40020407 	.word	0x40020407
 8001a28:	bffdfff8 	.word	0xbffdfff8
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	400200a8 	.word	0x400200a8
 8001a34:	400204a8 	.word	0x400204a8
 8001a38:	bffdfbf8 	.word	0xbffdfbf8
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a42:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001a46:	2c01      	cmp	r4, #1
 8001a48:	d038      	beq.n	8001abc <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a4a:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001a4e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a50:	b2ed      	uxtb	r5, r5
 8001a52:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001a54:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8001a58:	f04f 0600 	mov.w	r6, #0
 8001a5c:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a60:	d12a      	bne.n	8001ab8 <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a62:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a68:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001a6a:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a6c:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	f026 0601 	bic.w	r6, r6, #1
 8001a72:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a74:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001a76:	f006 061c 	and.w	r6, r6, #28
 8001a7a:	40b5      	lsls	r5, r6
 8001a7c:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a7e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a80:	6883      	ldr	r3, [r0, #8]
 8001a82:	6805      	ldr	r5, [r0, #0]
 8001a84:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001a86:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a88:	bf0b      	itete	eq
 8001a8a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001a8c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001a8e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001a90:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001a92:	b14b      	cbz	r3, 8001aa8 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a9a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f043 030a 	orr.w	r3, r3, #10
 8001ab6:	e7f0      	b.n	8001a9a <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 8001ab8:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001abc:	2002      	movs	r0, #2
}
 8001abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ac0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ac0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ac2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001ac4:	6803      	ldr	r3, [r0, #0]
{
 8001ac6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ac8:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001acc:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001ace:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ad0:	2404      	movs	r4, #4
 8001ad2:	4094      	lsls	r4, r2
 8001ad4:	4226      	tst	r6, r4
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x36>
 8001ad8:	f015 0f04 	tst.w	r5, #4
 8001adc:	d00b      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae2:	bf5e      	ittt	pl
 8001ae4:	681a      	ldrpl	r2, [r3, #0]
 8001ae6:	f022 0204 	bicpl.w	r2, r2, #4
 8001aea:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8001aec:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001aee:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001af0:	b373      	cbz	r3, 8001b50 <HAL_DMA_IRQHandler+0x90>
}
 8001af2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001af4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001af6:	2402      	movs	r4, #2
 8001af8:	4094      	lsls	r4, r2
 8001afa:	4226      	tst	r6, r4
 8001afc:	d012      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x64>
 8001afe:	f015 0f02 	tst.w	r5, #2
 8001b02:	d00f      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	0695      	lsls	r5, r2, #26
 8001b08:	d406      	bmi.n	8001b18 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	f022 020a 	bic.w	r2, r2, #10
 8001b10:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b18:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b1a:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001b1c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001b20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b22:	e7e5      	b.n	8001af0 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b24:	2408      	movs	r4, #8
 8001b26:	4094      	lsls	r4, r2
 8001b28:	4234      	tst	r4, r6
 8001b2a:	d011      	beq.n	8001b50 <HAL_DMA_IRQHandler+0x90>
 8001b2c:	072c      	lsls	r4, r5, #28
 8001b2e:	d50f      	bpl.n	8001b50 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b30:	681c      	ldr	r4, [r3, #0]
 8001b32:	f024 040e 	bic.w	r4, r4, #14
 8001b36:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b38:	2301      	movs	r3, #1
 8001b3a:	fa03 f202 	lsl.w	r2, r3, r2
 8001b3e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b40:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001b42:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b46:	2300      	movs	r3, #0
 8001b48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001b4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b4e:	e7cf      	b.n	8001af0 <HAL_DMA_IRQHandler+0x30>
}
 8001b50:	bc70      	pop	{r4, r5, r6}
 8001b52:	4770      	bx	lr

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b58:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001d08 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b60:	4c67      	ldr	r4, [pc, #412]	; (8001d00 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001b64:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	9a01      	ldr	r2, [sp, #4]
 8001b68:	40da      	lsrs	r2, r3
 8001b6a:	d102      	bne.n	8001b72 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001b6c:	b005      	add	sp, #20
 8001b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b72:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001b74:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b76:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001b78:	ea12 0e06 	ands.w	lr, r2, r6
 8001b7c:	f000 80b1 	beq.w	8001ce2 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b80:	684a      	ldr	r2, [r1, #4]
 8001b82:	f022 0710 	bic.w	r7, r2, #16
 8001b86:	2f02      	cmp	r7, #2
 8001b88:	d116      	bne.n	8001bb8 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001b8a:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001b8e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b92:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001b96:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b9a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b9e:	f04f 0c0f 	mov.w	ip, #15
 8001ba2:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001ba6:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001baa:	690d      	ldr	r5, [r1, #16]
 8001bac:	fa05 f50a 	lsl.w	r5, r5, sl
 8001bb0:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001bb4:	f8c9 5020 	str.w	r5, [r9, #32]
 8001bb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bbc:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001bbe:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bc2:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bc6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc8:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bcc:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd0:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd4:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bd6:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bda:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001bdc:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be0:	d811      	bhi.n	8001c06 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001be2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be4:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be8:	68cf      	ldr	r7, [r1, #12]
 8001bea:	fa07 f70c 	lsl.w	r7, r7, ip
 8001bee:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001bf2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001bf4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bfa:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001bfe:	409f      	lsls	r7, r3
 8001c00:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001c04:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c06:	f1ba 0f03 	cmp.w	sl, #3
 8001c0a:	d107      	bne.n	8001c1c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001c0c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c0e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c12:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001c16:	409f      	lsls	r7, r3
 8001c18:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001c1a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001c1c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c1e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c20:	688e      	ldr	r6, [r1, #8]
 8001c22:	fa06 f60c 	lsl.w	r6, r6, ip
 8001c26:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001c28:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c2a:	00d5      	lsls	r5, r2, #3
 8001c2c:	d559      	bpl.n	8001ce2 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c32:	f045 0501 	orr.w	r5, r5, #1
 8001c36:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001c3a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c3e:	f023 0603 	bic.w	r6, r3, #3
 8001c42:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001c46:	f005 0501 	and.w	r5, r5, #1
 8001c4a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001c4e:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c50:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c56:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c58:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001c5c:	270f      	movs	r7, #15
 8001c5e:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c62:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c6a:	d03c      	beq.n	8001ce6 <HAL_GPIO_Init+0x192>
 8001c6c:	4d25      	ldr	r5, [pc, #148]	; (8001d04 <HAL_GPIO_Init+0x1b0>)
 8001c6e:	42a8      	cmp	r0, r5
 8001c70:	d03b      	beq.n	8001cea <HAL_GPIO_Init+0x196>
 8001c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c76:	42a8      	cmp	r0, r5
 8001c78:	d039      	beq.n	8001cee <HAL_GPIO_Init+0x19a>
 8001c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c7e:	42a8      	cmp	r0, r5
 8001c80:	d037      	beq.n	8001cf2 <HAL_GPIO_Init+0x19e>
 8001c82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c86:	42a8      	cmp	r0, r5
 8001c88:	d035      	beq.n	8001cf6 <HAL_GPIO_Init+0x1a2>
 8001c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c8e:	42a8      	cmp	r0, r5
 8001c90:	d033      	beq.n	8001cfa <HAL_GPIO_Init+0x1a6>
 8001c92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	bf14      	ite	ne
 8001c9a:	2507      	movne	r5, #7
 8001c9c:	2506      	moveq	r5, #6
 8001c9e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ca2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ca4:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001ca6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001ca8:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cac:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001cae:	bf54      	ite	pl
 8001cb0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cb2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001cb6:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001cb8:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cba:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001cbc:	bf54      	ite	pl
 8001cbe:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cc0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001cc4:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001cc6:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc8:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001cca:	bf54      	ite	pl
 8001ccc:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cce:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001cd2:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001cd4:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd6:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001cd8:	bf54      	ite	pl
 8001cda:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cdc:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001ce0:	60e5      	str	r5, [r4, #12]
    position++;
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	e73f      	b.n	8001b66 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	e7d9      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cea:	2501      	movs	r5, #1
 8001cec:	e7d7      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cee:	2502      	movs	r5, #2
 8001cf0:	e7d5      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cf2:	2503      	movs	r5, #3
 8001cf4:	e7d3      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cf6:	2504      	movs	r5, #4
 8001cf8:	e7d1      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cfa:	2505      	movs	r5, #5
 8001cfc:	e7cf      	b.n	8001c9e <HAL_GPIO_Init+0x14a>
 8001cfe:	bf00      	nop
 8001d00:	40010400 	.word	0x40010400
 8001d04:	48000400 	.word	0x48000400
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d10:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d1e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d20:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d24:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d28:	d11c      	bne.n	8001d64 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d2a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d2e:	d015      	beq.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3c:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001d3e:	6811      	ldr	r1, [r2, #0]
 8001d40:	2232      	movs	r2, #50	; 0x32
 8001d42:	434a      	muls	r2, r1
 8001d44:	490f      	ldr	r1, [pc, #60]	; (8001d84 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001d46:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d4e:	6958      	ldr	r0, [r3, #20]
 8001d50:	0540      	lsls	r0, r0, #21
 8001d52:	d500      	bpl.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001d54:	b922      	cbnz	r2, 8001d60 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d56:	694b      	ldr	r3, [r1, #20]
 8001d58:	055b      	lsls	r3, r3, #21
 8001d5a:	d40d      	bmi.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	4770      	bx	lr
        wait_loop_index--;
 8001d60:	3a01      	subs	r2, #1
 8001d62:	e7f4      	b.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d64:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d68:	bf1f      	itttt	ne
 8001d6a:	681a      	ldrne	r2, [r3, #0]
 8001d6c:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001d70:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001d74:	601a      	strne	r2, [r3, #0]
 8001d76:	e7f1      	b.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001d78:	2003      	movs	r0, #3
}
 8001d7a:	4770      	bx	lr
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	20000008 	.word	0x20000008
 8001d84:	000f4240 	.word	0x000f4240

08001d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d8a:	4d1e      	ldr	r5, [pc, #120]	; (8001e04 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001d8c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001d8e:	00da      	lsls	r2, r3, #3
{
 8001d90:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d92:	d518      	bpl.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff ffba 	bl	8001d0c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d98:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001d9c:	d123      	bne.n	8001de6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d9e:	2c80      	cmp	r4, #128	; 0x80
 8001da0:	d929      	bls.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001da2:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da4:	bf8c      	ite	hi
 8001da6:	2002      	movhi	r0, #2
 8001da8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001dac:	6813      	ldr	r3, [r2, #0]
 8001dae:	f023 0307 	bic.w	r3, r3, #7
 8001db2:	4303      	orrs	r3, r0
 8001db4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001dbc:	1a18      	subs	r0, r3, r0
 8001dbe:	bf18      	it	ne
 8001dc0:	2001      	movne	r0, #1
 8001dc2:	b003      	add	sp, #12
 8001dc4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	65ab      	str	r3, [r5, #88]	; 0x58
 8001dce:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001dd8:	f7ff ff98 	bl	8001d0c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de2:	65ab      	str	r3, [r5, #88]	; 0x58
 8001de4:	e7d8      	b.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001de6:	2c80      	cmp	r4, #128	; 0x80
 8001de8:	d807      	bhi.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001dea:	d008      	beq.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001dec:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001df0:	4258      	negs	r0, r3
 8001df2:	4158      	adcs	r0, r3
 8001df4:	e7d9      	b.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001df6:	2000      	movs	r0, #0
 8001df8:	e7d7      	b.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	e7d5      	b.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dfe:	2002      	movs	r0, #2
 8001e00:	e7d3      	b.n	8001daa <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e0e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e10:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e12:	f012 020c 	ands.w	r2, r2, #12
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0x18>
 8001e18:	2a0c      	cmp	r2, #12
 8001e1a:	d115      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e20:	2901      	cmp	r1, #1
 8001e22:	d118      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e24:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001e26:	481d      	ldr	r0, [pc, #116]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e28:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2a:	bf55      	itete	pl
 8001e2c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e30:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e32:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e36:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001e3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3e:	b34a      	cbz	r2, 8001e94 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e40:	2a0c      	cmp	r2, #12
 8001e42:	d009      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x4c>
 8001e44:	2000      	movs	r0, #0
  return sysclockfreq;
 8001e46:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e48:	2a04      	cmp	r2, #4
 8001e4a:	d022      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x86>
 8001e4c:	2a08      	cmp	r2, #8
 8001e4e:	4814      	ldr	r0, [pc, #80]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e50:	bf18      	it	ne
 8001e52:	2000      	movne	r0, #0
 8001e54:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e56:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001e5e:	2a02      	cmp	r2, #2
 8001e60:	d015      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001e62:	490f      	ldr	r1, [pc, #60]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e64:	2a03      	cmp	r2, #3
 8001e66:	bf08      	it	eq
 8001e68:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e6a:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e6c:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e74:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e78:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e7c:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e7e:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e80:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e82:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e84:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001e88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e8c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e90:	e7eb      	b.n	8001e6a <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001e92:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08006a38 	.word	0x08006a38
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	00f42400 	.word	0x00f42400

08001ea8 <HAL_RCC_OscConfig>:
{
 8001ea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001eac:	4605      	mov	r5, r0
 8001eae:	b908      	cbnz	r0, 8001eb4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	e047      	b.n	8001f44 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb4:	4ca6      	ldr	r4, [pc, #664]	; (8002150 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eba:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ebc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ec6:	d573      	bpl.n	8001fb0 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ec8:	b11e      	cbz	r6, 8001ed2 <HAL_RCC_OscConfig+0x2a>
 8001eca:	2e0c      	cmp	r6, #12
 8001ecc:	d152      	bne.n	8001f74 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ece:	2f01      	cmp	r7, #1
 8001ed0:	d150      	bne.n	8001f74 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	0798      	lsls	r0, r3, #30
 8001ed6:	d502      	bpl.n	8001ede <HAL_RCC_OscConfig+0x36>
 8001ed8:	69ab      	ldr	r3, [r5, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0e8      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	6a28      	ldr	r0, [r5, #32]
 8001ee2:	0719      	lsls	r1, r3, #28
 8001ee4:	bf56      	itet	pl
 8001ee6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001eea:	6823      	ldrmi	r3, [r4, #0]
 8001eec:	091b      	lsrpl	r3, r3, #4
 8001eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef2:	4283      	cmp	r3, r0
 8001ef4:	d229      	bcs.n	8001f4a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	f7ff ff47 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d1d8      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	6a2a      	ldr	r2, [r5, #32]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f12:	6863      	ldr	r3, [r4, #4]
 8001f14:	69ea      	ldr	r2, [r5, #28]
 8001f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f1e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f20:	f7ff ff74 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001f24:	68a3      	ldr	r3, [r4, #8]
 8001f26:	4a8b      	ldr	r2, [pc, #556]	; (8002154 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	40d8      	lsrs	r0, r3
 8001f34:	4b88      	ldr	r3, [pc, #544]	; (8002158 <HAL_RCC_OscConfig+0x2b0>)
 8001f36:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001f38:	4b88      	ldr	r3, [pc, #544]	; (800215c <HAL_RCC_OscConfig+0x2b4>)
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	f7ff f808 	bl	8000f50 <HAL_InitTick>
        if(status != HAL_OK)
 8001f40:	2800      	cmp	r0, #0
 8001f42:	d035      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
}
 8001f44:	b003      	add	sp, #12
 8001f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6023      	str	r3, [r4, #0]
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f58:	4303      	orrs	r3, r0
 8001f5a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5c:	6863      	ldr	r3, [r4, #4]
 8001f5e:	69ea      	ldr	r2, [r5, #28]
 8001f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f68:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f6a:	f7ff ff0d 	bl	8001d88 <RCC_SetFlashLatencyFromMSIRange>
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	d0d6      	beq.n	8001f20 <HAL_RCC_OscConfig+0x78>
 8001f72:	e79d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f74:	69ab      	ldr	r3, [r5, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d036      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f82:	f7ff f827 	bl	8000fd4 <HAL_GetTick>
 8001f86:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	079a      	lsls	r2, r3, #30
 8001f8c:	d524      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f043 0308 	orr.w	r3, r3, #8
 8001f94:	6023      	str	r3, [r4, #0]
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	6a2a      	ldr	r2, [r5, #32]
 8001f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	6863      	ldr	r3, [r4, #4]
 8001fa4:	69ea      	ldr	r2, [r5, #28]
 8001fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001faa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fae:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb0:	682b      	ldr	r3, [r5, #0]
 8001fb2:	07d8      	lsls	r0, r3, #31
 8001fb4:	d429      	bmi.n	800200a <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	682b      	ldr	r3, [r5, #0]
 8001fb8:	0799      	lsls	r1, r3, #30
 8001fba:	d467      	bmi.n	800208c <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	0718      	lsls	r0, r3, #28
 8001fc0:	f100 809c 	bmi.w	80020fc <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	0759      	lsls	r1, r3, #29
 8001fc8:	f100 80ca 	bmi.w	8002160 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fcc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	f040 8133 	bne.w	800223a <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	e7b5      	b.n	8001f44 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fffc 	bl	8000fd4 <HAL_GetTick>
 8001fdc:	eba0 0008 	sub.w	r0, r0, r8
 8001fe0:	2802      	cmp	r0, #2
 8001fe2:	d9d1      	bls.n	8001f88 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	e7ad      	b.n	8001f44 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fff0 	bl	8000fd4 <HAL_GetTick>
 8001ff4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	079b      	lsls	r3, r3, #30
 8001ffa:	d5d9      	bpl.n	8001fb0 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ffc:	f7fe ffea 	bl	8000fd4 <HAL_GetTick>
 8002000:	eba0 0008 	sub.w	r0, r0, r8
 8002004:	2802      	cmp	r0, #2
 8002006:	d9f6      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x14e>
 8002008:	e7ec      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800200a:	2e08      	cmp	r6, #8
 800200c:	d003      	beq.n	8002016 <HAL_RCC_OscConfig+0x16e>
 800200e:	2e0c      	cmp	r6, #12
 8002010:	d108      	bne.n	8002024 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002012:	2f03      	cmp	r7, #3
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	039a      	lsls	r2, r3, #14
 800201a:	d5cc      	bpl.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
 800201c:	686b      	ldr	r3, [r5, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1c9      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
 8002022:	e745      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002024:	686b      	ldr	r3, [r5, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202a:	d110      	bne.n	800204e <HAL_RCC_OscConfig+0x1a6>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002032:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002034:	f7fe ffce 	bl	8000fd4 <HAL_GetTick>
 8002038:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	039b      	lsls	r3, r3, #14
 800203e:	d4ba      	bmi.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe ffc8 	bl	8000fd4 <HAL_GetTick>
 8002044:	eba0 0008 	sub.w	r0, r0, r8
 8002048:	2864      	cmp	r0, #100	; 0x64
 800204a:	d9f6      	bls.n	800203a <HAL_RCC_OscConfig+0x192>
 800204c:	e7ca      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002052:	d104      	bne.n	800205e <HAL_RCC_OscConfig+0x1b6>
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205a:	6023      	str	r3, [r4, #0]
 800205c:	e7e6      	b.n	800202c <HAL_RCC_OscConfig+0x184>
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002064:	6022      	str	r2, [r4, #0]
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800206c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e0      	bne.n	8002034 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8002072:	f7fe ffaf 	bl	8000fd4 <HAL_GetTick>
 8002076:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	0398      	lsls	r0, r3, #14
 800207c:	d59b      	bpl.n	8001fb6 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207e:	f7fe ffa9 	bl	8000fd4 <HAL_GetTick>
 8002082:	eba0 0008 	sub.w	r0, r0, r8
 8002086:	2864      	cmp	r0, #100	; 0x64
 8002088:	d9f6      	bls.n	8002078 <HAL_RCC_OscConfig+0x1d0>
 800208a:	e7ab      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800208c:	2e04      	cmp	r6, #4
 800208e:	d003      	beq.n	8002098 <HAL_RCC_OscConfig+0x1f0>
 8002090:	2e0c      	cmp	r6, #12
 8002092:	d110      	bne.n	80020b6 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002094:	2f02      	cmp	r7, #2
 8002096:	d10e      	bne.n	80020b6 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	0559      	lsls	r1, r3, #21
 800209c:	d503      	bpl.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
 800209e:	68eb      	ldr	r3, [r5, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f43f af05 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	6863      	ldr	r3, [r4, #4]
 80020a8:	692a      	ldr	r2, [r5, #16]
 80020aa:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80020ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80020b2:	6063      	str	r3, [r4, #4]
 80020b4:	e782      	b.n	8001fbc <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b6:	68eb      	ldr	r3, [r5, #12]
 80020b8:	b17b      	cbz	r3, 80020da <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 80020ba:	6823      	ldr	r3, [r4, #0]
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020c2:	f7fe ff87 	bl	8000fd4 <HAL_GetTick>
 80020c6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	055a      	lsls	r2, r3, #21
 80020cc:	d4eb      	bmi.n	80020a6 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ce:	f7fe ff81 	bl	8000fd4 <HAL_GetTick>
 80020d2:	1bc0      	subs	r0, r0, r7
 80020d4:	2802      	cmp	r0, #2
 80020d6:	d9f7      	bls.n	80020c8 <HAL_RCC_OscConfig+0x220>
 80020d8:	e784      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020e2:	f7fe ff77 	bl	8000fd4 <HAL_GetTick>
 80020e6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	6823      	ldr	r3, [r4, #0]
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	f57f af66 	bpl.w	8001fbc <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7fe ff70 	bl	8000fd4 <HAL_GetTick>
 80020f4:	1bc0      	subs	r0, r0, r7
 80020f6:	2802      	cmp	r0, #2
 80020f8:	d9f6      	bls.n	80020e8 <HAL_RCC_OscConfig+0x240>
 80020fa:	e773      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fc:	696b      	ldr	r3, [r5, #20]
 80020fe:	b19b      	cbz	r3, 8002128 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 8002100:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800210c:	f7fe ff62 	bl	8000fd4 <HAL_GetTick>
 8002110:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002112:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002116:	079a      	lsls	r2, r3, #30
 8002118:	f53f af54 	bmi.w	8001fc4 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe ff5a 	bl	8000fd4 <HAL_GetTick>
 8002120:	1bc0      	subs	r0, r0, r7
 8002122:	2802      	cmp	r0, #2
 8002124:	d9f5      	bls.n	8002112 <HAL_RCC_OscConfig+0x26a>
 8002126:	e75d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8002128:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800212c:	f023 0301 	bic.w	r3, r3, #1
 8002130:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002134:	f7fe ff4e 	bl	8000fd4 <HAL_GetTick>
 8002138:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800213a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800213e:	079b      	lsls	r3, r3, #30
 8002140:	f57f af40 	bpl.w	8001fc4 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe ff46 	bl	8000fd4 <HAL_GetTick>
 8002148:	1bc0      	subs	r0, r0, r7
 800214a:	2802      	cmp	r0, #2
 800214c:	d9f5      	bls.n	800213a <HAL_RCC_OscConfig+0x292>
 800214e:	e749      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
 8002150:	40021000 	.word	0x40021000
 8002154:	08006a25 	.word	0x08006a25
 8002158:	20000008 	.word	0x20000008
 800215c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002160:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002162:	00d8      	lsls	r0, r3, #3
 8002164:	d429      	bmi.n	80021ba <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	65a3      	str	r3, [r4, #88]	; 0x58
 800216e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002178:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217c:	4f79      	ldr	r7, [pc, #484]	; (8002364 <HAL_RCC_OscConfig+0x4bc>)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	05d9      	lsls	r1, r3, #23
 8002182:	d51d      	bpl.n	80021c0 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	68ab      	ldr	r3, [r5, #8]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d12b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x33a>
 800218a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002196:	f7fe ff1d 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800219e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021a4:	079b      	lsls	r3, r3, #30
 80021a6:	d542      	bpl.n	800222e <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 80021a8:	f1b8 0f00 	cmp.w	r8, #0
 80021ac:	f43f af0e 	beq.w	8001fcc <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80021b8:	e708      	b.n	8001fcc <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 80021ba:	f04f 0800 	mov.w	r8, #0
 80021be:	e7dd      	b.n	800217c <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff04 	bl	8000fd4 <HAL_GetTick>
 80021cc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	05da      	lsls	r2, r3, #23
 80021d2:	d4d7      	bmi.n	8002184 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d4:	f7fe fefe 	bl	8000fd4 <HAL_GetTick>
 80021d8:	eba0 0009 	sub.w	r0, r0, r9
 80021dc:	2802      	cmp	r0, #2
 80021de:	d9f6      	bls.n	80021ce <HAL_RCC_OscConfig+0x326>
 80021e0:	e700      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d106      	bne.n	80021f4 <HAL_RCC_OscConfig+0x34c>
 80021e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80021f2:	e7ca      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
 80021f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80021f8:	f022 0201 	bic.w	r2, r2, #1
 80021fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002200:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002204:	f022 0204 	bic.w	r2, r2, #4
 8002208:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1c2      	bne.n	8002196 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 8002210:	f7fe fee0 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002218:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800221a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800221e:	0798      	lsls	r0, r3, #30
 8002220:	d5c2      	bpl.n	80021a8 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002222:	f7fe fed7 	bl	8000fd4 <HAL_GetTick>
 8002226:	1bc0      	subs	r0, r0, r7
 8002228:	4548      	cmp	r0, r9
 800222a:	d9f6      	bls.n	800221a <HAL_RCC_OscConfig+0x372>
 800222c:	e6da      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fed1 	bl	8000fd4 <HAL_GetTick>
 8002232:	1bc0      	subs	r0, r0, r7
 8002234:	4548      	cmp	r0, r9
 8002236:	d9b3      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2f8>
 8002238:	e6d4      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800223a:	2e0c      	cmp	r6, #12
 800223c:	d05c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 800223e:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002240:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002246:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002248:	d13b      	bne.n	80022c2 <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 800224a:	f7fe fec3 	bl	8000fd4 <HAL_GetTick>
 800224e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	0199      	lsls	r1, r3, #6
 8002254:	d42f      	bmi.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002256:	68e2      	ldr	r2, [r4, #12]
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x4c0>)
 800225a:	4013      	ands	r3, r2
 800225c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800225e:	4313      	orrs	r3, r2
 8002260:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002262:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002266:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002268:	3a01      	subs	r2, #1
 800226a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800226e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002270:	0912      	lsrs	r2, r2, #4
 8002272:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002276:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002278:	0852      	lsrs	r2, r2, #1
 800227a:	3a01      	subs	r2, #1
 800227c:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8002280:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800228a:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	68e3      	ldr	r3, [r4, #12]
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800229c:	f7fe fe9a 	bl	8000fd4 <HAL_GetTick>
 80022a0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	019a      	lsls	r2, r3, #6
 80022a6:	f53f ae95 	bmi.w	8001fd4 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fe93 	bl	8000fd4 <HAL_GetTick>
 80022ae:	1b40      	subs	r0, r0, r5
 80022b0:	2802      	cmp	r0, #2
 80022b2:	d9f6      	bls.n	80022a2 <HAL_RCC_OscConfig+0x3fa>
 80022b4:	e696      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fe8d 	bl	8000fd4 <HAL_GetTick>
 80022ba:	1b80      	subs	r0, r0, r6
 80022bc:	2802      	cmp	r0, #2
 80022be:	d9c7      	bls.n	8002250 <HAL_RCC_OscConfig+0x3a8>
 80022c0:	e690      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022c8:	bf02      	ittt	eq
 80022ca:	68e3      	ldreq	r3, [r4, #12]
 80022cc:	f023 0303 	biceq.w	r3, r3, #3
 80022d0:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022d2:	68e3      	ldr	r3, [r4, #12]
 80022d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022dc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80022de:	f7fe fe79 	bl	8000fd4 <HAL_GetTick>
 80022e2:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	019b      	lsls	r3, r3, #6
 80022e8:	f57f ae74 	bpl.w	8001fd4 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fe72 	bl	8000fd4 <HAL_GetTick>
 80022f0:	1b40      	subs	r0, r0, r5
 80022f2:	2802      	cmp	r0, #2
 80022f4:	d9f6      	bls.n	80022e4 <HAL_RCC_OscConfig+0x43c>
 80022f6:	e675      	b.n	8001fe4 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	2801      	cmp	r0, #1
 80022fa:	f43f ae23 	beq.w	8001f44 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 80022fe:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002300:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002302:	f003 0103 	and.w	r1, r3, #3
 8002306:	4291      	cmp	r1, r2
 8002308:	f47f add2 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800230e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002312:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002318:	f47f adca 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800231e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002322:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002326:	f47f adc3 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800232a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800232c:	3a07      	subs	r2, #7
 800232e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002332:	bf18      	it	ne
 8002334:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002336:	4291      	cmp	r1, r2
 8002338:	f47f adba 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800233e:	0852      	lsrs	r2, r2, #1
 8002340:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002344:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002346:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800234a:	f47f adb1 	bne.w	8001eb0 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800234e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002350:	0852      	lsrs	r2, r2, #1
 8002352:	3a01      	subs	r2, #1
 8002354:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002358:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 800235c:	bf14      	ite	ne
 800235e:	2001      	movne	r0, #1
 8002360:	2000      	moveq	r0, #0
 8002362:	e5ef      	b.n	8001f44 <HAL_RCC_OscConfig+0x9c>
 8002364:	40007000 	.word	0x40007000
 8002368:	f99d808c 	.word	0xf99d808c

0800236c <HAL_RCC_ClockConfig>:
{
 800236c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002370:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002372:	4604      	mov	r4, r0
 8002374:	b910      	cbnz	r0, 800237c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002376:	2001      	movs	r0, #1
 8002378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_RCC_ClockConfig+0x118>)
 800237e:	6813      	ldr	r3, [r2, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	428b      	cmp	r3, r1
 8002386:	d32a      	bcc.n	80023de <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002388:	6823      	ldr	r3, [r4, #0]
 800238a:	07d9      	lsls	r1, r3, #31
 800238c:	d432      	bmi.n	80023f4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	6821      	ldr	r1, [r4, #0]
 8002390:	078a      	lsls	r2, r1, #30
 8002392:	d45c      	bmi.n	800244e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x118>)
 8002396:	6813      	ldr	r3, [r2, #0]
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	429e      	cmp	r6, r3
 800239e:	d35e      	bcc.n	800245e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	f011 0f04 	tst.w	r1, #4
 80023a4:	4d38      	ldr	r5, [pc, #224]	; (8002488 <HAL_RCC_ClockConfig+0x11c>)
 80023a6:	d165      	bne.n	8002474 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	070b      	lsls	r3, r1, #28
 80023aa:	d506      	bpl.n	80023ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ac:	68ab      	ldr	r3, [r5, #8]
 80023ae:	6922      	ldr	r2, [r4, #16]
 80023b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80023b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80023b8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ba:	f7ff fd27 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 80023be:	68ab      	ldr	r3, [r5, #8]
 80023c0:	4a32      	ldr	r2, [pc, #200]	; (800248c <HAL_RCC_ClockConfig+0x120>)
 80023c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80023c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	40d8      	lsrs	r0, r3
 80023d2:	4b2f      	ldr	r3, [pc, #188]	; (8002490 <HAL_RCC_ClockConfig+0x124>)
 80023d4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <HAL_RCC_ClockConfig+0x128>)
 80023d8:	6818      	ldr	r0, [r3, #0]
 80023da:	f7fe bdb9 	b.w	8000f50 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	6813      	ldr	r3, [r2, #0]
 80023e0:	f023 0307 	bic.w	r3, r3, #7
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	4299      	cmp	r1, r3
 80023f0:	d1c1      	bne.n	8002376 <HAL_RCC_ClockConfig+0xa>
 80023f2:	e7c9      	b.n	8002388 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f4:	6862      	ldr	r2, [r4, #4]
 80023f6:	4d24      	ldr	r5, [pc, #144]	; (8002488 <HAL_RCC_ClockConfig+0x11c>)
 80023f8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fc:	d11b      	bne.n	8002436 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002402:	d0b8      	beq.n	8002376 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002404:	68ab      	ldr	r3, [r5, #8]
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	4313      	orrs	r3, r2
 800240c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800240e:	f7fe fde1 	bl	8000fd4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002416:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	68ab      	ldr	r3, [r5, #8]
 800241a:	6862      	ldr	r2, [r4, #4]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002424:	d0b3      	beq.n	800238e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe fdd5 	bl	8000fd4 <HAL_GetTick>
 800242a:	1bc0      	subs	r0, r0, r7
 800242c:	4540      	cmp	r0, r8
 800242e:	d9f3      	bls.n	8002418 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8002430:	2003      	movs	r0, #3
}
 8002432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002436:	2a02      	cmp	r2, #2
 8002438:	d102      	bne.n	8002440 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800243e:	e7e0      	b.n	8002402 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002440:	b912      	cbnz	r2, 8002448 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002442:	f013 0f02 	tst.w	r3, #2
 8002446:	e7dc      	b.n	8002402 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800244c:	e7d9      	b.n	8002402 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_RCC_ClockConfig+0x11c>)
 8002450:	68a0      	ldr	r0, [r4, #8]
 8002452:	6893      	ldr	r3, [r2, #8]
 8002454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002458:	4303      	orrs	r3, r0
 800245a:	6093      	str	r3, [r2, #8]
 800245c:	e79a      	b.n	8002394 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	f023 0307 	bic.w	r3, r3, #7
 8002464:	4333      	orrs	r3, r6
 8002466:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	6813      	ldr	r3, [r2, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	429e      	cmp	r6, r3
 8002470:	d181      	bne.n	8002376 <HAL_RCC_ClockConfig+0xa>
 8002472:	e795      	b.n	80023a0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002474:	68ab      	ldr	r3, [r5, #8]
 8002476:	68e2      	ldr	r2, [r4, #12]
 8002478:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800247c:	4313      	orrs	r3, r2
 800247e:	60ab      	str	r3, [r5, #8]
 8002480:	e792      	b.n	80023a8 <HAL_RCC_ClockConfig+0x3c>
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
 800248c:	08006a25 	.word	0x08006a25
 8002490:	20000008 	.word	0x20000008
 8002494:	20000004 	.word	0x20000004

08002498 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800249a:	4b45      	ldr	r3, [pc, #276]	; (80025b0 <RCCEx_PLLSAI1_Config+0x118>)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	f012 0f03 	tst.w	r2, #3
{
 80024a2:	4605      	mov	r5, r0
 80024a4:	460e      	mov	r6, r1
 80024a6:	461c      	mov	r4, r3
 80024a8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024aa:	d02a      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	f002 0203 	and.w	r2, r2, #3
 80024b2:	4282      	cmp	r2, r0
 80024b4:	d13c      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0x98>
       ||
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d03a      	beq.n	8002530 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024ba:	68db      	ldr	r3, [r3, #12]
       ||
 80024bc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024be:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80024c2:	3301      	adds	r3, #1
       ||
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d133      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024ce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fd80 	bl	8000fd4 <HAL_GetTick>
 80024d4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	011a      	lsls	r2, r3, #4
 80024da:	d432      	bmi.n	8002542 <RCCEx_PLLSAI1_Config+0xaa>
 80024dc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024de:	2e00      	cmp	r6, #0
 80024e0:	d036      	beq.n	8002550 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024e2:	2e01      	cmp	r6, #1
 80024e4:	d150      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e6:	6922      	ldr	r2, [r4, #16]
 80024e8:	6928      	ldr	r0, [r5, #16]
 80024ea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80024ee:	0840      	lsrs	r0, r0, #1
 80024f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80024f4:	3801      	subs	r0, #1
 80024f6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80024fa:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 80024fe:	6122      	str	r2, [r4, #16]
 8002500:	e032      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002502:	2802      	cmp	r0, #2
 8002504:	d010      	beq.n	8002528 <RCCEx_PLLSAI1_Config+0x90>
 8002506:	2803      	cmp	r0, #3
 8002508:	d014      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x9c>
 800250a:	2801      	cmp	r0, #1
 800250c:	d110      	bne.n	8002530 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	079f      	lsls	r7, r3, #30
 8002512:	d538      	bpl.n	8002586 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002514:	68e3      	ldr	r3, [r4, #12]
 8002516:	686a      	ldr	r2, [r5, #4]
 8002518:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800251c:	3a01      	subs	r2, #1
 800251e:	4318      	orrs	r0, r3
 8002520:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002524:	60e0      	str	r0, [r4, #12]
 8002526:	e7cf      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800252e:	d1f1      	bne.n	8002514 <RCCEx_PLLSAI1_Config+0x7c>
 8002530:	2001      	movs	r0, #1
 8002532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	0391      	lsls	r1, r2, #14
 8002538:	d4ec      	bmi.n	8002514 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002540:	e7f5      	b.n	800252e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002542:	f7fe fd47 	bl	8000fd4 <HAL_GetTick>
 8002546:	1bc0      	subs	r0, r0, r7
 8002548:	2802      	cmp	r0, #2
 800254a:	d9c4      	bls.n	80024d6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002550:	6921      	ldr	r1, [r4, #16]
 8002552:	68eb      	ldr	r3, [r5, #12]
 8002554:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002558:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800255c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002566:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800256e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fd30 	bl	8000fd4 <HAL_GetTick>
 8002574:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	011b      	lsls	r3, r3, #4
 800257a:	d513      	bpl.n	80025a4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800257c:	6923      	ldr	r3, [r4, #16]
 800257e:	69aa      	ldr	r2, [r5, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	6123      	str	r3, [r4, #16]
 8002584:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002588:	6923      	ldr	r3, [r4, #16]
 800258a:	6968      	ldr	r0, [r5, #20]
 800258c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002590:	0840      	lsrs	r0, r0, #1
 8002592:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002596:	3801      	subs	r0, #1
 8002598:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800259c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80025a0:	6123      	str	r3, [r4, #16]
 80025a2:	e7e1      	b.n	8002568 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a4:	f7fe fd16 	bl	8000fd4 <HAL_GetTick>
 80025a8:	1b80      	subs	r0, r0, r6
 80025aa:	2802      	cmp	r0, #2
 80025ac:	d9e3      	bls.n	8002576 <RCCEx_PLLSAI1_Config+0xde>
 80025ae:	e7cd      	b.n	800254c <RCCEx_PLLSAI1_Config+0xb4>
 80025b0:	40021000 	.word	0x40021000

080025b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b6:	4b3d      	ldr	r3, [pc, #244]	; (80026ac <RCCEx_PLLSAI2_Config+0xf8>)
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	f012 0f03 	tst.w	r2, #3
{
 80025be:	4605      	mov	r5, r0
 80025c0:	460e      	mov	r6, r1
 80025c2:	461c      	mov	r4, r3
 80025c4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025c6:	d028      	beq.n	800261a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	f002 0203 	and.w	r2, r2, #3
 80025ce:	4282      	cmp	r2, r0
 80025d0:	d13a      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	d038      	beq.n	8002648 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025d6:	68db      	ldr	r3, [r3, #12]
       ||
 80025d8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025de:	3301      	adds	r3, #1
       ||
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d131      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fcf2 	bl	8000fd4 <HAL_GetTick>
 80025f0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	009a      	lsls	r2, r3, #2
 80025f6:	d430      	bmi.n	800265a <RCCEx_PLLSAI2_Config+0xa6>
 80025f8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025fa:	2e00      	cmp	r6, #0
 80025fc:	d034      	beq.n	8002668 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025fe:	6963      	ldr	r3, [r4, #20]
 8002600:	6929      	ldr	r1, [r5, #16]
 8002602:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002606:	0849      	lsrs	r1, r1, #1
 8002608:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800260c:	3901      	subs	r1, #1
 800260e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002612:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002616:	6163      	str	r3, [r4, #20]
 8002618:	e032      	b.n	8002680 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800261a:	2802      	cmp	r0, #2
 800261c:	d010      	beq.n	8002640 <RCCEx_PLLSAI2_Config+0x8c>
 800261e:	2803      	cmp	r0, #3
 8002620:	d014      	beq.n	800264c <RCCEx_PLLSAI2_Config+0x98>
 8002622:	2801      	cmp	r0, #1
 8002624:	d110      	bne.n	8002648 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	079f      	lsls	r7, r3, #30
 800262a:	d538      	bpl.n	800269e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800262c:	68e3      	ldr	r3, [r4, #12]
 800262e:	686a      	ldr	r2, [r5, #4]
 8002630:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002634:	3a01      	subs	r2, #1
 8002636:	4318      	orrs	r0, r3
 8002638:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800263c:	60e0      	str	r0, [r4, #12]
 800263e:	e7d1      	b.n	80025e4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002646:	d1f1      	bne.n	800262c <RCCEx_PLLSAI2_Config+0x78>
 8002648:	2001      	movs	r0, #1
 800264a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	0391      	lsls	r1, r2, #14
 8002650:	d4ec      	bmi.n	800262c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002658:	e7f5      	b.n	8002646 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800265a:	f7fe fcbb 	bl	8000fd4 <HAL_GetTick>
 800265e:	1bc0      	subs	r0, r0, r7
 8002660:	2802      	cmp	r0, #2
 8002662:	d9c6      	bls.n	80025f2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002664:	2003      	movs	r0, #3
 8002666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002668:	6962      	ldr	r2, [r4, #20]
 800266a:	68eb      	ldr	r3, [r5, #12]
 800266c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002670:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002674:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002678:	091b      	lsrs	r3, r3, #4
 800267a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800267e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fca4 	bl	8000fd4 <HAL_GetTick>
 800268c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	d505      	bpl.n	80026a0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002694:	6963      	ldr	r3, [r4, #20]
 8002696:	696a      	ldr	r2, [r5, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	6163      	str	r3, [r4, #20]
 800269c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026a0:	f7fe fc98 	bl	8000fd4 <HAL_GetTick>
 80026a4:	1b80      	subs	r0, r0, r6
 80026a6:	2802      	cmp	r0, #2
 80026a8:	d9f1      	bls.n	800268e <RCCEx_PLLSAI2_Config+0xda>
 80026aa:	e7db      	b.n	8002664 <RCCEx_PLLSAI2_Config+0xb0>
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80026b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026b4:	6806      	ldr	r6, [r0, #0]
 80026b6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80026ba:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026bc:	d024      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80026be:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80026c0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80026c4:	d02c      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80026c6:	d802      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026c8:	b1c1      	cbz	r1, 80026fc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80026ca:	2601      	movs	r6, #1
 80026cc:	e01c      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80026ce:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80026d2:	d00d      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80026d4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80026d8:	d1f7      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026da:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026dc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80026de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80026e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80026e6:	430b      	orrs	r3, r1
 80026e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80026ec:	2600      	movs	r6, #0
 80026ee:	e00b      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	68d3      	ldr	r3, [r2, #12]
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	60d3      	str	r3, [r2, #12]
      break;
 80026fa:	e7ee      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026fc:	3004      	adds	r0, #4
 80026fe:	f7ff fecb 	bl	8002498 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002702:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002704:	2800      	cmp	r0, #0
 8002706:	d0e8      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	04d8      	lsls	r0, r3, #19
 800270c:	d506      	bpl.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800270e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002710:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002714:	d074      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002716:	d808      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002718:	b1a9      	cbz	r1, 8002746 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800271a:	2601      	movs	r6, #1
 800271c:	4635      	mov	r5, r6
 800271e:	e021      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002720:	2100      	movs	r1, #0
 8002722:	3020      	adds	r0, #32
 8002724:	f7ff ff46 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 8002728:	e7eb      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800272a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800272e:	d004      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002730:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002734:	d1f1      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002736:	4635      	mov	r5, r6
 8002738:	e009      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800273a:	4a35      	ldr	r2, [pc, #212]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273c:	68d3      	ldr	r3, [r2, #12]
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	60d3      	str	r3, [r2, #12]
 8002744:	e7f7      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002746:	1d20      	adds	r0, r4, #4
 8002748:	f7ff fea6 	bl	8002498 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800274c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800274e:	2d00      	cmp	r5, #0
 8002750:	d15c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002752:	4a2f      	ldr	r2, [pc, #188]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002754:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002756:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800275a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800275e:	430b      	orrs	r3, r1
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	0399      	lsls	r1, r3, #14
 8002768:	f140 814f 	bpl.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800276c:	4f28      	ldr	r7, [pc, #160]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002770:	00da      	lsls	r2, r3, #3
 8002772:	f140 8176 	bpl.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002776:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002814 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800277e:	f8d9 3000 	ldr.w	r3, [r9]
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800278a:	f7fe fc23 	bl	8000fd4 <HAL_GetTick>
 800278e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002790:	f8d9 3000 	ldr.w	r3, [r9]
 8002794:	05db      	lsls	r3, r3, #23
 8002796:	d53f      	bpl.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002798:	2d00      	cmp	r5, #0
 800279a:	d144      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800279c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80027a4:	d015      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 80027a6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d011      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80027b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027be:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80027ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d2:	07d8      	lsls	r0, r3, #31
 80027d4:	d509      	bpl.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 80027d6:	f7fe fbfd 	bl	8000fd4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80027de:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027e4:	0799      	lsls	r1, r3, #30
 80027e6:	f140 8109 	bpl.w	80029fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80027f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80027fc:	4635      	mov	r5, r6
 80027fe:	e012      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002800:	2100      	movs	r1, #0
 8002802:	f104 0020 	add.w	r0, r4, #32
 8002806:	f7ff fed5 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 800280a:	e79f      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800280c:	462e      	mov	r6, r5
 800280e:	e7a9      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002810:	40021000 	.word	0x40021000
 8002814:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002818:	f7fe fbdc 	bl	8000fd4 <HAL_GetTick>
 800281c:	eba0 000a 	sub.w	r0, r0, sl
 8002820:	2802      	cmp	r0, #2
 8002822:	d9b5      	bls.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002824:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002826:	f1b8 0f00 	cmp.w	r8, #0
 800282a:	d003      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800282c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002832:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	07da      	lsls	r2, r3, #31
 8002838:	d508      	bpl.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800283a:	4990      	ldr	r1, [pc, #576]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800283c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800283e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002842:	f022 0203 	bic.w	r2, r2, #3
 8002846:	4302      	orrs	r2, r0
 8002848:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800284c:	079f      	lsls	r7, r3, #30
 800284e:	d508      	bpl.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002850:	498a      	ldr	r1, [pc, #552]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002852:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002854:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002858:	f022 020c 	bic.w	r2, r2, #12
 800285c:	4302      	orrs	r2, r0
 800285e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002862:	075e      	lsls	r6, r3, #29
 8002864:	d508      	bpl.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002866:	4985      	ldr	r1, [pc, #532]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002868:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800286a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800286e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002872:	4302      	orrs	r2, r0
 8002874:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002878:	0718      	lsls	r0, r3, #28
 800287a:	d508      	bpl.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800287c:	497f      	ldr	r1, [pc, #508]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800287e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002880:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002884:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002888:	4302      	orrs	r2, r0
 800288a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800288e:	06d9      	lsls	r1, r3, #27
 8002890:	d508      	bpl.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002892:	497a      	ldr	r1, [pc, #488]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002894:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002896:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800289a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800289e:	4302      	orrs	r2, r0
 80028a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028a4:	069a      	lsls	r2, r3, #26
 80028a6:	d508      	bpl.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a8:	4974      	ldr	r1, [pc, #464]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80028ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80028b4:	4302      	orrs	r2, r0
 80028b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ba:	059f      	lsls	r7, r3, #22
 80028bc:	d508      	bpl.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028be:	496f      	ldr	r1, [pc, #444]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80028c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80028ca:	4302      	orrs	r2, r0
 80028cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d0:	055e      	lsls	r6, r3, #21
 80028d2:	d508      	bpl.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028d4:	4969      	ldr	r1, [pc, #420]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80028d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80028e0:	4302      	orrs	r2, r0
 80028e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e6:	0658      	lsls	r0, r3, #25
 80028e8:	d508      	bpl.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ea:	4964      	ldr	r1, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80028ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80028f6:	4302      	orrs	r2, r0
 80028f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028fc:	0619      	lsls	r1, r3, #24
 80028fe:	d508      	bpl.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002900:	495e      	ldr	r1, [pc, #376]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002904:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002908:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800290c:	4302      	orrs	r2, r0
 800290e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002912:	05da      	lsls	r2, r3, #23
 8002914:	d508      	bpl.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002916:	4959      	ldr	r1, [pc, #356]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800291a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800291e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002922:	4302      	orrs	r2, r0
 8002924:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002928:	049b      	lsls	r3, r3, #18
 800292a:	d50f      	bpl.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292c:	4a53      	ldr	r2, [pc, #332]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800292e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002930:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002934:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002938:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800293e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002942:	d164      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	68d3      	ldr	r3, [r2, #12]
 8002946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	031f      	lsls	r7, r3, #12
 8002950:	d50f      	bpl.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002952:	4a4a      	ldr	r2, [pc, #296]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002954:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002956:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800295a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800295e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002960:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002968:	d15c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296a:	68d3      	ldr	r3, [r2, #12]
 800296c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002970:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	035e      	lsls	r6, r3, #13
 8002976:	d50f      	bpl.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002978:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800297a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800297c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002980:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002984:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002986:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800298a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800298e:	d154      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	68d3      	ldr	r3, [r2, #12]
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	0458      	lsls	r0, r3, #17
 800299c:	d512      	bpl.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800299e:	4937      	ldr	r1, [pc, #220]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029a0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80029a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80029aa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029b4:	d14c      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029b6:	2102      	movs	r1, #2
 80029b8:	1d20      	adds	r0, r4, #4
 80029ba:	f7ff fd6d 	bl	8002498 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80029be:	2800      	cmp	r0, #0
 80029c0:	bf18      	it	ne
 80029c2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029c4:	6822      	ldr	r2, [r4, #0]
 80029c6:	0411      	lsls	r1, r2, #16
 80029c8:	d508      	bpl.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ca:	492c      	ldr	r1, [pc, #176]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80029ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80029d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029d6:	4303      	orrs	r3, r0
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029dc:	03d3      	lsls	r3, r2, #15
 80029de:	d509      	bpl.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029e0:	4a26      	ldr	r2, [pc, #152]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029e2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80029e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029ee:	430b      	orrs	r3, r1
 80029f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80029f4:	4628      	mov	r0, r5
 80029f6:	b002      	add	sp, #8
 80029f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fc:	f7fe faea 	bl	8000fd4 <HAL_GetTick>
 8002a00:	1b40      	subs	r0, r0, r5
 8002a02:	4548      	cmp	r0, r9
 8002a04:	f67f aeec 	bls.w	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002a08:	e70c      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002a0a:	4635      	mov	r5, r6
 8002a0c:	e712      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a0e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a12:	d19b      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a14:	2101      	movs	r1, #1
 8002a16:	1d20      	adds	r0, r4, #4
 8002a18:	f7ff fd3e 	bl	8002498 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	bf18      	it	ne
 8002a20:	4605      	movne	r5, r0
 8002a22:	e793      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a24:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a28:	d1a3      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	1d20      	adds	r0, r4, #4
 8002a2e:	f7ff fd33 	bl	8002498 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a32:	2800      	cmp	r0, #0
 8002a34:	bf18      	it	ne
 8002a36:	4605      	movne	r5, r0
 8002a38:	e79b      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a3a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a3e:	d1ab      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a40:	2101      	movs	r1, #1
 8002a42:	1d20      	adds	r0, r4, #4
 8002a44:	f7ff fd28 	bl	8002498 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	bf18      	it	ne
 8002a4c:	4605      	movne	r5, r0
 8002a4e:	e7a3      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a50:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002a54:	d1b6      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a56:	2102      	movs	r1, #2
 8002a58:	f104 0020 	add.w	r0, r4, #32
 8002a5c:	f7ff fdaa 	bl	80025b4 <RCCEx_PLLSAI2_Config>
 8002a60:	e7ad      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a74:	f04f 0801 	mov.w	r8, #1
 8002a78:	e67f      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a84:	2244      	movs	r2, #68	; 0x44
 8002a86:	2100      	movs	r1, #0
 8002a88:	a805      	add	r0, sp, #20
 8002a8a:	f000 fa63 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a8e:	2214      	movs	r2, #20
 8002a90:	2100      	movs	r1, #0
 8002a92:	4668      	mov	r0, sp
 8002a94:	f000 fa5e 	bl	8002f54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a98:	2288      	movs	r2, #136	; 0x88
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	a816      	add	r0, sp, #88	; 0x58
 8002a9e:	f000 fa59 	bl	8002f54 <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aa2:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002aa4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002aa6:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002aa8:	2710      	movs	r7, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aaa:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002aac:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002aae:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002ab2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002ab4:	9705      	str	r7, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ab6:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002aba:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002abc:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002abe:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ac0:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ac2:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ac4:	f7ff f9f0 	bl	8001ea8 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ac8:	200f      	movs	r0, #15
 8002aca:	2303      	movs	r3, #3
 8002acc:	e88d 0009 	stmia.w	sp, {r0, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ad0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad2:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002ad4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ad8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ada:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002adc:	f7ff fc46 	bl	800236c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae4:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ae6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002aea:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aec:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002aee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002af2:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002af4:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002af6:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002af8:	9719      	str	r7, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002afa:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002afc:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002afe:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b00:	f7ff fdd6 	bl	80026b0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b08:	f7ff f908 	bl	8001d1c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002b0c:	b039      	add	sp, #228	; 0xe4
 8002b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b10 <main>:
{
 8002b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b14:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8002b16:	f7fe fa41 	bl	8000f9c <HAL_Init>
  SystemClock_Config();
 8002b1a:	f7ff ffb1 	bl	8002a80 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <main+0x190>)
  hadc1.Instance = ADC1;
 8002b20:	4c60      	ldr	r4, [pc, #384]	; (8002ca4 <main+0x194>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b24:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8002cc4 <main+0x1b4>
 8002b28:	f042 0204 	orr.w	r2, r2, #4
 8002b2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b30:	f002 0204 	and.w	r2, r2, #4
 8002b34:	9204      	str	r2, [sp, #16]
 8002b36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	649a      	str	r2, [r3, #72]	; 0x48
 8002b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b44:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b48:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b4a:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b4c:	200b      	movs	r0, #11
  ADC_MultiModeTypeDef multimode = {0};
 8002b4e:	2500      	movs	r5, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b50:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b52:	f7fe febb 	bl	80018cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b56:	200b      	movs	r0, #11
 8002b58:	f7fe feec 	bl	8001934 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	2218      	movs	r2, #24
 8002b60:	a808      	add	r0, sp, #32
  ADC_MultiModeTypeDef multimode = {0};
 8002b62:	9505      	str	r5, [sp, #20]
 8002b64:	9506      	str	r5, [sp, #24]
 8002b66:	9507      	str	r5, [sp, #28]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b68:	f000 f9f4 	bl	8002f54 <memset>
  hadc1.Instance = ADC1;
 8002b6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <main+0x198>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b6e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.NbrOfConversion = 2;
 8002b70:	2202      	movs	r2, #2
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b72:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b74:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b78:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b7a:	2301      	movs	r3, #1
  hadc1.Init.NbrOfConversion = 2;
 8002b7c:	61e2      	str	r2, [r4, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b7e:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b80:	7663      	strb	r3, [r4, #25]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002b82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b86:	6166      	str	r6, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b88:	60e5      	str	r5, [r4, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b8a:	7625      	strb	r5, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b8c:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b90:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b92:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b94:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b96:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b9a:	f7fe fa4f 	bl	800103c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002b9e:	a905      	add	r1, sp, #20
 8002ba0:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ba2:	9505      	str	r5, [sp, #20]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ba4:	f7fe fe08 	bl	80017b8 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 8002ba8:	4b40      	ldr	r3, [pc, #256]	; (8002cac <main+0x19c>)
 8002baa:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bac:	2306      	movs	r3, #6
 8002bae:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb0:	a908      	add	r1, sp, #32
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bb2:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bb4:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002bb6:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bb8:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bba:	960c      	str	r6, [sp, #48]	; 0x30
  sConfig.Offset = 0;
 8002bbc:	950d      	str	r5, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bbe:	f7fe fb67 	bl	8001290 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_13;
 8002bc2:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <main+0x1a0>)
 8002bc4:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bc6:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bc8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bca:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002bcc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002bce:	f7fe fb5f 	bl	8001290 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start_DMA(&hadc1,LMvalues,200);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	22c8      	movs	r2, #200	; 0xc8
 8002bd6:	4937      	ldr	r1, [pc, #220]	; (8002cb4 <main+0x1a4>)
 8002bd8:	f7fe fd68 	bl	80016ac <HAL_ADC_Start_DMA>
      LM35temp = (LM35Values/4095.0)*329.8;
 8002bdc:	a72c      	add	r7, pc, #176	; (adr r7, 8002c90 <main+0x180>)
 8002bde:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002be2:	a52d      	add	r5, pc, #180	; (adr r5, 8002c98 <main+0x188>)
 8002be4:	e9d5 4500 	ldrd	r4, r5, [r5]
		LM35Values = LM35Values + LMvalues[i];
 8002be8:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <main+0x1a4>)
 8002bea:	f8da 0000 	ldr.w	r0, [sl]
	  for(i=0; i<199 ; i+=2)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	4694      	mov	ip, r2
		LM35Values = LM35Values + LMvalues[i];
 8002bf2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	  for(i=0; i<199 ; i+=2)
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	2bc8      	cmp	r3, #200	; 0xc8
		LM35Values = LM35Values + LMvalues[i];
 8002bfa:	4408      	add	r0, r1
	  for(i=0; i<199 ; i+=2)
 8002bfc:	d1f9      	bne.n	8002bf2 <main+0xe2>
 8002bfe:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8002cc8 <main+0x1b8>
 8002c02:	f8de 2000 	ldr.w	r2, [lr]
 8002c06:	2301      	movs	r3, #1
	 		LM34Values = LM34Values + LMvalues[i];
 8002c08:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
	  for(i=1; i<200 ; i+=2)
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	2bc9      	cmp	r3, #201	; 0xc9
	 		LM34Values = LM34Values + LMvalues[i];
 8002c10:	440a      	add	r2, r1
	  for(i=1; i<200 ; i+=2)
 8002c12:	d1f9      	bne.n	8002c08 <main+0xf8>
      LM35Values = LM35Values/100;
 8002c14:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002c18:	fbb0 f0f8 	udiv	r0, r0, r8
      LM34Values = LM34Values/100;
 8002c1c:	fbb2 f8f8 	udiv	r8, r2, r8
      LM35Values = LM35Values/100;
 8002c20:	f8ca 0000 	str.w	r0, [sl]
      LM34Values = LM34Values/100;
 8002c24:	f8ce 8000 	str.w	r8, [lr]
      LM35temp = (LM35Values/4095.0)*329.8;
 8002c28:	f7fd fc6c 	bl	8000504 <__aeabi_ui2d>
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	463b      	mov	r3, r7
 8002c30:	f7fd fe08 	bl	8000844 <__aeabi_ddiv>
 8002c34:	4622      	mov	r2, r4
 8002c36:	462b      	mov	r3, r5
 8002c38:	f7fd fcda 	bl	80005f0 <__aeabi_dmul>
 8002c3c:	f7fd ffb0 	bl	8000ba0 <__aeabi_d2f>
 8002c40:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <main+0x1a8>)
 8002c42:	4681      	mov	r9, r0
 8002c44:	6018      	str	r0, [r3, #0]
      LM34temp = (LM34Values/4095.0)*329.8;
 8002c46:	4640      	mov	r0, r8
 8002c48:	f7fd fc5c 	bl	8000504 <__aeabi_ui2d>
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	463b      	mov	r3, r7
 8002c50:	f7fd fdf8 	bl	8000844 <__aeabi_ddiv>
 8002c54:	4622      	mov	r2, r4
 8002c56:	462b      	mov	r3, r5
 8002c58:	f7fd fcca 	bl	80005f0 <__aeabi_dmul>
 8002c5c:	f7fd ffa0 	bl	8000ba0 <__aeabi_d2f>
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <main+0x1ac>)
 8002c62:	4683      	mov	fp, r0
 8002c64:	6018      	str	r0, [r3, #0]
      printf("LM35temp: %0.2fC   LM34temp: %0.2fF\n", LM35temp, LM34temp);
 8002c66:	4648      	mov	r0, r9
 8002c68:	f7fd fc6e 	bl	8000548 <__aeabi_f2d>
 8002c6c:	4680      	mov	r8, r0
 8002c6e:	4658      	mov	r0, fp
 8002c70:	4689      	mov	r9, r1
 8002c72:	f7fd fc69 	bl	8000548 <__aeabi_f2d>
 8002c76:	4642      	mov	r2, r8
 8002c78:	e9cd 0100 	strd	r0, r1, [sp]
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	4810      	ldr	r0, [pc, #64]	; (8002cc0 <main+0x1b0>)
 8002c80:	f000 f970 	bl	8002f64 <printf>
      HAL_Delay(500);
 8002c84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c88:	f7fe f9aa 	bl	8000fe0 <HAL_Delay>
  {
 8002c8c:	e7ac      	b.n	8002be8 <main+0xd8>
 8002c8e:	bf00      	nop
 8002c90:	00000000 	.word	0x00000000
 8002c94:	40affe00 	.word	0x40affe00
 8002c98:	cccccccd 	.word	0xcccccccd
 8002c9c:	40749ccc 	.word	0x40749ccc
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	200006e0 	.word	0x200006e0
 8002ca8:	50040000 	.word	0x50040000
 8002cac:	3ac04000 	.word	0x3ac04000
 8002cb0:	36902000 	.word	0x36902000
 8002cb4:	20000744 	.word	0x20000744
 8002cb8:	2000069c 	.word	0x2000069c
 8002cbc:	20000698 	.word	0x20000698
 8002cc0:	08006a00 	.word	0x08006a00
 8002cc4:	20000aac 	.word	0x20000aac
 8002cc8:	200006dc 	.word	0x200006dc

08002ccc <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cd0:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8002cd4:	07d1      	lsls	r1, r2, #31
 8002cd6:	d503      	bpl.n	8002ce0 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002cd8:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cdc:	07d2      	lsls	r2, r2, #31
 8002cde:	d402      	bmi.n	8002ce6 <__io_putchar+0x1a>
/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
	ITM_SendChar(ch);
	return 0;
}
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002ce4:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	d0fb      	beq.n	8002ce4 <__io_putchar+0x18>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002cec:	b2c0      	uxtb	r0, r0
 8002cee:	7018      	strb	r0, [r3, #0]
 8002cf0:	e7f6      	b.n	8002ce0 <__io_putchar+0x14>

08002cf2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_MspInit+0x2c>)
 8002cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	661a      	str	r2, [r3, #96]	; 0x60
 8002cfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002d00:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	f002 0201 	and.w	r2, r2, #1
 8002d06:	9200      	str	r2, [sp, #0]
 8002d08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d0c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d10:	659a      	str	r2, [r3, #88]	; 0x58
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d1c:	b002      	add	sp, #8
 8002d1e:	4770      	bx	lr
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d24:	b530      	push	{r4, r5, lr}
 8002d26:	4605      	mov	r5, r0
 8002d28:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	2214      	movs	r2, #20
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	a803      	add	r0, sp, #12
 8002d30:	f000 f910 	bl	8002f54 <memset>
  if(hadc->Instance==ADC1)
 8002d34:	682a      	ldr	r2, [r5, #0]
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <HAL_ADC_MspInit+0x8c>)
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d137      	bne.n	8002dac <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d3c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002d40:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d44:	4c1b      	ldr	r4, [pc, #108]	; (8002db4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	481b      	ldr	r0, [pc, #108]	; (8002db8 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d4e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d56:	9201      	str	r2, [sp, #4]
 8002d58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d5c:	f042 0204 	orr.w	r2, r2, #4
 8002d60:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d6c:	2330      	movs	r3, #48	; 0x30
 8002d6e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d72:	230b      	movs	r3, #11
 8002d74:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d76:	f7fe feed 	bl	8001b54 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Instance = DMA1_Channel1;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d84:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d86:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8002d8a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d8c:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002d8e:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d90:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d92:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8002d94:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d96:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d98:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002d9a:	61e2      	str	r2, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d9c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d9e:	f7fe fded 	bl	800197c <HAL_DMA_Init>
 8002da2:	b108      	cbz	r0, 8002da8 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8002da4:	f7ff ffa5 	bl	8002cf2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002da8:	64ec      	str	r4, [r5, #76]	; 0x4c
 8002daa:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dac:	b009      	add	sp, #36	; 0x24
 8002dae:	bd30      	pop	{r4, r5, pc}
 8002db0:	50040000 	.word	0x50040000
 8002db4:	20000a64 	.word	0x20000a64
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	40020008 	.word	0x40020008

08002dc0 <NMI_Handler>:
 8002dc0:	4770      	bx	lr

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler>

08002dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc4:	e7fe      	b.n	8002dc4 <MemManage_Handler>

08002dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc6:	e7fe      	b.n	8002dc6 <BusFault_Handler>

08002dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler>

08002dca <SVC_Handler>:
 8002dca:	4770      	bx	lr

08002dcc <DebugMon_Handler>:
 8002dcc:	4770      	bx	lr

08002dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dce:	4770      	bx	lr

08002dd0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dd0:	f7fe b8f4 	b.w	8000fbc <HAL_IncTick>

08002dd4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dd4:	4801      	ldr	r0, [pc, #4]	; (8002ddc <DMA1_Channel1_IRQHandler+0x8>)
 8002dd6:	f7fe be73 	b.w	8001ac0 <HAL_DMA_IRQHandler>
 8002dda:	bf00      	nop
 8002ddc:	20000a64 	.word	0x20000a64

08002de0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002de0:	b570      	push	{r4, r5, r6, lr}
 8002de2:	460e      	mov	r6, r1
 8002de4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	460c      	mov	r4, r1
 8002de8:	1ba3      	subs	r3, r4, r6
 8002dea:	429d      	cmp	r5, r3
 8002dec:	dc01      	bgt.n	8002df2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002dee:	4628      	mov	r0, r5
 8002df0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002df2:	f3af 8000 	nop.w
 8002df6:	f804 0b01 	strb.w	r0, [r4], #1
 8002dfa:	e7f5      	b.n	8002de8 <_read+0x8>

08002dfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	460e      	mov	r6, r1
 8002e00:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e02:	460c      	mov	r4, r1
 8002e04:	1ba3      	subs	r3, r4, r6
 8002e06:	429d      	cmp	r5, r3
 8002e08:	dc01      	bgt.n	8002e0e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002e0e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002e12:	f7ff ff5b 	bl	8002ccc <__io_putchar>
 8002e16:	e7f5      	b.n	8002e04 <_write+0x8>

08002e18 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002e18:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <_sbrk+0x2c>)
 8002e1c:	6819      	ldr	r1, [r3, #0]
{
 8002e1e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002e20:	b909      	cbnz	r1, 8002e26 <_sbrk+0xe>
		heap_end = &end;
 8002e22:	4909      	ldr	r1, [pc, #36]	; (8002e48 <_sbrk+0x30>)
 8002e24:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002e26:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002e28:	4669      	mov	r1, sp
 8002e2a:	4402      	add	r2, r0
 8002e2c:	428a      	cmp	r2, r1
 8002e2e:	d906      	bls.n	8002e3e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002e30:	f000 f866 	bl	8002f00 <__errno>
 8002e34:	230c      	movs	r3, #12
 8002e36:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002e3e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002e40:	bd08      	pop	{r3, pc}
 8002e42:	bf00      	nop
 8002e44:	200006a0 	.word	0x200006a0
 8002e48:	20000ac0 	.word	0x20000ac0

08002e4c <_close>:

int _close(int file)
{
	return -1;
}
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	4770      	bx	lr

08002e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e56:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e58:	2000      	movs	r0, #0
 8002e5a:	4770      	bx	lr

08002e5c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4770      	bx	lr

08002e60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002e60:	2000      	movs	r0, #0
 8002e62:	4770      	bx	lr

08002e64 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e64:	490f      	ldr	r1, [pc, #60]	; (8002ea4 <SystemInit+0x40>)
 8002e66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e72:	4b0d      	ldr	r3, [pc, #52]	; (8002ea8 <SystemInit+0x44>)
 8002e74:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e76:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002e78:	f042 0201 	orr.w	r2, r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002e7e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002e86:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e98:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e9a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ea0:	608b      	str	r3, [r1, #8]
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00
 8002ea8:	40021000 	.word	0x40021000

08002eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eb0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eb2:	e003      	b.n	8002ebc <LoopCopyDataInit>

08002eb4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eb6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002eb8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002eba:	3104      	adds	r1, #4

08002ebc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ebc:	480b      	ldr	r0, [pc, #44]	; (8002eec <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ec0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ec2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ec4:	d3f6      	bcc.n	8002eb4 <CopyDataInit>
	ldr	r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ec8:	e002      	b.n	8002ed0 <LoopFillZerobss>

08002eca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002eca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ecc:	f842 3b04 	str.w	r3, [r2], #4

08002ed0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <LoopForever+0x16>)
	cmp	r2, r3
 8002ed2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ed4:	d3f9      	bcc.n	8002eca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ed6:	f7ff ffc5 	bl	8002e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f000 f817 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ede:	f7ff fe17 	bl	8002b10 <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ee4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002ee8:	08006d48 	.word	0x08006d48
	ldr	r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ef0:	2000067c 	.word	0x2000067c
	ldr	r2, =_sbss
 8002ef4:	2000067c 	.word	0x2000067c
	ldr	r3, = _ebss
 8002ef8:	20000ac0 	.word	0x20000ac0

08002efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>
	...

08002f00 <__errno>:
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <__errno+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	2000000c 	.word	0x2000000c

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	4e0d      	ldr	r6, [pc, #52]	; (8002f44 <__libc_init_array+0x38>)
 8002f10:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f12:	1ba4      	subs	r4, r4, r6
 8002f14:	10a4      	asrs	r4, r4, #2
 8002f16:	2500      	movs	r5, #0
 8002f18:	42a5      	cmp	r5, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	4e0b      	ldr	r6, [pc, #44]	; (8002f4c <__libc_init_array+0x40>)
 8002f1e:	4c0c      	ldr	r4, [pc, #48]	; (8002f50 <__libc_init_array+0x44>)
 8002f20:	f003 fd62 	bl	80069e8 <_init>
 8002f24:	1ba4      	subs	r4, r4, r6
 8002f26:	10a4      	asrs	r4, r4, #2
 8002f28:	2500      	movs	r5, #0
 8002f2a:	42a5      	cmp	r5, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f34:	4798      	blx	r3
 8002f36:	3501      	adds	r5, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3e:	4798      	blx	r3
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08006d40 	.word	0x08006d40
 8002f48:	08006d40 	.word	0x08006d40
 8002f4c:	08006d40 	.word	0x08006d40
 8002f50:	08006d44 	.word	0x08006d44

08002f54 <memset>:
 8002f54:	4402      	add	r2, r0
 8002f56:	4603      	mov	r3, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <printf>:
 8002f64:	b40f      	push	{r0, r1, r2, r3}
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <printf+0x2c>)
 8002f68:	b513      	push	{r0, r1, r4, lr}
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	b124      	cbz	r4, 8002f78 <printf+0x14>
 8002f6e:	69a3      	ldr	r3, [r4, #24]
 8002f70:	b913      	cbnz	r3, 8002f78 <printf+0x14>
 8002f72:	4620      	mov	r0, r4
 8002f74:	f002 f87c 	bl	8005070 <__sinit>
 8002f78:	ab05      	add	r3, sp, #20
 8002f7a:	9a04      	ldr	r2, [sp, #16]
 8002f7c:	68a1      	ldr	r1, [r4, #8]
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 f809 	bl	8002f98 <_vfprintf_r>
 8002f86:	b002      	add	sp, #8
 8002f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f8c:	b004      	add	sp, #16
 8002f8e:	4770      	bx	lr
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	00000000 	.word	0x00000000

08002f98 <_vfprintf_r>:
 8002f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9c:	b0bd      	sub	sp, #244	; 0xf4
 8002f9e:	4688      	mov	r8, r1
 8002fa0:	4615      	mov	r5, r2
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	461f      	mov	r7, r3
 8002fa6:	4683      	mov	fp, r0
 8002fa8:	f002 fa12 	bl	80053d0 <_localeconv_r>
 8002fac:	6803      	ldr	r3, [r0, #0]
 8002fae:	930d      	str	r3, [sp, #52]	; 0x34
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fd f95d 	bl	8000270 <strlen>
 8002fb6:	9009      	str	r0, [sp, #36]	; 0x24
 8002fb8:	f1bb 0f00 	cmp.w	fp, #0
 8002fbc:	d005      	beq.n	8002fca <_vfprintf_r+0x32>
 8002fbe:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002fc2:	b913      	cbnz	r3, 8002fca <_vfprintf_r+0x32>
 8002fc4:	4658      	mov	r0, fp
 8002fc6:	f002 f853 	bl	8005070 <__sinit>
 8002fca:	4b99      	ldr	r3, [pc, #612]	; (8003230 <_vfprintf_r+0x298>)
 8002fcc:	4598      	cmp	r8, r3
 8002fce:	d137      	bne.n	8003040 <_vfprintf_r+0xa8>
 8002fd0:	f8db 8004 	ldr.w	r8, [fp, #4]
 8002fd4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8002fd8:	07d8      	lsls	r0, r3, #31
 8002fda:	d407      	bmi.n	8002fec <_vfprintf_r+0x54>
 8002fdc:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002fe0:	0599      	lsls	r1, r3, #22
 8002fe2:	d403      	bmi.n	8002fec <_vfprintf_r+0x54>
 8002fe4:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8002fe8:	f002 fa02 	bl	80053f0 <__retarget_lock_acquire_recursive>
 8002fec:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8002ff0:	049a      	lsls	r2, r3, #18
 8002ff2:	d409      	bmi.n	8003008 <_vfprintf_r+0x70>
 8002ff4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff8:	f8a8 300c 	strh.w	r3, [r8, #12]
 8002ffc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003004:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8003008:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800300c:	071e      	lsls	r6, r3, #28
 800300e:	d502      	bpl.n	8003016 <_vfprintf_r+0x7e>
 8003010:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8003014:	bb03      	cbnz	r3, 8003058 <_vfprintf_r+0xc0>
 8003016:	4641      	mov	r1, r8
 8003018:	4658      	mov	r0, fp
 800301a:	f001 f839 	bl	8004090 <__swsetup_r>
 800301e:	b1d8      	cbz	r0, 8003058 <_vfprintf_r+0xc0>
 8003020:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003024:	07dd      	lsls	r5, r3, #31
 8003026:	d407      	bmi.n	8003038 <_vfprintf_r+0xa0>
 8003028:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800302c:	059c      	lsls	r4, r3, #22
 800302e:	d403      	bmi.n	8003038 <_vfprintf_r+0xa0>
 8003030:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003034:	f002 f9dd 	bl	80053f2 <__retarget_lock_release_recursive>
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	930a      	str	r3, [sp, #40]	; 0x28
 800303e:	e026      	b.n	800308e <_vfprintf_r+0xf6>
 8003040:	4b7c      	ldr	r3, [pc, #496]	; (8003234 <_vfprintf_r+0x29c>)
 8003042:	4598      	cmp	r8, r3
 8003044:	d102      	bne.n	800304c <_vfprintf_r+0xb4>
 8003046:	f8db 8008 	ldr.w	r8, [fp, #8]
 800304a:	e7c3      	b.n	8002fd4 <_vfprintf_r+0x3c>
 800304c:	4b7a      	ldr	r3, [pc, #488]	; (8003238 <_vfprintf_r+0x2a0>)
 800304e:	4598      	cmp	r8, r3
 8003050:	bf08      	it	eq
 8003052:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8003056:	e7bd      	b.n	8002fd4 <_vfprintf_r+0x3c>
 8003058:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800305c:	f003 021a 	and.w	r2, r3, #26
 8003060:	2a0a      	cmp	r2, #10
 8003062:	d118      	bne.n	8003096 <_vfprintf_r+0xfe>
 8003064:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8003068:	2a00      	cmp	r2, #0
 800306a:	db14      	blt.n	8003096 <_vfprintf_r+0xfe>
 800306c:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8003070:	07d0      	lsls	r0, r2, #31
 8003072:	d405      	bmi.n	8003080 <_vfprintf_r+0xe8>
 8003074:	0599      	lsls	r1, r3, #22
 8003076:	d403      	bmi.n	8003080 <_vfprintf_r+0xe8>
 8003078:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800307c:	f002 f9b9 	bl	80053f2 <__retarget_lock_release_recursive>
 8003080:	4623      	mov	r3, r4
 8003082:	462a      	mov	r2, r5
 8003084:	4641      	mov	r1, r8
 8003086:	4658      	mov	r0, fp
 8003088:	f000 ffc2 	bl	8004010 <__sbprintf>
 800308c:	900a      	str	r0, [sp, #40]	; 0x28
 800308e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003090:	b03d      	add	sp, #244	; 0xf4
 8003092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003096:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8003228 <_vfprintf_r+0x290>
 800309a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800309e:	2300      	movs	r3, #0
 80030a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80030a2:	941f      	str	r4, [sp, #124]	; 0x7c
 80030a4:	9321      	str	r3, [sp, #132]	; 0x84
 80030a6:	9320      	str	r3, [sp, #128]	; 0x80
 80030a8:	9505      	str	r5, [sp, #20]
 80030aa:	9303      	str	r3, [sp, #12]
 80030ac:	9311      	str	r3, [sp, #68]	; 0x44
 80030ae:	9310      	str	r3, [sp, #64]	; 0x40
 80030b0:	930a      	str	r3, [sp, #40]	; 0x28
 80030b2:	9d05      	ldr	r5, [sp, #20]
 80030b4:	462b      	mov	r3, r5
 80030b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030ba:	b112      	cbz	r2, 80030c2 <_vfprintf_r+0x12a>
 80030bc:	2a25      	cmp	r2, #37	; 0x25
 80030be:	f040 8083 	bne.w	80031c8 <_vfprintf_r+0x230>
 80030c2:	9b05      	ldr	r3, [sp, #20]
 80030c4:	1aee      	subs	r6, r5, r3
 80030c6:	d00d      	beq.n	80030e4 <_vfprintf_r+0x14c>
 80030c8:	e884 0048 	stmia.w	r4, {r3, r6}
 80030cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ce:	4433      	add	r3, r6
 80030d0:	9321      	str	r3, [sp, #132]	; 0x84
 80030d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030d4:	3301      	adds	r3, #1
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	9320      	str	r3, [sp, #128]	; 0x80
 80030da:	dc77      	bgt.n	80031cc <_vfprintf_r+0x234>
 80030dc:	3408      	adds	r4, #8
 80030de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030e0:	4433      	add	r3, r6
 80030e2:	930a      	str	r3, [sp, #40]	; 0x28
 80030e4:	782b      	ldrb	r3, [r5, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 8739 	beq.w	8003f5e <_vfprintf_r+0xfc6>
 80030ec:	2300      	movs	r3, #0
 80030ee:	1c69      	adds	r1, r5, #1
 80030f0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80030f4:	461a      	mov	r2, r3
 80030f6:	f04f 3aff 	mov.w	sl, #4294967295
 80030fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80030fc:	461d      	mov	r5, r3
 80030fe:	200a      	movs	r0, #10
 8003100:	1c4e      	adds	r6, r1, #1
 8003102:	7809      	ldrb	r1, [r1, #0]
 8003104:	9605      	str	r6, [sp, #20]
 8003106:	9102      	str	r1, [sp, #8]
 8003108:	9902      	ldr	r1, [sp, #8]
 800310a:	3920      	subs	r1, #32
 800310c:	2958      	cmp	r1, #88	; 0x58
 800310e:	f200 841d 	bhi.w	800394c <_vfprintf_r+0x9b4>
 8003112:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003116:	00b3      	.short	0x00b3
 8003118:	041b041b 	.word	0x041b041b
 800311c:	041b00b8 	.word	0x041b00b8
 8003120:	041b041b 	.word	0x041b041b
 8003124:	041b041b 	.word	0x041b041b
 8003128:	00bb041b 	.word	0x00bb041b
 800312c:	041b0065 	.word	0x041b0065
 8003130:	00c700c4 	.word	0x00c700c4
 8003134:	00e4041b 	.word	0x00e4041b
 8003138:	00e700e7 	.word	0x00e700e7
 800313c:	00e700e7 	.word	0x00e700e7
 8003140:	00e700e7 	.word	0x00e700e7
 8003144:	00e700e7 	.word	0x00e700e7
 8003148:	041b00e7 	.word	0x041b00e7
 800314c:	041b041b 	.word	0x041b041b
 8003150:	041b041b 	.word	0x041b041b
 8003154:	041b041b 	.word	0x041b041b
 8003158:	041b041b 	.word	0x041b041b
 800315c:	011b041b 	.word	0x011b041b
 8003160:	041b0131 	.word	0x041b0131
 8003164:	041b0131 	.word	0x041b0131
 8003168:	041b041b 	.word	0x041b041b
 800316c:	00fa041b 	.word	0x00fa041b
 8003170:	041b041b 	.word	0x041b041b
 8003174:	041b0346 	.word	0x041b0346
 8003178:	041b041b 	.word	0x041b041b
 800317c:	041b041b 	.word	0x041b041b
 8003180:	041b03ad 	.word	0x041b03ad
 8003184:	0093041b 	.word	0x0093041b
 8003188:	041b041b 	.word	0x041b041b
 800318c:	041b041b 	.word	0x041b041b
 8003190:	041b041b 	.word	0x041b041b
 8003194:	041b041b 	.word	0x041b041b
 8003198:	041b041b 	.word	0x041b041b
 800319c:	006b010d 	.word	0x006b010d
 80031a0:	01310131 	.word	0x01310131
 80031a4:	00fd0131 	.word	0x00fd0131
 80031a8:	041b006b 	.word	0x041b006b
 80031ac:	0100041b 	.word	0x0100041b
 80031b0:	0328041b 	.word	0x0328041b
 80031b4:	037c0348 	.word	0x037c0348
 80031b8:	041b0107 	.word	0x041b0107
 80031bc:	041b038d 	.word	0x041b038d
 80031c0:	041b03af 	.word	0x041b03af
 80031c4:	03c7041b 	.word	0x03c7041b
 80031c8:	461d      	mov	r5, r3
 80031ca:	e773      	b.n	80030b4 <_vfprintf_r+0x11c>
 80031cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80031ce:	4641      	mov	r1, r8
 80031d0:	4658      	mov	r0, fp
 80031d2:	f002 fecc 	bl	8005f6e <__sprint_r>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	f040 8699 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80031dc:	ac2c      	add	r4, sp, #176	; 0xb0
 80031de:	e77e      	b.n	80030de <_vfprintf_r+0x146>
 80031e0:	2301      	movs	r3, #1
 80031e2:	222b      	movs	r2, #43	; 0x2b
 80031e4:	9905      	ldr	r1, [sp, #20]
 80031e6:	e78b      	b.n	8003100 <_vfprintf_r+0x168>
 80031e8:	460f      	mov	r7, r1
 80031ea:	e7fb      	b.n	80031e4 <_vfprintf_r+0x24c>
 80031ec:	b10b      	cbz	r3, 80031f2 <_vfprintf_r+0x25a>
 80031ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80031f2:	06aa      	lsls	r2, r5, #26
 80031f4:	f140 80b0 	bpl.w	8003358 <_vfprintf_r+0x3c0>
 80031f8:	3707      	adds	r7, #7
 80031fa:	f027 0707 	bic.w	r7, r7, #7
 80031fe:	f107 0308 	add.w	r3, r7, #8
 8003202:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003206:	9304      	str	r3, [sp, #16]
 8003208:	2e00      	cmp	r6, #0
 800320a:	f177 0300 	sbcs.w	r3, r7, #0
 800320e:	da06      	bge.n	800321e <_vfprintf_r+0x286>
 8003210:	4276      	negs	r6, r6
 8003212:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003216:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800321a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800321e:	2301      	movs	r3, #1
 8003220:	e2d0      	b.n	80037c4 <_vfprintf_r+0x82c>
 8003222:	bf00      	nop
 8003224:	f3af 8000 	nop.w
	...
 8003230:	08006af0 	.word	0x08006af0
 8003234:	08006b10 	.word	0x08006b10
 8003238:	08006ad0 	.word	0x08006ad0
 800323c:	b10b      	cbz	r3, 8003242 <_vfprintf_r+0x2aa>
 800323e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003242:	4ba2      	ldr	r3, [pc, #648]	; (80034cc <_vfprintf_r+0x534>)
 8003244:	9311      	str	r3, [sp, #68]	; 0x44
 8003246:	06a9      	lsls	r1, r5, #26
 8003248:	f140 8331 	bpl.w	80038ae <_vfprintf_r+0x916>
 800324c:	3707      	adds	r7, #7
 800324e:	f027 0707 	bic.w	r7, r7, #7
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	e9d7 6700 	ldrd	r6, r7, [r7]
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	07eb      	lsls	r3, r5, #31
 800325e:	d50b      	bpl.n	8003278 <_vfprintf_r+0x2e0>
 8003260:	ea56 0307 	orrs.w	r3, r6, r7
 8003264:	d008      	beq.n	8003278 <_vfprintf_r+0x2e0>
 8003266:	2330      	movs	r3, #48	; 0x30
 8003268:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800326c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003270:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003274:	f045 0502 	orr.w	r5, r5, #2
 8003278:	2302      	movs	r3, #2
 800327a:	e2a0      	b.n	80037be <_vfprintf_r+0x826>
 800327c:	2a00      	cmp	r2, #0
 800327e:	d1b1      	bne.n	80031e4 <_vfprintf_r+0x24c>
 8003280:	2301      	movs	r3, #1
 8003282:	2220      	movs	r2, #32
 8003284:	e7ae      	b.n	80031e4 <_vfprintf_r+0x24c>
 8003286:	f045 0501 	orr.w	r5, r5, #1
 800328a:	e7ab      	b.n	80031e4 <_vfprintf_r+0x24c>
 800328c:	683e      	ldr	r6, [r7, #0]
 800328e:	960b      	str	r6, [sp, #44]	; 0x2c
 8003290:	2e00      	cmp	r6, #0
 8003292:	f107 0104 	add.w	r1, r7, #4
 8003296:	daa7      	bge.n	80031e8 <_vfprintf_r+0x250>
 8003298:	4276      	negs	r6, r6
 800329a:	960b      	str	r6, [sp, #44]	; 0x2c
 800329c:	460f      	mov	r7, r1
 800329e:	f045 0504 	orr.w	r5, r5, #4
 80032a2:	e79f      	b.n	80031e4 <_vfprintf_r+0x24c>
 80032a4:	9905      	ldr	r1, [sp, #20]
 80032a6:	1c4e      	adds	r6, r1, #1
 80032a8:	7809      	ldrb	r1, [r1, #0]
 80032aa:	9102      	str	r1, [sp, #8]
 80032ac:	292a      	cmp	r1, #42	; 0x2a
 80032ae:	d010      	beq.n	80032d2 <_vfprintf_r+0x33a>
 80032b0:	f04f 0a00 	mov.w	sl, #0
 80032b4:	9605      	str	r6, [sp, #20]
 80032b6:	9902      	ldr	r1, [sp, #8]
 80032b8:	3930      	subs	r1, #48	; 0x30
 80032ba:	2909      	cmp	r1, #9
 80032bc:	f63f af24 	bhi.w	8003108 <_vfprintf_r+0x170>
 80032c0:	fb00 1a0a 	mla	sl, r0, sl, r1
 80032c4:	9905      	ldr	r1, [sp, #20]
 80032c6:	460e      	mov	r6, r1
 80032c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80032cc:	9102      	str	r1, [sp, #8]
 80032ce:	9605      	str	r6, [sp, #20]
 80032d0:	e7f1      	b.n	80032b6 <_vfprintf_r+0x31e>
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	9605      	str	r6, [sp, #20]
 80032d6:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 80032da:	3704      	adds	r7, #4
 80032dc:	e782      	b.n	80031e4 <_vfprintf_r+0x24c>
 80032de:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80032e2:	e77f      	b.n	80031e4 <_vfprintf_r+0x24c>
 80032e4:	2100      	movs	r1, #0
 80032e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80032e8:	9902      	ldr	r1, [sp, #8]
 80032ea:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80032ec:	3930      	subs	r1, #48	; 0x30
 80032ee:	fb00 1106 	mla	r1, r0, r6, r1
 80032f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80032f4:	9905      	ldr	r1, [sp, #20]
 80032f6:	460e      	mov	r6, r1
 80032f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80032fc:	9102      	str	r1, [sp, #8]
 80032fe:	9902      	ldr	r1, [sp, #8]
 8003300:	9605      	str	r6, [sp, #20]
 8003302:	3930      	subs	r1, #48	; 0x30
 8003304:	2909      	cmp	r1, #9
 8003306:	d9ef      	bls.n	80032e8 <_vfprintf_r+0x350>
 8003308:	e6fe      	b.n	8003108 <_vfprintf_r+0x170>
 800330a:	f045 0508 	orr.w	r5, r5, #8
 800330e:	e769      	b.n	80031e4 <_vfprintf_r+0x24c>
 8003310:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003314:	e766      	b.n	80031e4 <_vfprintf_r+0x24c>
 8003316:	9905      	ldr	r1, [sp, #20]
 8003318:	7809      	ldrb	r1, [r1, #0]
 800331a:	296c      	cmp	r1, #108	; 0x6c
 800331c:	d105      	bne.n	800332a <_vfprintf_r+0x392>
 800331e:	9905      	ldr	r1, [sp, #20]
 8003320:	3101      	adds	r1, #1
 8003322:	9105      	str	r1, [sp, #20]
 8003324:	f045 0520 	orr.w	r5, r5, #32
 8003328:	e75c      	b.n	80031e4 <_vfprintf_r+0x24c>
 800332a:	f045 0510 	orr.w	r5, r5, #16
 800332e:	e759      	b.n	80031e4 <_vfprintf_r+0x24c>
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	9304      	str	r3, [sp, #16]
 8003334:	2600      	movs	r6, #0
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800333c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003340:	f04f 0a01 	mov.w	sl, #1
 8003344:	9608      	str	r6, [sp, #32]
 8003346:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 800334a:	e11e      	b.n	800358a <_vfprintf_r+0x5f2>
 800334c:	b10b      	cbz	r3, 8003352 <_vfprintf_r+0x3ba>
 800334e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003352:	f045 0510 	orr.w	r5, r5, #16
 8003356:	e74c      	b.n	80031f2 <_vfprintf_r+0x25a>
 8003358:	f015 0f10 	tst.w	r5, #16
 800335c:	f107 0304 	add.w	r3, r7, #4
 8003360:	d003      	beq.n	800336a <_vfprintf_r+0x3d2>
 8003362:	683e      	ldr	r6, [r7, #0]
 8003364:	9304      	str	r3, [sp, #16]
 8003366:	17f7      	asrs	r7, r6, #31
 8003368:	e74e      	b.n	8003208 <_vfprintf_r+0x270>
 800336a:	683e      	ldr	r6, [r7, #0]
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003372:	bf18      	it	ne
 8003374:	b236      	sxthne	r6, r6
 8003376:	e7f6      	b.n	8003366 <_vfprintf_r+0x3ce>
 8003378:	b10b      	cbz	r3, 800337e <_vfprintf_r+0x3e6>
 800337a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800337e:	3707      	adds	r7, #7
 8003380:	f027 0707 	bic.w	r7, r7, #7
 8003384:	f107 0308 	add.w	r3, r7, #8
 8003388:	9304      	str	r3, [sp, #16]
 800338a:	ed97 7b00 	vldr	d7, [r7]
 800338e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003392:	9b06      	ldr	r3, [sp, #24]
 8003394:	9312      	str	r3, [sp, #72]	; 0x48
 8003396:	9b07      	ldr	r3, [sp, #28]
 8003398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800339c:	9313      	str	r3, [sp, #76]	; 0x4c
 800339e:	f04f 32ff 	mov.w	r2, #4294967295
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <_vfprintf_r+0x538>)
 80033a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80033a8:	f7fd fbbc 	bl	8000b24 <__aeabi_dcmpun>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	f040 85e3 	bne.w	8003f78 <_vfprintf_r+0xfe0>
 80033b2:	f04f 32ff 	mov.w	r2, #4294967295
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <_vfprintf_r+0x538>)
 80033b8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80033bc:	f7fd fb94 	bl	8000ae8 <__aeabi_dcmple>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 85d9 	bne.w	8003f78 <_vfprintf_r+0xfe0>
 80033c6:	2200      	movs	r2, #0
 80033c8:	2300      	movs	r3, #0
 80033ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033ce:	f7fd fb81 	bl	8000ad4 <__aeabi_dcmplt>
 80033d2:	b110      	cbz	r0, 80033da <_vfprintf_r+0x442>
 80033d4:	232d      	movs	r3, #45	; 0x2d
 80033d6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <_vfprintf_r+0x53c>)
 80033dc:	4a3e      	ldr	r2, [pc, #248]	; (80034d8 <_vfprintf_r+0x540>)
 80033de:	9902      	ldr	r1, [sp, #8]
 80033e0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80033e4:	2947      	cmp	r1, #71	; 0x47
 80033e6:	bfcc      	ite	gt
 80033e8:	4691      	movgt	r9, r2
 80033ea:	4699      	movle	r9, r3
 80033ec:	f04f 0a03 	mov.w	sl, #3
 80033f0:	2600      	movs	r6, #0
 80033f2:	9608      	str	r6, [sp, #32]
 80033f4:	e0c9      	b.n	800358a <_vfprintf_r+0x5f2>
 80033f6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80033fa:	d022      	beq.n	8003442 <_vfprintf_r+0x4aa>
 80033fc:	9b02      	ldr	r3, [sp, #8]
 80033fe:	f023 0320 	bic.w	r3, r3, #32
 8003402:	2b47      	cmp	r3, #71	; 0x47
 8003404:	d104      	bne.n	8003410 <_vfprintf_r+0x478>
 8003406:	f1ba 0f00 	cmp.w	sl, #0
 800340a:	bf08      	it	eq
 800340c:	f04f 0a01 	moveq.w	sl, #1
 8003410:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003414:	9314      	str	r3, [sp, #80]	; 0x50
 8003416:	9b07      	ldr	r3, [sp, #28]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da15      	bge.n	8003448 <_vfprintf_r+0x4b0>
 800341c:	9b06      	ldr	r3, [sp, #24]
 800341e:	930e      	str	r3, [sp, #56]	; 0x38
 8003420:	9b07      	ldr	r3, [sp, #28]
 8003422:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003426:	930f      	str	r3, [sp, #60]	; 0x3c
 8003428:	232d      	movs	r3, #45	; 0x2d
 800342a:	930c      	str	r3, [sp, #48]	; 0x30
 800342c:	9b02      	ldr	r3, [sp, #8]
 800342e:	f023 0720 	bic.w	r7, r3, #32
 8003432:	2f46      	cmp	r7, #70	; 0x46
 8003434:	d00e      	beq.n	8003454 <_vfprintf_r+0x4bc>
 8003436:	2f45      	cmp	r7, #69	; 0x45
 8003438:	d146      	bne.n	80034c8 <_vfprintf_r+0x530>
 800343a:	f10a 0601 	add.w	r6, sl, #1
 800343e:	2102      	movs	r1, #2
 8003440:	e00a      	b.n	8003458 <_vfprintf_r+0x4c0>
 8003442:	f04f 0a06 	mov.w	sl, #6
 8003446:	e7e3      	b.n	8003410 <_vfprintf_r+0x478>
 8003448:	ed9d 7b06 	vldr	d7, [sp, #24]
 800344c:	2300      	movs	r3, #0
 800344e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003452:	e7ea      	b.n	800342a <_vfprintf_r+0x492>
 8003454:	4656      	mov	r6, sl
 8003456:	2103      	movs	r1, #3
 8003458:	ab1d      	add	r3, sp, #116	; 0x74
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	ab1a      	add	r3, sp, #104	; 0x68
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	4632      	mov	r2, r6
 8003462:	ab19      	add	r3, sp, #100	; 0x64
 8003464:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003468:	4658      	mov	r0, fp
 800346a:	f000 ff0d 	bl	8004288 <_dtoa_r>
 800346e:	2f47      	cmp	r7, #71	; 0x47
 8003470:	4681      	mov	r9, r0
 8003472:	d102      	bne.n	800347a <_vfprintf_r+0x4e2>
 8003474:	07eb      	lsls	r3, r5, #31
 8003476:	f140 858c 	bpl.w	8003f92 <_vfprintf_r+0xffa>
 800347a:	eb09 0306 	add.w	r3, r9, r6
 800347e:	2f46      	cmp	r7, #70	; 0x46
 8003480:	9303      	str	r3, [sp, #12]
 8003482:	d111      	bne.n	80034a8 <_vfprintf_r+0x510>
 8003484:	f899 3000 	ldrb.w	r3, [r9]
 8003488:	2b30      	cmp	r3, #48	; 0x30
 800348a:	d109      	bne.n	80034a0 <_vfprintf_r+0x508>
 800348c:	2200      	movs	r2, #0
 800348e:	2300      	movs	r3, #0
 8003490:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003494:	f7fd fb14 	bl	8000ac0 <__aeabi_dcmpeq>
 8003498:	b910      	cbnz	r0, 80034a0 <_vfprintf_r+0x508>
 800349a:	f1c6 0601 	rsb	r6, r6, #1
 800349e:	9619      	str	r6, [sp, #100]	; 0x64
 80034a0:	9a03      	ldr	r2, [sp, #12]
 80034a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034a4:	441a      	add	r2, r3
 80034a6:	9203      	str	r2, [sp, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2300      	movs	r3, #0
 80034ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80034b0:	f7fd fb06 	bl	8000ac0 <__aeabi_dcmpeq>
 80034b4:	b990      	cbnz	r0, 80034dc <_vfprintf_r+0x544>
 80034b6:	2230      	movs	r2, #48	; 0x30
 80034b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80034ba:	9903      	ldr	r1, [sp, #12]
 80034bc:	4299      	cmp	r1, r3
 80034be:	d90f      	bls.n	80034e0 <_vfprintf_r+0x548>
 80034c0:	1c59      	adds	r1, r3, #1
 80034c2:	911d      	str	r1, [sp, #116]	; 0x74
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e7f7      	b.n	80034b8 <_vfprintf_r+0x520>
 80034c8:	4656      	mov	r6, sl
 80034ca:	e7b8      	b.n	800343e <_vfprintf_r+0x4a6>
 80034cc:	08006a7c 	.word	0x08006a7c
 80034d0:	7fefffff 	.word	0x7fefffff
 80034d4:	08006a6c 	.word	0x08006a6c
 80034d8:	08006a70 	.word	0x08006a70
 80034dc:	9b03      	ldr	r3, [sp, #12]
 80034de:	931d      	str	r3, [sp, #116]	; 0x74
 80034e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80034e2:	2f47      	cmp	r7, #71	; 0x47
 80034e4:	eba3 0309 	sub.w	r3, r3, r9
 80034e8:	9303      	str	r3, [sp, #12]
 80034ea:	f040 80f8 	bne.w	80036de <_vfprintf_r+0x746>
 80034ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034f0:	1cdf      	adds	r7, r3, #3
 80034f2:	db02      	blt.n	80034fa <_vfprintf_r+0x562>
 80034f4:	459a      	cmp	sl, r3
 80034f6:	f280 811f 	bge.w	8003738 <_vfprintf_r+0x7a0>
 80034fa:	9b02      	ldr	r3, [sp, #8]
 80034fc:	3b02      	subs	r3, #2
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003502:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003506:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800350a:	1e53      	subs	r3, r2, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	9319      	str	r3, [sp, #100]	; 0x64
 8003510:	bfb6      	itet	lt
 8003512:	f1c2 0301 	rsblt	r3, r2, #1
 8003516:	222b      	movge	r2, #43	; 0x2b
 8003518:	222d      	movlt	r2, #45	; 0x2d
 800351a:	2b09      	cmp	r3, #9
 800351c:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003520:	f340 80fa 	ble.w	8003718 <_vfprintf_r+0x780>
 8003524:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003528:	260a      	movs	r6, #10
 800352a:	fb93 f0f6 	sdiv	r0, r3, r6
 800352e:	fb06 3310 	mls	r3, r6, r0, r3
 8003532:	3330      	adds	r3, #48	; 0x30
 8003534:	2809      	cmp	r0, #9
 8003536:	f802 3c01 	strb.w	r3, [r2, #-1]
 800353a:	f102 31ff 	add.w	r1, r2, #4294967295
 800353e:	4603      	mov	r3, r0
 8003540:	f300 80e3 	bgt.w	800370a <_vfprintf_r+0x772>
 8003544:	3330      	adds	r3, #48	; 0x30
 8003546:	f801 3c01 	strb.w	r3, [r1, #-1]
 800354a:	3a02      	subs	r2, #2
 800354c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003550:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003554:	4282      	cmp	r2, r0
 8003556:	4619      	mov	r1, r3
 8003558:	f0c0 80d9 	bcc.w	800370e <_vfprintf_r+0x776>
 800355c:	9a03      	ldr	r2, [sp, #12]
 800355e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003560:	1acb      	subs	r3, r1, r3
 8003562:	2a01      	cmp	r2, #1
 8003564:	9310      	str	r3, [sp, #64]	; 0x40
 8003566:	eb03 0a02 	add.w	sl, r3, r2
 800356a:	dc03      	bgt.n	8003574 <_vfprintf_r+0x5dc>
 800356c:	f015 0301 	ands.w	r3, r5, #1
 8003570:	9308      	str	r3, [sp, #32]
 8003572:	d003      	beq.n	800357c <_vfprintf_r+0x5e4>
 8003574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003576:	449a      	add	sl, r3
 8003578:	2300      	movs	r3, #0
 800357a:	9308      	str	r3, [sp, #32]
 800357c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800357e:	b113      	cbz	r3, 8003586 <_vfprintf_r+0x5ee>
 8003580:	232d      	movs	r3, #45	; 0x2d
 8003582:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003586:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003588:	2600      	movs	r6, #0
 800358a:	4556      	cmp	r6, sl
 800358c:	4633      	mov	r3, r6
 800358e:	bfb8      	it	lt
 8003590:	4653      	movlt	r3, sl
 8003592:	930c      	str	r3, [sp, #48]	; 0x30
 8003594:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003598:	b113      	cbz	r3, 80035a0 <_vfprintf_r+0x608>
 800359a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800359c:	3301      	adds	r3, #1
 800359e:	930c      	str	r3, [sp, #48]	; 0x30
 80035a0:	f015 0302 	ands.w	r3, r5, #2
 80035a4:	9314      	str	r3, [sp, #80]	; 0x50
 80035a6:	bf1e      	ittt	ne
 80035a8:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 80035aa:	3302      	addne	r3, #2
 80035ac:	930c      	strne	r3, [sp, #48]	; 0x30
 80035ae:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80035b2:	9315      	str	r3, [sp, #84]	; 0x54
 80035b4:	d114      	bne.n	80035e0 <_vfprintf_r+0x648>
 80035b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035ba:	1a9f      	subs	r7, r3, r2
 80035bc:	2f00      	cmp	r7, #0
 80035be:	dd0f      	ble.n	80035e0 <_vfprintf_r+0x648>
 80035c0:	4ba8      	ldr	r3, [pc, #672]	; (8003864 <_vfprintf_r+0x8cc>)
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	2f10      	cmp	r7, #16
 80035c6:	f300 81d3 	bgt.w	8003970 <_vfprintf_r+0x9d8>
 80035ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035cc:	6067      	str	r7, [r4, #4]
 80035ce:	441f      	add	r7, r3
 80035d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035d2:	9721      	str	r7, [sp, #132]	; 0x84
 80035d4:	3301      	adds	r3, #1
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	9320      	str	r3, [sp, #128]	; 0x80
 80035da:	f300 81e0 	bgt.w	800399e <_vfprintf_r+0xa06>
 80035de:	3408      	adds	r4, #8
 80035e0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80035e4:	b173      	cbz	r3, 8003604 <_vfprintf_r+0x66c>
 80035e6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80035ea:	6023      	str	r3, [r4, #0]
 80035ec:	2301      	movs	r3, #1
 80035ee:	6063      	str	r3, [r4, #4]
 80035f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035f2:	3301      	adds	r3, #1
 80035f4:	9321      	str	r3, [sp, #132]	; 0x84
 80035f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035f8:	3301      	adds	r3, #1
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	9320      	str	r3, [sp, #128]	; 0x80
 80035fe:	f300 81d8 	bgt.w	80039b2 <_vfprintf_r+0xa1a>
 8003602:	3408      	adds	r4, #8
 8003604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003606:	b16b      	cbz	r3, 8003624 <_vfprintf_r+0x68c>
 8003608:	ab18      	add	r3, sp, #96	; 0x60
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	2302      	movs	r3, #2
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003612:	3302      	adds	r3, #2
 8003614:	9321      	str	r3, [sp, #132]	; 0x84
 8003616:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003618:	3301      	adds	r3, #1
 800361a:	2b07      	cmp	r3, #7
 800361c:	9320      	str	r3, [sp, #128]	; 0x80
 800361e:	f300 81d2 	bgt.w	80039c6 <_vfprintf_r+0xa2e>
 8003622:	3408      	adds	r4, #8
 8003624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d114      	bne.n	8003654 <_vfprintf_r+0x6bc>
 800362a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800362c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800362e:	1a9f      	subs	r7, r3, r2
 8003630:	2f00      	cmp	r7, #0
 8003632:	dd0f      	ble.n	8003654 <_vfprintf_r+0x6bc>
 8003634:	4b8c      	ldr	r3, [pc, #560]	; (8003868 <_vfprintf_r+0x8d0>)
 8003636:	6023      	str	r3, [r4, #0]
 8003638:	2f10      	cmp	r7, #16
 800363a:	f300 81ce 	bgt.w	80039da <_vfprintf_r+0xa42>
 800363e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003640:	6067      	str	r7, [r4, #4]
 8003642:	441f      	add	r7, r3
 8003644:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003646:	9721      	str	r7, [sp, #132]	; 0x84
 8003648:	3301      	adds	r3, #1
 800364a:	2b07      	cmp	r3, #7
 800364c:	9320      	str	r3, [sp, #128]	; 0x80
 800364e:	f300 81dd 	bgt.w	8003a0c <_vfprintf_r+0xa74>
 8003652:	3408      	adds	r4, #8
 8003654:	eba6 060a 	sub.w	r6, r6, sl
 8003658:	2e00      	cmp	r6, #0
 800365a:	dd0f      	ble.n	800367c <_vfprintf_r+0x6e4>
 800365c:	4f82      	ldr	r7, [pc, #520]	; (8003868 <_vfprintf_r+0x8d0>)
 800365e:	6027      	str	r7, [r4, #0]
 8003660:	2e10      	cmp	r6, #16
 8003662:	f300 81dd 	bgt.w	8003a20 <_vfprintf_r+0xa88>
 8003666:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003668:	9821      	ldr	r0, [sp, #132]	; 0x84
 800366a:	6066      	str	r6, [r4, #4]
 800366c:	3301      	adds	r3, #1
 800366e:	4406      	add	r6, r0
 8003670:	2b07      	cmp	r3, #7
 8003672:	9621      	str	r6, [sp, #132]	; 0x84
 8003674:	9320      	str	r3, [sp, #128]	; 0x80
 8003676:	f300 81ea 	bgt.w	8003a4e <_vfprintf_r+0xab6>
 800367a:	3408      	adds	r4, #8
 800367c:	05e9      	lsls	r1, r5, #23
 800367e:	f100 81f0 	bmi.w	8003a62 <_vfprintf_r+0xaca>
 8003682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003684:	e884 0600 	stmia.w	r4, {r9, sl}
 8003688:	4453      	add	r3, sl
 800368a:	9321      	str	r3, [sp, #132]	; 0x84
 800368c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800368e:	3301      	adds	r3, #1
 8003690:	2b07      	cmp	r3, #7
 8003692:	9320      	str	r3, [sp, #128]	; 0x80
 8003694:	f340 841b 	ble.w	8003ece <_vfprintf_r+0xf36>
 8003698:	aa1f      	add	r2, sp, #124	; 0x7c
 800369a:	4641      	mov	r1, r8
 800369c:	4658      	mov	r0, fp
 800369e:	f002 fc66 	bl	8005f6e <__sprint_r>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	f040 8433 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80036a8:	ac2c      	add	r4, sp, #176	; 0xb0
 80036aa:	0768      	lsls	r0, r5, #29
 80036ac:	f100 8412 	bmi.w	8003ed4 <_vfprintf_r+0xf3c>
 80036b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036b6:	428a      	cmp	r2, r1
 80036b8:	bfac      	ite	ge
 80036ba:	189b      	addge	r3, r3, r2
 80036bc:	185b      	addlt	r3, r3, r1
 80036be:	930a      	str	r3, [sp, #40]	; 0x28
 80036c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036c2:	b13b      	cbz	r3, 80036d4 <_vfprintf_r+0x73c>
 80036c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80036c6:	4641      	mov	r1, r8
 80036c8:	4658      	mov	r0, fp
 80036ca:	f002 fc50 	bl	8005f6e <__sprint_r>
 80036ce:	2800      	cmp	r0, #0
 80036d0:	f040 841d 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80036d4:	2300      	movs	r3, #0
 80036d6:	9320      	str	r3, [sp, #128]	; 0x80
 80036d8:	9f04      	ldr	r7, [sp, #16]
 80036da:	ac2c      	add	r4, sp, #176	; 0xb0
 80036dc:	e4e9      	b.n	80030b2 <_vfprintf_r+0x11a>
 80036de:	9b02      	ldr	r3, [sp, #8]
 80036e0:	2b65      	cmp	r3, #101	; 0x65
 80036e2:	f77f af0d 	ble.w	8003500 <_vfprintf_r+0x568>
 80036e6:	9b02      	ldr	r3, [sp, #8]
 80036e8:	2b66      	cmp	r3, #102	; 0x66
 80036ea:	d125      	bne.n	8003738 <_vfprintf_r+0x7a0>
 80036ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	dd1a      	ble.n	8003728 <_vfprintf_r+0x790>
 80036f2:	f1ba 0f00 	cmp.w	sl, #0
 80036f6:	d101      	bne.n	80036fc <_vfprintf_r+0x764>
 80036f8:	07ee      	lsls	r6, r5, #31
 80036fa:	d502      	bpl.n	8003702 <_vfprintf_r+0x76a>
 80036fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036fe:	4413      	add	r3, r2
 8003700:	4453      	add	r3, sl
 8003702:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003704:	9208      	str	r2, [sp, #32]
 8003706:	469a      	mov	sl, r3
 8003708:	e738      	b.n	800357c <_vfprintf_r+0x5e4>
 800370a:	460a      	mov	r2, r1
 800370c:	e70d      	b.n	800352a <_vfprintf_r+0x592>
 800370e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003712:	f803 1b01 	strb.w	r1, [r3], #1
 8003716:	e71d      	b.n	8003554 <_vfprintf_r+0x5bc>
 8003718:	2230      	movs	r2, #48	; 0x30
 800371a:	4413      	add	r3, r2
 800371c:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003720:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8003724:	a91c      	add	r1, sp, #112	; 0x70
 8003726:	e719      	b.n	800355c <_vfprintf_r+0x5c4>
 8003728:	f1ba 0f00 	cmp.w	sl, #0
 800372c:	d101      	bne.n	8003732 <_vfprintf_r+0x79a>
 800372e:	07ed      	lsls	r5, r5, #31
 8003730:	d515      	bpl.n	800375e <_vfprintf_r+0x7c6>
 8003732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003734:	3301      	adds	r3, #1
 8003736:	e7e3      	b.n	8003700 <_vfprintf_r+0x768>
 8003738:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800373a:	9b03      	ldr	r3, [sp, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	db06      	blt.n	800374e <_vfprintf_r+0x7b6>
 8003740:	07e8      	lsls	r0, r5, #31
 8003742:	d50e      	bpl.n	8003762 <_vfprintf_r+0x7ca>
 8003744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003746:	4413      	add	r3, r2
 8003748:	2267      	movs	r2, #103	; 0x67
 800374a:	9202      	str	r2, [sp, #8]
 800374c:	e7d9      	b.n	8003702 <_vfprintf_r+0x76a>
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003752:	2a00      	cmp	r2, #0
 8003754:	440b      	add	r3, r1
 8003756:	dcf7      	bgt.n	8003748 <_vfprintf_r+0x7b0>
 8003758:	f1c2 0201 	rsb	r2, r2, #1
 800375c:	e7f3      	b.n	8003746 <_vfprintf_r+0x7ae>
 800375e:	2301      	movs	r3, #1
 8003760:	e7cf      	b.n	8003702 <_vfprintf_r+0x76a>
 8003762:	4613      	mov	r3, r2
 8003764:	e7f0      	b.n	8003748 <_vfprintf_r+0x7b0>
 8003766:	b10b      	cbz	r3, 800376c <_vfprintf_r+0x7d4>
 8003768:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800376c:	f015 0f20 	tst.w	r5, #32
 8003770:	f107 0304 	add.w	r3, r7, #4
 8003774:	d008      	beq.n	8003788 <_vfprintf_r+0x7f0>
 8003776:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	17ce      	asrs	r6, r1, #31
 800377c:	4608      	mov	r0, r1
 800377e:	4631      	mov	r1, r6
 8003780:	e9c2 0100 	strd	r0, r1, [r2]
 8003784:	461f      	mov	r7, r3
 8003786:	e494      	b.n	80030b2 <_vfprintf_r+0x11a>
 8003788:	06e9      	lsls	r1, r5, #27
 800378a:	d503      	bpl.n	8003794 <_vfprintf_r+0x7fc>
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003790:	6011      	str	r1, [r2, #0]
 8003792:	e7f7      	b.n	8003784 <_vfprintf_r+0x7ec>
 8003794:	066a      	lsls	r2, r5, #25
 8003796:	d5f9      	bpl.n	800378c <_vfprintf_r+0x7f4>
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800379e:	8011      	strh	r1, [r2, #0]
 80037a0:	e7f0      	b.n	8003784 <_vfprintf_r+0x7ec>
 80037a2:	f045 0510 	orr.w	r5, r5, #16
 80037a6:	f015 0320 	ands.w	r3, r5, #32
 80037aa:	d022      	beq.n	80037f2 <_vfprintf_r+0x85a>
 80037ac:	3707      	adds	r7, #7
 80037ae:	f027 0707 	bic.w	r7, r7, #7
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	2300      	movs	r3, #0
 80037be:	2200      	movs	r2, #0
 80037c0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80037c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80037c8:	f000 83e8 	beq.w	8003f9c <_vfprintf_r+0x1004>
 80037cc:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80037d0:	9208      	str	r2, [sp, #32]
 80037d2:	ea56 0207 	orrs.w	r2, r6, r7
 80037d6:	f040 83e6 	bne.w	8003fa6 <_vfprintf_r+0x100e>
 80037da:	f1ba 0f00 	cmp.w	sl, #0
 80037de:	f000 80a9 	beq.w	8003934 <_vfprintf_r+0x99c>
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d075      	beq.n	80038d2 <_vfprintf_r+0x93a>
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	f000 8090 	beq.w	800390c <_vfprintf_r+0x974>
 80037ec:	2600      	movs	r6, #0
 80037ee:	2700      	movs	r7, #0
 80037f0:	e3df      	b.n	8003fb2 <_vfprintf_r+0x101a>
 80037f2:	1d3a      	adds	r2, r7, #4
 80037f4:	f015 0110 	ands.w	r1, r5, #16
 80037f8:	9204      	str	r2, [sp, #16]
 80037fa:	d002      	beq.n	8003802 <_vfprintf_r+0x86a>
 80037fc:	683e      	ldr	r6, [r7, #0]
 80037fe:	2700      	movs	r7, #0
 8003800:	e7dd      	b.n	80037be <_vfprintf_r+0x826>
 8003802:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003806:	d0f9      	beq.n	80037fc <_vfprintf_r+0x864>
 8003808:	883e      	ldrh	r6, [r7, #0]
 800380a:	2700      	movs	r7, #0
 800380c:	e7d6      	b.n	80037bc <_vfprintf_r+0x824>
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	2330      	movs	r3, #48	; 0x30
 8003814:	2278      	movs	r2, #120	; 0x78
 8003816:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <_vfprintf_r+0x8d4>)
 800381c:	683e      	ldr	r6, [r7, #0]
 800381e:	9311      	str	r3, [sp, #68]	; 0x44
 8003820:	2700      	movs	r7, #0
 8003822:	f045 0502 	orr.w	r5, r5, #2
 8003826:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800382a:	2302      	movs	r3, #2
 800382c:	9202      	str	r2, [sp, #8]
 800382e:	e7c6      	b.n	80037be <_vfprintf_r+0x826>
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2600      	movs	r6, #0
 8003834:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003838:	9304      	str	r3, [sp, #16]
 800383a:	f8d7 9000 	ldr.w	r9, [r7]
 800383e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003842:	d00a      	beq.n	800385a <_vfprintf_r+0x8c2>
 8003844:	4652      	mov	r2, sl
 8003846:	4631      	mov	r1, r6
 8003848:	4648      	mov	r0, r9
 800384a:	f7fc fcc1 	bl	80001d0 <memchr>
 800384e:	2800      	cmp	r0, #0
 8003850:	f000 808c 	beq.w	800396c <_vfprintf_r+0x9d4>
 8003854:	eba0 0a09 	sub.w	sl, r0, r9
 8003858:	e5cb      	b.n	80033f2 <_vfprintf_r+0x45a>
 800385a:	4648      	mov	r0, r9
 800385c:	f7fc fd08 	bl	8000270 <strlen>
 8003860:	4682      	mov	sl, r0
 8003862:	e5c6      	b.n	80033f2 <_vfprintf_r+0x45a>
 8003864:	08006aa0 	.word	0x08006aa0
 8003868:	08006ab0 	.word	0x08006ab0
 800386c:	08006a8d 	.word	0x08006a8d
 8003870:	f045 0510 	orr.w	r5, r5, #16
 8003874:	06ae      	lsls	r6, r5, #26
 8003876:	d509      	bpl.n	800388c <_vfprintf_r+0x8f4>
 8003878:	3707      	adds	r7, #7
 800387a:	f027 0707 	bic.w	r7, r7, #7
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	2301      	movs	r3, #1
 800388a:	e798      	b.n	80037be <_vfprintf_r+0x826>
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	f015 0f10 	tst.w	r5, #16
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	d001      	beq.n	800389a <_vfprintf_r+0x902>
 8003896:	683e      	ldr	r6, [r7, #0]
 8003898:	e002      	b.n	80038a0 <_vfprintf_r+0x908>
 800389a:	0668      	lsls	r0, r5, #25
 800389c:	d5fb      	bpl.n	8003896 <_vfprintf_r+0x8fe>
 800389e:	883e      	ldrh	r6, [r7, #0]
 80038a0:	2700      	movs	r7, #0
 80038a2:	e7f1      	b.n	8003888 <_vfprintf_r+0x8f0>
 80038a4:	b10b      	cbz	r3, 80038aa <_vfprintf_r+0x912>
 80038a6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80038aa:	4ba2      	ldr	r3, [pc, #648]	; (8003b34 <_vfprintf_r+0xb9c>)
 80038ac:	e4ca      	b.n	8003244 <_vfprintf_r+0x2ac>
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	f015 0f10 	tst.w	r5, #16
 80038b4:	9304      	str	r3, [sp, #16]
 80038b6:	d001      	beq.n	80038bc <_vfprintf_r+0x924>
 80038b8:	683e      	ldr	r6, [r7, #0]
 80038ba:	e002      	b.n	80038c2 <_vfprintf_r+0x92a>
 80038bc:	066a      	lsls	r2, r5, #25
 80038be:	d5fb      	bpl.n	80038b8 <_vfprintf_r+0x920>
 80038c0:	883e      	ldrh	r6, [r7, #0]
 80038c2:	2700      	movs	r7, #0
 80038c4:	e4ca      	b.n	800325c <_vfprintf_r+0x2c4>
 80038c6:	464b      	mov	r3, r9
 80038c8:	e374      	b.n	8003fb4 <_vfprintf_r+0x101c>
 80038ca:	2f00      	cmp	r7, #0
 80038cc:	bf08      	it	eq
 80038ce:	2e0a      	cmpeq	r6, #10
 80038d0:	d205      	bcs.n	80038de <_vfprintf_r+0x946>
 80038d2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80038d6:	3630      	adds	r6, #48	; 0x30
 80038d8:	f809 6d41 	strb.w	r6, [r9, #-65]!
 80038dc:	e385      	b.n	8003fea <_vfprintf_r+0x1052>
 80038de:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80038e2:	4630      	mov	r0, r6
 80038e4:	4639      	mov	r1, r7
 80038e6:	220a      	movs	r2, #10
 80038e8:	2300      	movs	r3, #0
 80038ea:	f7fd f9a9 	bl	8000c40 <__aeabi_uldivmod>
 80038ee:	3230      	adds	r2, #48	; 0x30
 80038f0:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80038f4:	2300      	movs	r3, #0
 80038f6:	4630      	mov	r0, r6
 80038f8:	4639      	mov	r1, r7
 80038fa:	220a      	movs	r2, #10
 80038fc:	f7fd f9a0 	bl	8000c40 <__aeabi_uldivmod>
 8003900:	4606      	mov	r6, r0
 8003902:	460f      	mov	r7, r1
 8003904:	ea56 0307 	orrs.w	r3, r6, r7
 8003908:	d1eb      	bne.n	80038e2 <_vfprintf_r+0x94a>
 800390a:	e36e      	b.n	8003fea <_vfprintf_r+0x1052>
 800390c:	2600      	movs	r6, #0
 800390e:	2700      	movs	r7, #0
 8003910:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003914:	f006 030f 	and.w	r3, r6, #15
 8003918:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8003920:	0933      	lsrs	r3, r6, #4
 8003922:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003926:	093a      	lsrs	r2, r7, #4
 8003928:	461e      	mov	r6, r3
 800392a:	4617      	mov	r7, r2
 800392c:	ea56 0307 	orrs.w	r3, r6, r7
 8003930:	d1f0      	bne.n	8003914 <_vfprintf_r+0x97c>
 8003932:	e35a      	b.n	8003fea <_vfprintf_r+0x1052>
 8003934:	b93b      	cbnz	r3, 8003946 <_vfprintf_r+0x9ae>
 8003936:	07e8      	lsls	r0, r5, #31
 8003938:	d505      	bpl.n	8003946 <_vfprintf_r+0x9ae>
 800393a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800393e:	2330      	movs	r3, #48	; 0x30
 8003940:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8003944:	e351      	b.n	8003fea <_vfprintf_r+0x1052>
 8003946:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800394a:	e34e      	b.n	8003fea <_vfprintf_r+0x1052>
 800394c:	b10b      	cbz	r3, 8003952 <_vfprintf_r+0x9ba>
 800394e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003952:	9b02      	ldr	r3, [sp, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8302 	beq.w	8003f5e <_vfprintf_r+0xfc6>
 800395a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800395e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003962:	2600      	movs	r6, #0
 8003964:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003968:	9704      	str	r7, [sp, #16]
 800396a:	e4e9      	b.n	8003340 <_vfprintf_r+0x3a8>
 800396c:	4606      	mov	r6, r0
 800396e:	e540      	b.n	80033f2 <_vfprintf_r+0x45a>
 8003970:	2310      	movs	r3, #16
 8003972:	6063      	str	r3, [r4, #4]
 8003974:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003976:	3310      	adds	r3, #16
 8003978:	9321      	str	r3, [sp, #132]	; 0x84
 800397a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800397c:	3301      	adds	r3, #1
 800397e:	2b07      	cmp	r3, #7
 8003980:	9320      	str	r3, [sp, #128]	; 0x80
 8003982:	dc02      	bgt.n	800398a <_vfprintf_r+0x9f2>
 8003984:	3408      	adds	r4, #8
 8003986:	3f10      	subs	r7, #16
 8003988:	e61a      	b.n	80035c0 <_vfprintf_r+0x628>
 800398a:	aa1f      	add	r2, sp, #124	; 0x7c
 800398c:	4641      	mov	r1, r8
 800398e:	4658      	mov	r0, fp
 8003990:	f002 faed 	bl	8005f6e <__sprint_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	f040 82ba 	bne.w	8003f0e <_vfprintf_r+0xf76>
 800399a:	ac2c      	add	r4, sp, #176	; 0xb0
 800399c:	e7f3      	b.n	8003986 <_vfprintf_r+0x9ee>
 800399e:	aa1f      	add	r2, sp, #124	; 0x7c
 80039a0:	4641      	mov	r1, r8
 80039a2:	4658      	mov	r0, fp
 80039a4:	f002 fae3 	bl	8005f6e <__sprint_r>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f040 82b0 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80039ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80039b0:	e616      	b.n	80035e0 <_vfprintf_r+0x648>
 80039b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80039b4:	4641      	mov	r1, r8
 80039b6:	4658      	mov	r0, fp
 80039b8:	f002 fad9 	bl	8005f6e <__sprint_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	f040 82a6 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80039c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80039c4:	e61e      	b.n	8003604 <_vfprintf_r+0x66c>
 80039c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80039c8:	4641      	mov	r1, r8
 80039ca:	4658      	mov	r0, fp
 80039cc:	f002 facf 	bl	8005f6e <__sprint_r>
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f040 829c 	bne.w	8003f0e <_vfprintf_r+0xf76>
 80039d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80039d8:	e624      	b.n	8003624 <_vfprintf_r+0x68c>
 80039da:	2210      	movs	r2, #16
 80039dc:	6062      	str	r2, [r4, #4]
 80039de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039e0:	3210      	adds	r2, #16
 80039e2:	9221      	str	r2, [sp, #132]	; 0x84
 80039e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80039e6:	3201      	adds	r2, #1
 80039e8:	2a07      	cmp	r2, #7
 80039ea:	9220      	str	r2, [sp, #128]	; 0x80
 80039ec:	dc02      	bgt.n	80039f4 <_vfprintf_r+0xa5c>
 80039ee:	3408      	adds	r4, #8
 80039f0:	3f10      	subs	r7, #16
 80039f2:	e620      	b.n	8003636 <_vfprintf_r+0x69e>
 80039f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80039f6:	4641      	mov	r1, r8
 80039f8:	4658      	mov	r0, fp
 80039fa:	9314      	str	r3, [sp, #80]	; 0x50
 80039fc:	f002 fab7 	bl	8005f6e <__sprint_r>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	f040 8284 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003a06:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003a0a:	e7f1      	b.n	80039f0 <_vfprintf_r+0xa58>
 8003a0c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a0e:	4641      	mov	r1, r8
 8003a10:	4658      	mov	r0, fp
 8003a12:	f002 faac 	bl	8005f6e <__sprint_r>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	f040 8279 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003a1c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a1e:	e619      	b.n	8003654 <_vfprintf_r+0x6bc>
 8003a20:	2310      	movs	r3, #16
 8003a22:	6063      	str	r3, [r4, #4]
 8003a24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a26:	3310      	adds	r3, #16
 8003a28:	9321      	str	r3, [sp, #132]	; 0x84
 8003a2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	2b07      	cmp	r3, #7
 8003a30:	9320      	str	r3, [sp, #128]	; 0x80
 8003a32:	dc02      	bgt.n	8003a3a <_vfprintf_r+0xaa2>
 8003a34:	3408      	adds	r4, #8
 8003a36:	3e10      	subs	r6, #16
 8003a38:	e611      	b.n	800365e <_vfprintf_r+0x6c6>
 8003a3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	4658      	mov	r0, fp
 8003a40:	f002 fa95 	bl	8005f6e <__sprint_r>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f040 8262 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003a4a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a4c:	e7f3      	b.n	8003a36 <_vfprintf_r+0xa9e>
 8003a4e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a50:	4641      	mov	r1, r8
 8003a52:	4658      	mov	r0, fp
 8003a54:	f002 fa8b 	bl	8005f6e <__sprint_r>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f040 8258 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003a5e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a60:	e60c      	b.n	800367c <_vfprintf_r+0x6e4>
 8003a62:	9b02      	ldr	r3, [sp, #8]
 8003a64:	2b65      	cmp	r3, #101	; 0x65
 8003a66:	f340 81ad 	ble.w	8003dc4 <_vfprintf_r+0xe2c>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a72:	f7fd f825 	bl	8000ac0 <__aeabi_dcmpeq>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d062      	beq.n	8003b40 <_vfprintf_r+0xba8>
 8003a7a:	4b2f      	ldr	r3, [pc, #188]	; (8003b38 <_vfprintf_r+0xba0>)
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a84:	3301      	adds	r3, #1
 8003a86:	9321      	str	r3, [sp, #132]	; 0x84
 8003a88:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	2b07      	cmp	r3, #7
 8003a8e:	9320      	str	r3, [sp, #128]	; 0x80
 8003a90:	dc25      	bgt.n	8003ade <_vfprintf_r+0xb46>
 8003a92:	3408      	adds	r4, #8
 8003a94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a96:	9a03      	ldr	r2, [sp, #12]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	db02      	blt.n	8003aa2 <_vfprintf_r+0xb0a>
 8003a9c:	07ea      	lsls	r2, r5, #31
 8003a9e:	f57f ae04 	bpl.w	80036aa <_vfprintf_r+0x712>
 8003aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa8:	6063      	str	r3, [r4, #4]
 8003aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003aae:	4413      	add	r3, r2
 8003ab0:	9321      	str	r3, [sp, #132]	; 0x84
 8003ab2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	2b07      	cmp	r3, #7
 8003ab8:	9320      	str	r3, [sp, #128]	; 0x80
 8003aba:	dc1a      	bgt.n	8003af2 <_vfprintf_r+0xb5a>
 8003abc:	3408      	adds	r4, #8
 8003abe:	9b03      	ldr	r3, [sp, #12]
 8003ac0:	1e5e      	subs	r6, r3, #1
 8003ac2:	2e00      	cmp	r6, #0
 8003ac4:	f77f adf1 	ble.w	80036aa <_vfprintf_r+0x712>
 8003ac8:	4f1c      	ldr	r7, [pc, #112]	; (8003b3c <_vfprintf_r+0xba4>)
 8003aca:	f04f 0910 	mov.w	r9, #16
 8003ace:	2e10      	cmp	r6, #16
 8003ad0:	6027      	str	r7, [r4, #0]
 8003ad2:	dc18      	bgt.n	8003b06 <_vfprintf_r+0xb6e>
 8003ad4:	6066      	str	r6, [r4, #4]
 8003ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ad8:	441e      	add	r6, r3
 8003ada:	9621      	str	r6, [sp, #132]	; 0x84
 8003adc:	e5d6      	b.n	800368c <_vfprintf_r+0x6f4>
 8003ade:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	4658      	mov	r0, fp
 8003ae4:	f002 fa43 	bl	8005f6e <__sprint_r>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	f040 8210 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003aee:	ac2c      	add	r4, sp, #176	; 0xb0
 8003af0:	e7d0      	b.n	8003a94 <_vfprintf_r+0xafc>
 8003af2:	aa1f      	add	r2, sp, #124	; 0x7c
 8003af4:	4641      	mov	r1, r8
 8003af6:	4658      	mov	r0, fp
 8003af8:	f002 fa39 	bl	8005f6e <__sprint_r>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 8206 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003b02:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b04:	e7db      	b.n	8003abe <_vfprintf_r+0xb26>
 8003b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b08:	f8c4 9004 	str.w	r9, [r4, #4]
 8003b0c:	3310      	adds	r3, #16
 8003b0e:	9321      	str	r3, [sp, #132]	; 0x84
 8003b10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b12:	3301      	adds	r3, #1
 8003b14:	2b07      	cmp	r3, #7
 8003b16:	9320      	str	r3, [sp, #128]	; 0x80
 8003b18:	dc02      	bgt.n	8003b20 <_vfprintf_r+0xb88>
 8003b1a:	3408      	adds	r4, #8
 8003b1c:	3e10      	subs	r6, #16
 8003b1e:	e7d6      	b.n	8003ace <_vfprintf_r+0xb36>
 8003b20:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b22:	4641      	mov	r1, r8
 8003b24:	4658      	mov	r0, fp
 8003b26:	f002 fa22 	bl	8005f6e <__sprint_r>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f040 81ef 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003b30:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b32:	e7f3      	b.n	8003b1c <_vfprintf_r+0xb84>
 8003b34:	08006a8d 	.word	0x08006a8d
 8003b38:	08006a9e 	.word	0x08006a9e
 8003b3c:	08006ab0 	.word	0x08006ab0
 8003b40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	dc7a      	bgt.n	8003c3c <_vfprintf_r+0xca4>
 8003b46:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <_vfprintf_r+0xe24>)
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b50:	3301      	adds	r3, #1
 8003b52:	9321      	str	r3, [sp, #132]	; 0x84
 8003b54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b56:	3301      	adds	r3, #1
 8003b58:	2b07      	cmp	r3, #7
 8003b5a:	9320      	str	r3, [sp, #128]	; 0x80
 8003b5c:	dc44      	bgt.n	8003be8 <_vfprintf_r+0xc50>
 8003b5e:	3408      	adds	r4, #8
 8003b60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b62:	b923      	cbnz	r3, 8003b6e <_vfprintf_r+0xbd6>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	b913      	cbnz	r3, 8003b6e <_vfprintf_r+0xbd6>
 8003b68:	07eb      	lsls	r3, r5, #31
 8003b6a:	f57f ad9e 	bpl.w	80036aa <_vfprintf_r+0x712>
 8003b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b74:	6063      	str	r3, [r4, #4]
 8003b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b7a:	4413      	add	r3, r2
 8003b7c:	9321      	str	r3, [sp, #132]	; 0x84
 8003b7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b80:	3301      	adds	r3, #1
 8003b82:	2b07      	cmp	r3, #7
 8003b84:	9320      	str	r3, [sp, #128]	; 0x80
 8003b86:	dc39      	bgt.n	8003bfc <_vfprintf_r+0xc64>
 8003b88:	f104 0308 	add.w	r3, r4, #8
 8003b8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003b8e:	2e00      	cmp	r6, #0
 8003b90:	da19      	bge.n	8003bc6 <_vfprintf_r+0xc2e>
 8003b92:	4f8b      	ldr	r7, [pc, #556]	; (8003dc0 <_vfprintf_r+0xe28>)
 8003b94:	4276      	negs	r6, r6
 8003b96:	2410      	movs	r4, #16
 8003b98:	2e10      	cmp	r6, #16
 8003b9a:	601f      	str	r7, [r3, #0]
 8003b9c:	dc38      	bgt.n	8003c10 <_vfprintf_r+0xc78>
 8003b9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ba0:	605e      	str	r6, [r3, #4]
 8003ba2:	4416      	add	r6, r2
 8003ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ba6:	9621      	str	r6, [sp, #132]	; 0x84
 8003ba8:	3201      	adds	r2, #1
 8003baa:	2a07      	cmp	r2, #7
 8003bac:	f103 0308 	add.w	r3, r3, #8
 8003bb0:	9220      	str	r2, [sp, #128]	; 0x80
 8003bb2:	dd08      	ble.n	8003bc6 <_vfprintf_r+0xc2e>
 8003bb4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	4658      	mov	r0, fp
 8003bba:	f002 f9d8 	bl	8005f6e <__sprint_r>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	f040 81a5 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003bc4:	ab2c      	add	r3, sp, #176	; 0xb0
 8003bc6:	9a03      	ldr	r2, [sp, #12]
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	9903      	ldr	r1, [sp, #12]
 8003bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bce:	f8c3 9000 	str.w	r9, [r3]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	9221      	str	r2, [sp, #132]	; 0x84
 8003bd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bd8:	3201      	adds	r2, #1
 8003bda:	2a07      	cmp	r2, #7
 8003bdc:	9220      	str	r2, [sp, #128]	; 0x80
 8003bde:	f73f ad5b 	bgt.w	8003698 <_vfprintf_r+0x700>
 8003be2:	f103 0408 	add.w	r4, r3, #8
 8003be6:	e560      	b.n	80036aa <_vfprintf_r+0x712>
 8003be8:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bea:	4641      	mov	r1, r8
 8003bec:	4658      	mov	r0, fp
 8003bee:	f002 f9be 	bl	8005f6e <__sprint_r>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	f040 818b 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003bf8:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bfa:	e7b1      	b.n	8003b60 <_vfprintf_r+0xbc8>
 8003bfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bfe:	4641      	mov	r1, r8
 8003c00:	4658      	mov	r0, fp
 8003c02:	f002 f9b4 	bl	8005f6e <__sprint_r>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	f040 8181 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003c0c:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c0e:	e7bd      	b.n	8003b8c <_vfprintf_r+0xbf4>
 8003c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c12:	605c      	str	r4, [r3, #4]
 8003c14:	3210      	adds	r2, #16
 8003c16:	9221      	str	r2, [sp, #132]	; 0x84
 8003c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c1a:	3201      	adds	r2, #1
 8003c1c:	2a07      	cmp	r2, #7
 8003c1e:	9220      	str	r2, [sp, #128]	; 0x80
 8003c20:	dc02      	bgt.n	8003c28 <_vfprintf_r+0xc90>
 8003c22:	3308      	adds	r3, #8
 8003c24:	3e10      	subs	r6, #16
 8003c26:	e7b7      	b.n	8003b98 <_vfprintf_r+0xc00>
 8003c28:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	4658      	mov	r0, fp
 8003c2e:	f002 f99e 	bl	8005f6e <__sprint_r>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	f040 816b 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003c38:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c3a:	e7f3      	b.n	8003c24 <_vfprintf_r+0xc8c>
 8003c3c:	9b08      	ldr	r3, [sp, #32]
 8003c3e:	9a03      	ldr	r2, [sp, #12]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	bfa8      	it	ge
 8003c44:	4613      	movge	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	461e      	mov	r6, r3
 8003c4a:	dd0b      	ble.n	8003c64 <_vfprintf_r+0xccc>
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c50:	f8c4 9000 	str.w	r9, [r4]
 8003c54:	4433      	add	r3, r6
 8003c56:	9321      	str	r3, [sp, #132]	; 0x84
 8003c58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	2b07      	cmp	r3, #7
 8003c5e:	9320      	str	r3, [sp, #128]	; 0x80
 8003c60:	dc62      	bgt.n	8003d28 <_vfprintf_r+0xd90>
 8003c62:	3408      	adds	r4, #8
 8003c64:	9b08      	ldr	r3, [sp, #32]
 8003c66:	2e00      	cmp	r6, #0
 8003c68:	bfa8      	it	ge
 8003c6a:	1b9b      	subge	r3, r3, r6
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	461e      	mov	r6, r3
 8003c70:	dd0f      	ble.n	8003c92 <_vfprintf_r+0xcfa>
 8003c72:	4f53      	ldr	r7, [pc, #332]	; (8003dc0 <_vfprintf_r+0xe28>)
 8003c74:	f04f 0a10 	mov.w	sl, #16
 8003c78:	2e10      	cmp	r6, #16
 8003c7a:	6027      	str	r7, [r4, #0]
 8003c7c:	dc5e      	bgt.n	8003d3c <_vfprintf_r+0xda4>
 8003c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c80:	6066      	str	r6, [r4, #4]
 8003c82:	441e      	add	r6, r3
 8003c84:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c86:	9621      	str	r6, [sp, #132]	; 0x84
 8003c88:	3301      	adds	r3, #1
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	9320      	str	r3, [sp, #128]	; 0x80
 8003c8e:	dc6c      	bgt.n	8003d6a <_vfprintf_r+0xdd2>
 8003c90:	3408      	adds	r4, #8
 8003c92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c94:	9a03      	ldr	r2, [sp, #12]
 8003c96:	4293      	cmp	r3, r2
 8003c98:	db01      	blt.n	8003c9e <_vfprintf_r+0xd06>
 8003c9a:	07ef      	lsls	r7, r5, #31
 8003c9c:	d50d      	bpl.n	8003cba <_vfprintf_r+0xd22>
 8003c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ca4:	6063      	str	r3, [r4, #4]
 8003ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003caa:	4413      	add	r3, r2
 8003cac:	9321      	str	r3, [sp, #132]	; 0x84
 8003cae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	2b07      	cmp	r3, #7
 8003cb4:	9320      	str	r3, [sp, #128]	; 0x80
 8003cb6:	dc62      	bgt.n	8003d7e <_vfprintf_r+0xde6>
 8003cb8:	3408      	adds	r4, #8
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	9a08      	ldr	r2, [sp, #32]
 8003cbe:	1a9e      	subs	r6, r3, r2
 8003cc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cc2:	9a03      	ldr	r2, [sp, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	429e      	cmp	r6, r3
 8003cc8:	bfa8      	it	ge
 8003cca:	461e      	movge	r6, r3
 8003ccc:	2e00      	cmp	r6, #0
 8003cce:	dd0c      	ble.n	8003cea <_vfprintf_r+0xd52>
 8003cd0:	9b08      	ldr	r3, [sp, #32]
 8003cd2:	444b      	add	r3, r9
 8003cd4:	e884 0048 	stmia.w	r4, {r3, r6}
 8003cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cda:	4433      	add	r3, r6
 8003cdc:	9321      	str	r3, [sp, #132]	; 0x84
 8003cde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	2b07      	cmp	r3, #7
 8003ce4:	9320      	str	r3, [sp, #128]	; 0x80
 8003ce6:	dc54      	bgt.n	8003d92 <_vfprintf_r+0xdfa>
 8003ce8:	3408      	adds	r4, #8
 8003cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cec:	9a03      	ldr	r2, [sp, #12]
 8003cee:	2e00      	cmp	r6, #0
 8003cf0:	eba2 0303 	sub.w	r3, r2, r3
 8003cf4:	bfac      	ite	ge
 8003cf6:	1b9e      	subge	r6, r3, r6
 8003cf8:	461e      	movlt	r6, r3
 8003cfa:	2e00      	cmp	r6, #0
 8003cfc:	f77f acd5 	ble.w	80036aa <_vfprintf_r+0x712>
 8003d00:	4f2f      	ldr	r7, [pc, #188]	; (8003dc0 <_vfprintf_r+0xe28>)
 8003d02:	f04f 0910 	mov.w	r9, #16
 8003d06:	2e10      	cmp	r6, #16
 8003d08:	6027      	str	r7, [r4, #0]
 8003d0a:	f77f aee3 	ble.w	8003ad4 <_vfprintf_r+0xb3c>
 8003d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d10:	f8c4 9004 	str.w	r9, [r4, #4]
 8003d14:	3310      	adds	r3, #16
 8003d16:	9321      	str	r3, [sp, #132]	; 0x84
 8003d18:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	2b07      	cmp	r3, #7
 8003d1e:	9320      	str	r3, [sp, #128]	; 0x80
 8003d20:	dc41      	bgt.n	8003da6 <_vfprintf_r+0xe0e>
 8003d22:	3408      	adds	r4, #8
 8003d24:	3e10      	subs	r6, #16
 8003d26:	e7ee      	b.n	8003d06 <_vfprintf_r+0xd6e>
 8003d28:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	4658      	mov	r0, fp
 8003d2e:	f002 f91e 	bl	8005f6e <__sprint_r>
 8003d32:	2800      	cmp	r0, #0
 8003d34:	f040 80eb 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003d38:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d3a:	e793      	b.n	8003c64 <_vfprintf_r+0xccc>
 8003d3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d3e:	f8c4 a004 	str.w	sl, [r4, #4]
 8003d42:	3310      	adds	r3, #16
 8003d44:	9321      	str	r3, [sp, #132]	; 0x84
 8003d46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d48:	3301      	adds	r3, #1
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	9320      	str	r3, [sp, #128]	; 0x80
 8003d4e:	dc02      	bgt.n	8003d56 <_vfprintf_r+0xdbe>
 8003d50:	3408      	adds	r4, #8
 8003d52:	3e10      	subs	r6, #16
 8003d54:	e790      	b.n	8003c78 <_vfprintf_r+0xce0>
 8003d56:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d58:	4641      	mov	r1, r8
 8003d5a:	4658      	mov	r0, fp
 8003d5c:	f002 f907 	bl	8005f6e <__sprint_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f040 80d4 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003d66:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d68:	e7f3      	b.n	8003d52 <_vfprintf_r+0xdba>
 8003d6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	4658      	mov	r0, fp
 8003d70:	f002 f8fd 	bl	8005f6e <__sprint_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f040 80ca 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003d7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d7c:	e789      	b.n	8003c92 <_vfprintf_r+0xcfa>
 8003d7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d80:	4641      	mov	r1, r8
 8003d82:	4658      	mov	r0, fp
 8003d84:	f002 f8f3 	bl	8005f6e <__sprint_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f040 80c0 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003d8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d90:	e793      	b.n	8003cba <_vfprintf_r+0xd22>
 8003d92:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d94:	4641      	mov	r1, r8
 8003d96:	4658      	mov	r0, fp
 8003d98:	f002 f8e9 	bl	8005f6e <__sprint_r>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	f040 80b6 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003da2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003da4:	e7a1      	b.n	8003cea <_vfprintf_r+0xd52>
 8003da6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003da8:	4641      	mov	r1, r8
 8003daa:	4658      	mov	r0, fp
 8003dac:	f002 f8df 	bl	8005f6e <__sprint_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	f040 80ac 	bne.w	8003f0e <_vfprintf_r+0xf76>
 8003db6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003db8:	e7b4      	b.n	8003d24 <_vfprintf_r+0xd8c>
 8003dba:	bf00      	nop
 8003dbc:	08006a9e 	.word	0x08006a9e
 8003dc0:	08006ab0 	.word	0x08006ab0
 8003dc4:	9b03      	ldr	r3, [sp, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	dc01      	bgt.n	8003dce <_vfprintf_r+0xe36>
 8003dca:	07ee      	lsls	r6, r5, #31
 8003dcc:	d576      	bpl.n	8003ebc <_vfprintf_r+0xf24>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	6063      	str	r3, [r4, #4]
 8003dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dd4:	f8c4 9000 	str.w	r9, [r4]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	9321      	str	r3, [sp, #132]	; 0x84
 8003ddc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dde:	3301      	adds	r3, #1
 8003de0:	2b07      	cmp	r3, #7
 8003de2:	9320      	str	r3, [sp, #128]	; 0x80
 8003de4:	dc36      	bgt.n	8003e54 <_vfprintf_r+0xebc>
 8003de6:	3408      	adds	r4, #8
 8003de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dee:	6063      	str	r3, [r4, #4]
 8003df0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003df4:	4413      	add	r3, r2
 8003df6:	9321      	str	r3, [sp, #132]	; 0x84
 8003df8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	2b07      	cmp	r3, #7
 8003dfe:	9320      	str	r3, [sp, #128]	; 0x80
 8003e00:	dc31      	bgt.n	8003e66 <_vfprintf_r+0xece>
 8003e02:	3408      	adds	r4, #8
 8003e04:	2300      	movs	r3, #0
 8003e06:	2200      	movs	r2, #0
 8003e08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e0c:	f7fc fe58 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	1e5e      	subs	r6, r3, #1
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d12f      	bne.n	8003e78 <_vfprintf_r+0xee0>
 8003e18:	f109 0301 	add.w	r3, r9, #1
 8003e1c:	e884 0048 	stmia.w	r4, {r3, r6}
 8003e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e22:	9a03      	ldr	r2, [sp, #12]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	9321      	str	r3, [sp, #132]	; 0x84
 8003e2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	2b07      	cmp	r3, #7
 8003e30:	9320      	str	r3, [sp, #128]	; 0x80
 8003e32:	dd4a      	ble.n	8003eca <_vfprintf_r+0xf32>
 8003e34:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e36:	4641      	mov	r1, r8
 8003e38:	4658      	mov	r0, fp
 8003e3a:	f002 f898 	bl	8005f6e <__sprint_r>
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d165      	bne.n	8003f0e <_vfprintf_r+0xf76>
 8003e42:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e44:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e50:	4413      	add	r3, r2
 8003e52:	e41a      	b.n	800368a <_vfprintf_r+0x6f2>
 8003e54:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e56:	4641      	mov	r1, r8
 8003e58:	4658      	mov	r0, fp
 8003e5a:	f002 f888 	bl	8005f6e <__sprint_r>
 8003e5e:	2800      	cmp	r0, #0
 8003e60:	d155      	bne.n	8003f0e <_vfprintf_r+0xf76>
 8003e62:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e64:	e7c0      	b.n	8003de8 <_vfprintf_r+0xe50>
 8003e66:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e68:	4641      	mov	r1, r8
 8003e6a:	4658      	mov	r0, fp
 8003e6c:	f002 f87f 	bl	8005f6e <__sprint_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d14c      	bne.n	8003f0e <_vfprintf_r+0xf76>
 8003e74:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e76:	e7c5      	b.n	8003e04 <_vfprintf_r+0xe6c>
 8003e78:	2e00      	cmp	r6, #0
 8003e7a:	dde3      	ble.n	8003e44 <_vfprintf_r+0xeac>
 8003e7c:	4f60      	ldr	r7, [pc, #384]	; (8004000 <_vfprintf_r+0x1068>)
 8003e7e:	f04f 0910 	mov.w	r9, #16
 8003e82:	2e10      	cmp	r6, #16
 8003e84:	6027      	str	r7, [r4, #0]
 8003e86:	dc04      	bgt.n	8003e92 <_vfprintf_r+0xefa>
 8003e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e8a:	6066      	str	r6, [r4, #4]
 8003e8c:	441e      	add	r6, r3
 8003e8e:	9621      	str	r6, [sp, #132]	; 0x84
 8003e90:	e7cb      	b.n	8003e2a <_vfprintf_r+0xe92>
 8003e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e94:	f8c4 9004 	str.w	r9, [r4, #4]
 8003e98:	3310      	adds	r3, #16
 8003e9a:	9321      	str	r3, [sp, #132]	; 0x84
 8003e9c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	2b07      	cmp	r3, #7
 8003ea2:	9320      	str	r3, [sp, #128]	; 0x80
 8003ea4:	dc02      	bgt.n	8003eac <_vfprintf_r+0xf14>
 8003ea6:	3408      	adds	r4, #8
 8003ea8:	3e10      	subs	r6, #16
 8003eaa:	e7ea      	b.n	8003e82 <_vfprintf_r+0xeea>
 8003eac:	aa1f      	add	r2, sp, #124	; 0x7c
 8003eae:	4641      	mov	r1, r8
 8003eb0:	4658      	mov	r0, fp
 8003eb2:	f002 f85c 	bl	8005f6e <__sprint_r>
 8003eb6:	bb50      	cbnz	r0, 8003f0e <_vfprintf_r+0xf76>
 8003eb8:	ac2c      	add	r4, sp, #176	; 0xb0
 8003eba:	e7f5      	b.n	8003ea8 <_vfprintf_r+0xf10>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	6063      	str	r3, [r4, #4]
 8003ec0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec2:	f8c4 9000 	str.w	r9, [r4]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	e7ae      	b.n	8003e28 <_vfprintf_r+0xe90>
 8003eca:	3408      	adds	r4, #8
 8003ecc:	e7ba      	b.n	8003e44 <_vfprintf_r+0xeac>
 8003ece:	3408      	adds	r4, #8
 8003ed0:	f7ff bbeb 	b.w	80036aa <_vfprintf_r+0x712>
 8003ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed8:	1a9d      	subs	r5, r3, r2
 8003eda:	2d00      	cmp	r5, #0
 8003edc:	f77f abe8 	ble.w	80036b0 <_vfprintf_r+0x718>
 8003ee0:	2610      	movs	r6, #16
 8003ee2:	4b48      	ldr	r3, [pc, #288]	; (8004004 <_vfprintf_r+0x106c>)
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	2d10      	cmp	r5, #16
 8003ee8:	dc24      	bgt.n	8003f34 <_vfprintf_r+0xf9c>
 8003eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eec:	6065      	str	r5, [r4, #4]
 8003eee:	441d      	add	r5, r3
 8003ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ef2:	9521      	str	r5, [sp, #132]	; 0x84
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	2b07      	cmp	r3, #7
 8003ef8:	9320      	str	r3, [sp, #128]	; 0x80
 8003efa:	f77f abd9 	ble.w	80036b0 <_vfprintf_r+0x718>
 8003efe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f00:	4641      	mov	r1, r8
 8003f02:	4658      	mov	r0, fp
 8003f04:	f002 f833 	bl	8005f6e <__sprint_r>
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f43f abd1 	beq.w	80036b0 <_vfprintf_r+0x718>
 8003f0e:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	d407      	bmi.n	8003f26 <_vfprintf_r+0xf8e>
 8003f16:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003f1a:	059a      	lsls	r2, r3, #22
 8003f1c:	d403      	bmi.n	8003f26 <_vfprintf_r+0xf8e>
 8003f1e:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003f22:	f001 fa66 	bl	80053f2 <__retarget_lock_release_recursive>
 8003f26:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003f2a:	065b      	lsls	r3, r3, #25
 8003f2c:	f57f a8af 	bpl.w	800308e <_vfprintf_r+0xf6>
 8003f30:	f7ff b882 	b.w	8003038 <_vfprintf_r+0xa0>
 8003f34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f36:	6066      	str	r6, [r4, #4]
 8003f38:	3310      	adds	r3, #16
 8003f3a:	9321      	str	r3, [sp, #132]	; 0x84
 8003f3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f3e:	3301      	adds	r3, #1
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	9320      	str	r3, [sp, #128]	; 0x80
 8003f44:	dc02      	bgt.n	8003f4c <_vfprintf_r+0xfb4>
 8003f46:	3408      	adds	r4, #8
 8003f48:	3d10      	subs	r5, #16
 8003f4a:	e7ca      	b.n	8003ee2 <_vfprintf_r+0xf4a>
 8003f4c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f4e:	4641      	mov	r1, r8
 8003f50:	4658      	mov	r0, fp
 8003f52:	f002 f80c 	bl	8005f6e <__sprint_r>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d1d9      	bne.n	8003f0e <_vfprintf_r+0xf76>
 8003f5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f5c:	e7f4      	b.n	8003f48 <_vfprintf_r+0xfb0>
 8003f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f60:	b913      	cbnz	r3, 8003f68 <_vfprintf_r+0xfd0>
 8003f62:	2300      	movs	r3, #0
 8003f64:	9320      	str	r3, [sp, #128]	; 0x80
 8003f66:	e7d2      	b.n	8003f0e <_vfprintf_r+0xf76>
 8003f68:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f6a:	4641      	mov	r1, r8
 8003f6c:	4658      	mov	r0, fp
 8003f6e:	f001 fffe 	bl	8005f6e <__sprint_r>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d0f5      	beq.n	8003f62 <_vfprintf_r+0xfca>
 8003f76:	e7ca      	b.n	8003f0e <_vfprintf_r+0xf76>
 8003f78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f7fc fdd0 	bl	8000b24 <__aeabi_dcmpun>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	f43f aa36 	beq.w	80033f6 <_vfprintf_r+0x45e>
 8003f8a:	4b1f      	ldr	r3, [pc, #124]	; (8004008 <_vfprintf_r+0x1070>)
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <_vfprintf_r+0x1074>)
 8003f8e:	f7ff ba26 	b.w	80033de <_vfprintf_r+0x446>
 8003f92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f94:	1a1b      	subs	r3, r3, r0
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	f7ff baa9 	b.w	80034ee <_vfprintf_r+0x556>
 8003f9c:	ea56 0207 	orrs.w	r2, r6, r7
 8003fa0:	9508      	str	r5, [sp, #32]
 8003fa2:	f43f ac1e 	beq.w	80037e2 <_vfprintf_r+0x84a>
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f43f ac8f 	beq.w	80038ca <_vfprintf_r+0x932>
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f43f acaf 	beq.w	8003910 <_vfprintf_r+0x978>
 8003fb2:	ab2c      	add	r3, sp, #176	; 0xb0
 8003fb4:	08f1      	lsrs	r1, r6, #3
 8003fb6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003fba:	08f8      	lsrs	r0, r7, #3
 8003fbc:	f006 0207 	and.w	r2, r6, #7
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	460e      	mov	r6, r1
 8003fc4:	3230      	adds	r2, #48	; 0x30
 8003fc6:	ea56 0107 	orrs.w	r1, r6, r7
 8003fca:	f103 39ff 	add.w	r9, r3, #4294967295
 8003fce:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003fd2:	f47f ac78 	bne.w	80038c6 <_vfprintf_r+0x92e>
 8003fd6:	9908      	ldr	r1, [sp, #32]
 8003fd8:	07cd      	lsls	r5, r1, #31
 8003fda:	d506      	bpl.n	8003fea <_vfprintf_r+0x1052>
 8003fdc:	2a30      	cmp	r2, #48	; 0x30
 8003fde:	d004      	beq.n	8003fea <_vfprintf_r+0x1052>
 8003fe0:	2230      	movs	r2, #48	; 0x30
 8003fe2:	f809 2c01 	strb.w	r2, [r9, #-1]
 8003fe6:	f1a3 0902 	sub.w	r9, r3, #2
 8003fea:	4656      	mov	r6, sl
 8003fec:	2300      	movs	r3, #0
 8003fee:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 8003ff2:	9d08      	ldr	r5, [sp, #32]
 8003ff4:	9308      	str	r3, [sp, #32]
 8003ff6:	ebaa 0a09 	sub.w	sl, sl, r9
 8003ffa:	f7ff bac6 	b.w	800358a <_vfprintf_r+0x5f2>
 8003ffe:	bf00      	nop
 8004000:	08006ab0 	.word	0x08006ab0
 8004004:	08006aa0 	.word	0x08006aa0
 8004008:	08006a74 	.word	0x08006a74
 800400c:	08006a78 	.word	0x08006a78

08004010 <__sbprintf>:
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004012:	460c      	mov	r4, r1
 8004014:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8004018:	461f      	mov	r7, r3
 800401a:	8989      	ldrh	r1, [r1, #12]
 800401c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800401e:	9319      	str	r3, [sp, #100]	; 0x64
 8004020:	89e3      	ldrh	r3, [r4, #14]
 8004022:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004026:	f021 0102 	bic.w	r1, r1, #2
 800402a:	6a23      	ldr	r3, [r4, #32]
 800402c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004030:	9308      	str	r3, [sp, #32]
 8004032:	a91a      	add	r1, sp, #104	; 0x68
 8004034:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004036:	930a      	str	r3, [sp, #40]	; 0x28
 8004038:	4615      	mov	r5, r2
 800403a:	2300      	movs	r3, #0
 800403c:	4606      	mov	r6, r0
 800403e:	9100      	str	r1, [sp, #0]
 8004040:	9104      	str	r1, [sp, #16]
 8004042:	a816      	add	r0, sp, #88	; 0x58
 8004044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004048:	9102      	str	r1, [sp, #8]
 800404a:	9105      	str	r1, [sp, #20]
 800404c:	9306      	str	r3, [sp, #24]
 800404e:	f001 f9cd 	bl	80053ec <__retarget_lock_init_recursive>
 8004052:	462a      	mov	r2, r5
 8004054:	463b      	mov	r3, r7
 8004056:	4669      	mov	r1, sp
 8004058:	4630      	mov	r0, r6
 800405a:	f7fe ff9d 	bl	8002f98 <_vfprintf_r>
 800405e:	1e05      	subs	r5, r0, #0
 8004060:	db07      	blt.n	8004072 <__sbprintf+0x62>
 8004062:	4669      	mov	r1, sp
 8004064:	4630      	mov	r0, r6
 8004066:	f000 ff6f 	bl	8004f48 <_fflush_r>
 800406a:	2800      	cmp	r0, #0
 800406c:	bf18      	it	ne
 800406e:	f04f 35ff 	movne.w	r5, #4294967295
 8004072:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004076:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004078:	065b      	lsls	r3, r3, #25
 800407a:	bf42      	ittt	mi
 800407c:	89a3      	ldrhmi	r3, [r4, #12]
 800407e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004082:	81a3      	strhmi	r3, [r4, #12]
 8004084:	f001 f9b3 	bl	80053ee <__retarget_lock_close_recursive>
 8004088:	4628      	mov	r0, r5
 800408a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800408e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004090 <__swsetup_r>:
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <__swsetup_r+0xcc>)
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	681d      	ldr	r5, [r3, #0]
 8004096:	4606      	mov	r6, r0
 8004098:	460c      	mov	r4, r1
 800409a:	b125      	cbz	r5, 80040a6 <__swsetup_r+0x16>
 800409c:	69ab      	ldr	r3, [r5, #24]
 800409e:	b913      	cbnz	r3, 80040a6 <__swsetup_r+0x16>
 80040a0:	4628      	mov	r0, r5
 80040a2:	f000 ffe5 	bl	8005070 <__sinit>
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <__swsetup_r+0xd0>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d10f      	bne.n	80040cc <__swsetup_r+0x3c>
 80040ac:	686c      	ldr	r4, [r5, #4]
 80040ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	0715      	lsls	r5, r2, #28
 80040b6:	d42c      	bmi.n	8004112 <__swsetup_r+0x82>
 80040b8:	06d0      	lsls	r0, r2, #27
 80040ba:	d411      	bmi.n	80040e0 <__swsetup_r+0x50>
 80040bc:	2209      	movs	r2, #9
 80040be:	6032      	str	r2, [r6, #0]
 80040c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <__swsetup_r+0xd4>)
 80040ce:	429c      	cmp	r4, r3
 80040d0:	d101      	bne.n	80040d6 <__swsetup_r+0x46>
 80040d2:	68ac      	ldr	r4, [r5, #8]
 80040d4:	e7eb      	b.n	80040ae <__swsetup_r+0x1e>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <__swsetup_r+0xd8>)
 80040d8:	429c      	cmp	r4, r3
 80040da:	bf08      	it	eq
 80040dc:	68ec      	ldreq	r4, [r5, #12]
 80040de:	e7e6      	b.n	80040ae <__swsetup_r+0x1e>
 80040e0:	0751      	lsls	r1, r2, #29
 80040e2:	d512      	bpl.n	800410a <__swsetup_r+0x7a>
 80040e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e6:	b141      	cbz	r1, 80040fa <__swsetup_r+0x6a>
 80040e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <__swsetup_r+0x66>
 80040f0:	4630      	mov	r0, r6
 80040f2:	f001 f893 	bl	800521c <_free_r>
 80040f6:	2300      	movs	r3, #0
 80040f8:	6363      	str	r3, [r4, #52]	; 0x34
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	2300      	movs	r3, #0
 8004104:	6063      	str	r3, [r4, #4]
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	b94b      	cbnz	r3, 800412a <__swsetup_r+0x9a>
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d003      	beq.n	800412a <__swsetup_r+0x9a>
 8004122:	4621      	mov	r1, r4
 8004124:	4630      	mov	r0, r6
 8004126:	f001 f991 	bl	800544c <__smakebuf_r>
 800412a:	89a2      	ldrh	r2, [r4, #12]
 800412c:	f012 0301 	ands.w	r3, r2, #1
 8004130:	d00c      	beq.n	800414c <__swsetup_r+0xbc>
 8004132:	2300      	movs	r3, #0
 8004134:	60a3      	str	r3, [r4, #8]
 8004136:	6963      	ldr	r3, [r4, #20]
 8004138:	425b      	negs	r3, r3
 800413a:	61a3      	str	r3, [r4, #24]
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b953      	cbnz	r3, 8004156 <__swsetup_r+0xc6>
 8004140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004144:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004148:	d1ba      	bne.n	80040c0 <__swsetup_r+0x30>
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	0792      	lsls	r2, r2, #30
 800414e:	bf58      	it	pl
 8004150:	6963      	ldrpl	r3, [r4, #20]
 8004152:	60a3      	str	r3, [r4, #8]
 8004154:	e7f2      	b.n	800413c <__swsetup_r+0xac>
 8004156:	2000      	movs	r0, #0
 8004158:	e7f7      	b.n	800414a <__swsetup_r+0xba>
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c
 8004160:	08006af0 	.word	0x08006af0
 8004164:	08006b10 	.word	0x08006b10
 8004168:	08006ad0 	.word	0x08006ad0

0800416c <quorem>:
 800416c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	6903      	ldr	r3, [r0, #16]
 8004172:	690c      	ldr	r4, [r1, #16]
 8004174:	429c      	cmp	r4, r3
 8004176:	4680      	mov	r8, r0
 8004178:	f300 8082 	bgt.w	8004280 <quorem+0x114>
 800417c:	3c01      	subs	r4, #1
 800417e:	f101 0714 	add.w	r7, r1, #20
 8004182:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004186:	f100 0614 	add.w	r6, r0, #20
 800418a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800418e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004192:	eb06 030e 	add.w	r3, r6, lr
 8004196:	3501      	adds	r5, #1
 8004198:	eb07 090e 	add.w	r9, r7, lr
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	fbb0 f5f5 	udiv	r5, r0, r5
 80041a2:	b395      	cbz	r5, 800420a <quorem+0x9e>
 80041a4:	f04f 0a00 	mov.w	sl, #0
 80041a8:	4638      	mov	r0, r7
 80041aa:	46b4      	mov	ip, r6
 80041ac:	46d3      	mov	fp, sl
 80041ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80041b2:	b293      	uxth	r3, r2
 80041b4:	fb05 a303 	mla	r3, r5, r3, sl
 80041b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ebab 0303 	sub.w	r3, fp, r3
 80041c2:	0c12      	lsrs	r2, r2, #16
 80041c4:	f8bc b000 	ldrh.w	fp, [ip]
 80041c8:	fb05 a202 	mla	r2, r5, r2, sl
 80041cc:	fa13 f38b 	uxtah	r3, r3, fp
 80041d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80041d4:	fa1f fb82 	uxth.w	fp, r2
 80041d8:	f8dc 2000 	ldr.w	r2, [ip]
 80041dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80041e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ea:	4581      	cmp	r9, r0
 80041ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80041f0:	f84c 3b04 	str.w	r3, [ip], #4
 80041f4:	d2db      	bcs.n	80041ae <quorem+0x42>
 80041f6:	f856 300e 	ldr.w	r3, [r6, lr]
 80041fa:	b933      	cbnz	r3, 800420a <quorem+0x9e>
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	3b04      	subs	r3, #4
 8004200:	429e      	cmp	r6, r3
 8004202:	461a      	mov	r2, r3
 8004204:	d330      	bcc.n	8004268 <quorem+0xfc>
 8004206:	f8c8 4010 	str.w	r4, [r8, #16]
 800420a:	4640      	mov	r0, r8
 800420c:	f001 fd95 	bl	8005d3a <__mcmp>
 8004210:	2800      	cmp	r0, #0
 8004212:	db25      	blt.n	8004260 <quorem+0xf4>
 8004214:	3501      	adds	r5, #1
 8004216:	4630      	mov	r0, r6
 8004218:	f04f 0e00 	mov.w	lr, #0
 800421c:	f857 2b04 	ldr.w	r2, [r7], #4
 8004220:	f8d0 c000 	ldr.w	ip, [r0]
 8004224:	b293      	uxth	r3, r2
 8004226:	ebae 0303 	sub.w	r3, lr, r3
 800422a:	0c12      	lsrs	r2, r2, #16
 800422c:	fa13 f38c 	uxtah	r3, r3, ip
 8004230:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004238:	b29b      	uxth	r3, r3
 800423a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800423e:	45b9      	cmp	r9, r7
 8004240:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004244:	f840 3b04 	str.w	r3, [r0], #4
 8004248:	d2e8      	bcs.n	800421c <quorem+0xb0>
 800424a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800424e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004252:	b92a      	cbnz	r2, 8004260 <quorem+0xf4>
 8004254:	3b04      	subs	r3, #4
 8004256:	429e      	cmp	r6, r3
 8004258:	461a      	mov	r2, r3
 800425a:	d30b      	bcc.n	8004274 <quorem+0x108>
 800425c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004260:	4628      	mov	r0, r5
 8004262:	b003      	add	sp, #12
 8004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	3b04      	subs	r3, #4
 800426c:	2a00      	cmp	r2, #0
 800426e:	d1ca      	bne.n	8004206 <quorem+0x9a>
 8004270:	3c01      	subs	r4, #1
 8004272:	e7c5      	b.n	8004200 <quorem+0x94>
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	3b04      	subs	r3, #4
 8004278:	2a00      	cmp	r2, #0
 800427a:	d1ef      	bne.n	800425c <quorem+0xf0>
 800427c:	3c01      	subs	r4, #1
 800427e:	e7ea      	b.n	8004256 <quorem+0xea>
 8004280:	2000      	movs	r0, #0
 8004282:	e7ee      	b.n	8004262 <quorem+0xf6>
 8004284:	0000      	movs	r0, r0
	...

08004288 <_dtoa_r>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	ec57 6b10 	vmov	r6, r7, d0
 8004290:	b097      	sub	sp, #92	; 0x5c
 8004292:	e9cd 6700 	strd	r6, r7, [sp]
 8004296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004298:	9107      	str	r1, [sp, #28]
 800429a:	4604      	mov	r4, r0
 800429c:	920a      	str	r2, [sp, #40]	; 0x28
 800429e:	930f      	str	r3, [sp, #60]	; 0x3c
 80042a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80042a2:	b93e      	cbnz	r6, 80042b4 <_dtoa_r+0x2c>
 80042a4:	2010      	movs	r0, #16
 80042a6:	f001 f911 	bl	80054cc <malloc>
 80042aa:	6260      	str	r0, [r4, #36]	; 0x24
 80042ac:	6046      	str	r6, [r0, #4]
 80042ae:	6086      	str	r6, [r0, #8]
 80042b0:	6006      	str	r6, [r0, #0]
 80042b2:	60c6      	str	r6, [r0, #12]
 80042b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	b151      	cbz	r1, 80042d0 <_dtoa_r+0x48>
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	604a      	str	r2, [r1, #4]
 80042be:	2301      	movs	r3, #1
 80042c0:	4093      	lsls	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
 80042c4:	4620      	mov	r0, r4
 80042c6:	f001 fb63 	bl	8005990 <_Bfree>
 80042ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	9b01      	ldr	r3, [sp, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bfbf      	itttt	lt
 80042d6:	2301      	movlt	r3, #1
 80042d8:	602b      	strlt	r3, [r5, #0]
 80042da:	9b01      	ldrlt	r3, [sp, #4]
 80042dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042e0:	bfb2      	itee	lt
 80042e2:	9301      	strlt	r3, [sp, #4]
 80042e4:	2300      	movge	r3, #0
 80042e6:	602b      	strge	r3, [r5, #0]
 80042e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80042ec:	4ba8      	ldr	r3, [pc, #672]	; (8004590 <_dtoa_r+0x308>)
 80042ee:	ea33 0308 	bics.w	r3, r3, r8
 80042f2:	d11b      	bne.n	800432c <_dtoa_r+0xa4>
 80042f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	9b00      	ldr	r3, [sp, #0]
 80042fe:	b923      	cbnz	r3, 800430a <_dtoa_r+0x82>
 8004300:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004304:	2800      	cmp	r0, #0
 8004306:	f000 8578 	beq.w	8004dfa <_dtoa_r+0xb72>
 800430a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800430c:	b953      	cbnz	r3, 8004324 <_dtoa_r+0x9c>
 800430e:	4ba1      	ldr	r3, [pc, #644]	; (8004594 <_dtoa_r+0x30c>)
 8004310:	e021      	b.n	8004356 <_dtoa_r+0xce>
 8004312:	4ba1      	ldr	r3, [pc, #644]	; (8004598 <_dtoa_r+0x310>)
 8004314:	9302      	str	r3, [sp, #8]
 8004316:	3308      	adds	r3, #8
 8004318:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	9802      	ldr	r0, [sp, #8]
 800431e:	b017      	add	sp, #92	; 0x5c
 8004320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004324:	4b9b      	ldr	r3, [pc, #620]	; (8004594 <_dtoa_r+0x30c>)
 8004326:	9302      	str	r3, [sp, #8]
 8004328:	3303      	adds	r3, #3
 800432a:	e7f5      	b.n	8004318 <_dtoa_r+0x90>
 800432c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004330:	2200      	movs	r2, #0
 8004332:	2300      	movs	r3, #0
 8004334:	4630      	mov	r0, r6
 8004336:	4639      	mov	r1, r7
 8004338:	f7fc fbc2 	bl	8000ac0 <__aeabi_dcmpeq>
 800433c:	4681      	mov	r9, r0
 800433e:	b160      	cbz	r0, 800435a <_dtoa_r+0xd2>
 8004340:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004342:	2301      	movs	r3, #1
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8553 	beq.w	8004df4 <_dtoa_r+0xb6c>
 800434e:	4b93      	ldr	r3, [pc, #588]	; (800459c <_dtoa_r+0x314>)
 8004350:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	e7e0      	b.n	800431c <_dtoa_r+0x94>
 800435a:	aa14      	add	r2, sp, #80	; 0x50
 800435c:	a915      	add	r1, sp, #84	; 0x54
 800435e:	ec47 6b10 	vmov	d0, r6, r7
 8004362:	4620      	mov	r0, r4
 8004364:	f001 fd61 	bl	8005e2a <__d2b>
 8004368:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800436c:	4682      	mov	sl, r0
 800436e:	2d00      	cmp	r5, #0
 8004370:	d07e      	beq.n	8004470 <_dtoa_r+0x1e8>
 8004372:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004376:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800437a:	4630      	mov	r0, r6
 800437c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004380:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004384:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004388:	2200      	movs	r2, #0
 800438a:	4b85      	ldr	r3, [pc, #532]	; (80045a0 <_dtoa_r+0x318>)
 800438c:	f7fb ff7c 	bl	8000288 <__aeabi_dsub>
 8004390:	a379      	add	r3, pc, #484	; (adr r3, 8004578 <_dtoa_r+0x2f0>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f92b 	bl	80005f0 <__aeabi_dmul>
 800439a:	a379      	add	r3, pc, #484	; (adr r3, 8004580 <_dtoa_r+0x2f8>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff74 	bl	800028c <__adddf3>
 80043a4:	4606      	mov	r6, r0
 80043a6:	4628      	mov	r0, r5
 80043a8:	460f      	mov	r7, r1
 80043aa:	f7fc f8bb 	bl	8000524 <__aeabi_i2d>
 80043ae:	a376      	add	r3, pc, #472	; (adr r3, 8004588 <_dtoa_r+0x300>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fc f91c 	bl	80005f0 <__aeabi_dmul>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4630      	mov	r0, r6
 80043be:	4639      	mov	r1, r7
 80043c0:	f7fb ff64 	bl	800028c <__adddf3>
 80043c4:	4606      	mov	r6, r0
 80043c6:	460f      	mov	r7, r1
 80043c8:	f7fc fbc2 	bl	8000b50 <__aeabi_d2iz>
 80043cc:	2200      	movs	r2, #0
 80043ce:	4683      	mov	fp, r0
 80043d0:	2300      	movs	r3, #0
 80043d2:	4630      	mov	r0, r6
 80043d4:	4639      	mov	r1, r7
 80043d6:	f7fc fb7d 	bl	8000ad4 <__aeabi_dcmplt>
 80043da:	b158      	cbz	r0, 80043f4 <_dtoa_r+0x16c>
 80043dc:	4658      	mov	r0, fp
 80043de:	f7fc f8a1 	bl	8000524 <__aeabi_i2d>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4630      	mov	r0, r6
 80043e8:	4639      	mov	r1, r7
 80043ea:	f7fc fb69 	bl	8000ac0 <__aeabi_dcmpeq>
 80043ee:	b908      	cbnz	r0, 80043f4 <_dtoa_r+0x16c>
 80043f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043f4:	f1bb 0f16 	cmp.w	fp, #22
 80043f8:	d859      	bhi.n	80044ae <_dtoa_r+0x226>
 80043fa:	496a      	ldr	r1, [pc, #424]	; (80045a4 <_dtoa_r+0x31c>)
 80043fc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004408:	f7fc fb82 	bl	8000b10 <__aeabi_dcmpgt>
 800440c:	2800      	cmp	r0, #0
 800440e:	d050      	beq.n	80044b2 <_dtoa_r+0x22a>
 8004410:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004414:	2300      	movs	r3, #0
 8004416:	930e      	str	r3, [sp, #56]	; 0x38
 8004418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800441a:	1b5d      	subs	r5, r3, r5
 800441c:	1e6b      	subs	r3, r5, #1
 800441e:	9306      	str	r3, [sp, #24]
 8004420:	bf45      	ittet	mi
 8004422:	f1c5 0301 	rsbmi	r3, r5, #1
 8004426:	9305      	strmi	r3, [sp, #20]
 8004428:	2300      	movpl	r3, #0
 800442a:	2300      	movmi	r3, #0
 800442c:	bf4c      	ite	mi
 800442e:	9306      	strmi	r3, [sp, #24]
 8004430:	9305      	strpl	r3, [sp, #20]
 8004432:	f1bb 0f00 	cmp.w	fp, #0
 8004436:	db3e      	blt.n	80044b6 <_dtoa_r+0x22e>
 8004438:	9b06      	ldr	r3, [sp, #24]
 800443a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800443e:	445b      	add	r3, fp
 8004440:	9306      	str	r3, [sp, #24]
 8004442:	2300      	movs	r3, #0
 8004444:	9308      	str	r3, [sp, #32]
 8004446:	9b07      	ldr	r3, [sp, #28]
 8004448:	2b09      	cmp	r3, #9
 800444a:	f200 80af 	bhi.w	80045ac <_dtoa_r+0x324>
 800444e:	2b05      	cmp	r3, #5
 8004450:	bfc4      	itt	gt
 8004452:	3b04      	subgt	r3, #4
 8004454:	9307      	strgt	r3, [sp, #28]
 8004456:	9b07      	ldr	r3, [sp, #28]
 8004458:	f1a3 0302 	sub.w	r3, r3, #2
 800445c:	bfcc      	ite	gt
 800445e:	2600      	movgt	r6, #0
 8004460:	2601      	movle	r6, #1
 8004462:	2b03      	cmp	r3, #3
 8004464:	f200 80ae 	bhi.w	80045c4 <_dtoa_r+0x33c>
 8004468:	e8df f003 	tbb	[pc, r3]
 800446c:	772f8482 	.word	0x772f8482
 8004470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004472:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004474:	441d      	add	r5, r3
 8004476:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800447a:	2b20      	cmp	r3, #32
 800447c:	dd11      	ble.n	80044a2 <_dtoa_r+0x21a>
 800447e:	9a00      	ldr	r2, [sp, #0]
 8004480:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004484:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004488:	fa22 f000 	lsr.w	r0, r2, r0
 800448c:	fa08 f303 	lsl.w	r3, r8, r3
 8004490:	4318      	orrs	r0, r3
 8004492:	f7fc f837 	bl	8000504 <__aeabi_ui2d>
 8004496:	2301      	movs	r3, #1
 8004498:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800449c:	3d01      	subs	r5, #1
 800449e:	9312      	str	r3, [sp, #72]	; 0x48
 80044a0:	e772      	b.n	8004388 <_dtoa_r+0x100>
 80044a2:	f1c3 0020 	rsb	r0, r3, #32
 80044a6:	9b00      	ldr	r3, [sp, #0]
 80044a8:	fa03 f000 	lsl.w	r0, r3, r0
 80044ac:	e7f1      	b.n	8004492 <_dtoa_r+0x20a>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7b1      	b.n	8004416 <_dtoa_r+0x18e>
 80044b2:	900e      	str	r0, [sp, #56]	; 0x38
 80044b4:	e7b0      	b.n	8004418 <_dtoa_r+0x190>
 80044b6:	9b05      	ldr	r3, [sp, #20]
 80044b8:	eba3 030b 	sub.w	r3, r3, fp
 80044bc:	9305      	str	r3, [sp, #20]
 80044be:	f1cb 0300 	rsb	r3, fp, #0
 80044c2:	9308      	str	r3, [sp, #32]
 80044c4:	2300      	movs	r3, #0
 80044c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c8:	e7bd      	b.n	8004446 <_dtoa_r+0x1be>
 80044ca:	2301      	movs	r3, #1
 80044cc:	9309      	str	r3, [sp, #36]	; 0x24
 80044ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	dd7a      	ble.n	80045ca <_dtoa_r+0x342>
 80044d4:	9304      	str	r3, [sp, #16]
 80044d6:	9303      	str	r3, [sp, #12]
 80044d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044da:	2200      	movs	r2, #0
 80044dc:	606a      	str	r2, [r5, #4]
 80044de:	2104      	movs	r1, #4
 80044e0:	f101 0214 	add.w	r2, r1, #20
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d975      	bls.n	80045d4 <_dtoa_r+0x34c>
 80044e8:	6869      	ldr	r1, [r5, #4]
 80044ea:	4620      	mov	r0, r4
 80044ec:	f001 fa1c 	bl	8005928 <_Balloc>
 80044f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f2:	6028      	str	r0, [r5, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	9302      	str	r3, [sp, #8]
 80044f8:	9b03      	ldr	r3, [sp, #12]
 80044fa:	2b0e      	cmp	r3, #14
 80044fc:	f200 80e5 	bhi.w	80046ca <_dtoa_r+0x442>
 8004500:	2e00      	cmp	r6, #0
 8004502:	f000 80e2 	beq.w	80046ca <_dtoa_r+0x442>
 8004506:	ed9d 7b00 	vldr	d7, [sp]
 800450a:	f1bb 0f00 	cmp.w	fp, #0
 800450e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004512:	dd74      	ble.n	80045fe <_dtoa_r+0x376>
 8004514:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <_dtoa_r+0x31c>)
 8004516:	f00b 030f 	and.w	r3, fp, #15
 800451a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800451e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004522:	06f0      	lsls	r0, r6, #27
 8004524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004528:	d559      	bpl.n	80045de <_dtoa_r+0x356>
 800452a:	4b1f      	ldr	r3, [pc, #124]	; (80045a8 <_dtoa_r+0x320>)
 800452c:	ec51 0b17 	vmov	r0, r1, d7
 8004530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004534:	f7fc f986 	bl	8000844 <__aeabi_ddiv>
 8004538:	e9cd 0100 	strd	r0, r1, [sp]
 800453c:	f006 060f 	and.w	r6, r6, #15
 8004540:	2503      	movs	r5, #3
 8004542:	4f19      	ldr	r7, [pc, #100]	; (80045a8 <_dtoa_r+0x320>)
 8004544:	2e00      	cmp	r6, #0
 8004546:	d14c      	bne.n	80045e2 <_dtoa_r+0x35a>
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004550:	f7fc f978 	bl	8000844 <__aeabi_ddiv>
 8004554:	e9cd 0100 	strd	r0, r1, [sp]
 8004558:	e06a      	b.n	8004630 <_dtoa_r+0x3a8>
 800455a:	2301      	movs	r3, #1
 800455c:	9309      	str	r3, [sp, #36]	; 0x24
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	445b      	add	r3, fp
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	3301      	adds	r3, #1
 8004566:	2b01      	cmp	r3, #1
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	bfb8      	it	lt
 800456c:	2301      	movlt	r3, #1
 800456e:	e7b3      	b.n	80044d8 <_dtoa_r+0x250>
 8004570:	2300      	movs	r3, #0
 8004572:	e7ab      	b.n	80044cc <_dtoa_r+0x244>
 8004574:	2300      	movs	r3, #0
 8004576:	e7f1      	b.n	800455c <_dtoa_r+0x2d4>
 8004578:	636f4361 	.word	0x636f4361
 800457c:	3fd287a7 	.word	0x3fd287a7
 8004580:	8b60c8b3 	.word	0x8b60c8b3
 8004584:	3fc68a28 	.word	0x3fc68a28
 8004588:	509f79fb 	.word	0x509f79fb
 800458c:	3fd34413 	.word	0x3fd34413
 8004590:	7ff00000 	.word	0x7ff00000
 8004594:	08006ac9 	.word	0x08006ac9
 8004598:	08006ac0 	.word	0x08006ac0
 800459c:	08006a9f 	.word	0x08006a9f
 80045a0:	3ff80000 	.word	0x3ff80000
 80045a4:	08006b58 	.word	0x08006b58
 80045a8:	08006b30 	.word	0x08006b30
 80045ac:	2601      	movs	r6, #1
 80045ae:	2300      	movs	r3, #0
 80045b0:	9307      	str	r3, [sp, #28]
 80045b2:	9609      	str	r6, [sp, #36]	; 0x24
 80045b4:	f04f 33ff 	mov.w	r3, #4294967295
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	9303      	str	r3, [sp, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	2312      	movs	r3, #18
 80045c0:	920a      	str	r2, [sp, #40]	; 0x28
 80045c2:	e789      	b.n	80044d8 <_dtoa_r+0x250>
 80045c4:	2301      	movs	r3, #1
 80045c6:	9309      	str	r3, [sp, #36]	; 0x24
 80045c8:	e7f4      	b.n	80045b4 <_dtoa_r+0x32c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	9304      	str	r3, [sp, #16]
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	461a      	mov	r2, r3
 80045d2:	e7f5      	b.n	80045c0 <_dtoa_r+0x338>
 80045d4:	686a      	ldr	r2, [r5, #4]
 80045d6:	3201      	adds	r2, #1
 80045d8:	606a      	str	r2, [r5, #4]
 80045da:	0049      	lsls	r1, r1, #1
 80045dc:	e780      	b.n	80044e0 <_dtoa_r+0x258>
 80045de:	2502      	movs	r5, #2
 80045e0:	e7af      	b.n	8004542 <_dtoa_r+0x2ba>
 80045e2:	07f1      	lsls	r1, r6, #31
 80045e4:	d508      	bpl.n	80045f8 <_dtoa_r+0x370>
 80045e6:	4640      	mov	r0, r8
 80045e8:	4649      	mov	r1, r9
 80045ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ee:	f7fb ffff 	bl	80005f0 <__aeabi_dmul>
 80045f2:	3501      	adds	r5, #1
 80045f4:	4680      	mov	r8, r0
 80045f6:	4689      	mov	r9, r1
 80045f8:	1076      	asrs	r6, r6, #1
 80045fa:	3708      	adds	r7, #8
 80045fc:	e7a2      	b.n	8004544 <_dtoa_r+0x2bc>
 80045fe:	f000 809d 	beq.w	800473c <_dtoa_r+0x4b4>
 8004602:	f1cb 0600 	rsb	r6, fp, #0
 8004606:	4b9f      	ldr	r3, [pc, #636]	; (8004884 <_dtoa_r+0x5fc>)
 8004608:	4f9f      	ldr	r7, [pc, #636]	; (8004888 <_dtoa_r+0x600>)
 800460a:	f006 020f 	and.w	r2, r6, #15
 800460e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800461a:	f7fb ffe9 	bl	80005f0 <__aeabi_dmul>
 800461e:	e9cd 0100 	strd	r0, r1, [sp]
 8004622:	1136      	asrs	r6, r6, #4
 8004624:	2300      	movs	r3, #0
 8004626:	2502      	movs	r5, #2
 8004628:	2e00      	cmp	r6, #0
 800462a:	d17c      	bne.n	8004726 <_dtoa_r+0x49e>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d191      	bne.n	8004554 <_dtoa_r+0x2cc>
 8004630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8084 	beq.w	8004740 <_dtoa_r+0x4b8>
 8004638:	e9dd 8900 	ldrd	r8, r9, [sp]
 800463c:	2200      	movs	r2, #0
 800463e:	4b93      	ldr	r3, [pc, #588]	; (800488c <_dtoa_r+0x604>)
 8004640:	4640      	mov	r0, r8
 8004642:	4649      	mov	r1, r9
 8004644:	f7fc fa46 	bl	8000ad4 <__aeabi_dcmplt>
 8004648:	2800      	cmp	r0, #0
 800464a:	d079      	beq.n	8004740 <_dtoa_r+0x4b8>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d076      	beq.n	8004740 <_dtoa_r+0x4b8>
 8004652:	9b04      	ldr	r3, [sp, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	dd34      	ble.n	80046c2 <_dtoa_r+0x43a>
 8004658:	2200      	movs	r2, #0
 800465a:	4b8d      	ldr	r3, [pc, #564]	; (8004890 <_dtoa_r+0x608>)
 800465c:	4640      	mov	r0, r8
 800465e:	4649      	mov	r1, r9
 8004660:	f7fb ffc6 	bl	80005f0 <__aeabi_dmul>
 8004664:	e9cd 0100 	strd	r0, r1, [sp]
 8004668:	9e04      	ldr	r6, [sp, #16]
 800466a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800466e:	3501      	adds	r5, #1
 8004670:	4628      	mov	r0, r5
 8004672:	f7fb ff57 	bl	8000524 <__aeabi_i2d>
 8004676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800467a:	f7fb ffb9 	bl	80005f0 <__aeabi_dmul>
 800467e:	2200      	movs	r2, #0
 8004680:	4b84      	ldr	r3, [pc, #528]	; (8004894 <_dtoa_r+0x60c>)
 8004682:	f7fb fe03 	bl	800028c <__adddf3>
 8004686:	4680      	mov	r8, r0
 8004688:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800468c:	2e00      	cmp	r6, #0
 800468e:	d15a      	bne.n	8004746 <_dtoa_r+0x4be>
 8004690:	2200      	movs	r2, #0
 8004692:	4b81      	ldr	r3, [pc, #516]	; (8004898 <_dtoa_r+0x610>)
 8004694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004698:	f7fb fdf6 	bl	8000288 <__aeabi_dsub>
 800469c:	4642      	mov	r2, r8
 800469e:	464b      	mov	r3, r9
 80046a0:	e9cd 0100 	strd	r0, r1, [sp]
 80046a4:	f7fc fa34 	bl	8000b10 <__aeabi_dcmpgt>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	f040 829b 	bne.w	8004be4 <_dtoa_r+0x95c>
 80046ae:	4642      	mov	r2, r8
 80046b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80046b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046b8:	f7fc fa0c 	bl	8000ad4 <__aeabi_dcmplt>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 828f 	bne.w	8004be0 <_dtoa_r+0x958>
 80046c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80046c6:	e9cd 2300 	strd	r2, r3, [sp]
 80046ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f2c0 8150 	blt.w	8004972 <_dtoa_r+0x6ea>
 80046d2:	f1bb 0f0e 	cmp.w	fp, #14
 80046d6:	f300 814c 	bgt.w	8004972 <_dtoa_r+0x6ea>
 80046da:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <_dtoa_r+0x5fc>)
 80046dc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f280 80da 	bge.w	80048a0 <_dtoa_r+0x618>
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f300 80d6 	bgt.w	80048a0 <_dtoa_r+0x618>
 80046f4:	f040 8273 	bne.w	8004bde <_dtoa_r+0x956>
 80046f8:	2200      	movs	r2, #0
 80046fa:	4b67      	ldr	r3, [pc, #412]	; (8004898 <_dtoa_r+0x610>)
 80046fc:	4640      	mov	r0, r8
 80046fe:	4649      	mov	r1, r9
 8004700:	f7fb ff76 	bl	80005f0 <__aeabi_dmul>
 8004704:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004708:	f7fc f9f8 	bl	8000afc <__aeabi_dcmpge>
 800470c:	9e03      	ldr	r6, [sp, #12]
 800470e:	4637      	mov	r7, r6
 8004710:	2800      	cmp	r0, #0
 8004712:	f040 824a 	bne.w	8004baa <_dtoa_r+0x922>
 8004716:	9b02      	ldr	r3, [sp, #8]
 8004718:	9a02      	ldr	r2, [sp, #8]
 800471a:	1c5d      	adds	r5, r3, #1
 800471c:	2331      	movs	r3, #49	; 0x31
 800471e:	7013      	strb	r3, [r2, #0]
 8004720:	f10b 0b01 	add.w	fp, fp, #1
 8004724:	e245      	b.n	8004bb2 <_dtoa_r+0x92a>
 8004726:	07f2      	lsls	r2, r6, #31
 8004728:	d505      	bpl.n	8004736 <_dtoa_r+0x4ae>
 800472a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800472e:	f7fb ff5f 	bl	80005f0 <__aeabi_dmul>
 8004732:	3501      	adds	r5, #1
 8004734:	2301      	movs	r3, #1
 8004736:	1076      	asrs	r6, r6, #1
 8004738:	3708      	adds	r7, #8
 800473a:	e775      	b.n	8004628 <_dtoa_r+0x3a0>
 800473c:	2502      	movs	r5, #2
 800473e:	e777      	b.n	8004630 <_dtoa_r+0x3a8>
 8004740:	465f      	mov	r7, fp
 8004742:	9e03      	ldr	r6, [sp, #12]
 8004744:	e794      	b.n	8004670 <_dtoa_r+0x3e8>
 8004746:	9a02      	ldr	r2, [sp, #8]
 8004748:	4b4e      	ldr	r3, [pc, #312]	; (8004884 <_dtoa_r+0x5fc>)
 800474a:	4432      	add	r2, r6
 800474c:	9213      	str	r2, [sp, #76]	; 0x4c
 800474e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004750:	1e71      	subs	r1, r6, #1
 8004752:	2a00      	cmp	r2, #0
 8004754:	d048      	beq.n	80047e8 <_dtoa_r+0x560>
 8004756:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	2000      	movs	r0, #0
 8004760:	494e      	ldr	r1, [pc, #312]	; (800489c <_dtoa_r+0x614>)
 8004762:	f7fc f86f 	bl	8000844 <__aeabi_ddiv>
 8004766:	4642      	mov	r2, r8
 8004768:	464b      	mov	r3, r9
 800476a:	f7fb fd8d 	bl	8000288 <__aeabi_dsub>
 800476e:	9d02      	ldr	r5, [sp, #8]
 8004770:	4680      	mov	r8, r0
 8004772:	4689      	mov	r9, r1
 8004774:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004778:	f7fc f9ea 	bl	8000b50 <__aeabi_d2iz>
 800477c:	4606      	mov	r6, r0
 800477e:	f7fb fed1 	bl	8000524 <__aeabi_i2d>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800478a:	f7fb fd7d 	bl	8000288 <__aeabi_dsub>
 800478e:	3630      	adds	r6, #48	; 0x30
 8004790:	f805 6b01 	strb.w	r6, [r5], #1
 8004794:	4642      	mov	r2, r8
 8004796:	464b      	mov	r3, r9
 8004798:	e9cd 0100 	strd	r0, r1, [sp]
 800479c:	f7fc f99a 	bl	8000ad4 <__aeabi_dcmplt>
 80047a0:	2800      	cmp	r0, #0
 80047a2:	d165      	bne.n	8004870 <_dtoa_r+0x5e8>
 80047a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047a8:	2000      	movs	r0, #0
 80047aa:	4938      	ldr	r1, [pc, #224]	; (800488c <_dtoa_r+0x604>)
 80047ac:	f7fb fd6c 	bl	8000288 <__aeabi_dsub>
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f7fc f98e 	bl	8000ad4 <__aeabi_dcmplt>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 80ba 	bne.w	8004932 <_dtoa_r+0x6aa>
 80047be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047c0:	429d      	cmp	r5, r3
 80047c2:	f43f af7e 	beq.w	80046c2 <_dtoa_r+0x43a>
 80047c6:	2200      	movs	r2, #0
 80047c8:	4b31      	ldr	r3, [pc, #196]	; (8004890 <_dtoa_r+0x608>)
 80047ca:	4640      	mov	r0, r8
 80047cc:	4649      	mov	r1, r9
 80047ce:	f7fb ff0f 	bl	80005f0 <__aeabi_dmul>
 80047d2:	2200      	movs	r2, #0
 80047d4:	4680      	mov	r8, r0
 80047d6:	4689      	mov	r9, r1
 80047d8:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <_dtoa_r+0x608>)
 80047da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047de:	f7fb ff07 	bl	80005f0 <__aeabi_dmul>
 80047e2:	e9cd 0100 	strd	r0, r1, [sp]
 80047e6:	e7c5      	b.n	8004774 <_dtoa_r+0x4ec>
 80047e8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047f4:	f7fb fefc 	bl	80005f0 <__aeabi_dmul>
 80047f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047fc:	9d02      	ldr	r5, [sp, #8]
 80047fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004802:	f7fc f9a5 	bl	8000b50 <__aeabi_d2iz>
 8004806:	4606      	mov	r6, r0
 8004808:	f7fb fe8c 	bl	8000524 <__aeabi_i2d>
 800480c:	3630      	adds	r6, #48	; 0x30
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004816:	f7fb fd37 	bl	8000288 <__aeabi_dsub>
 800481a:	f805 6b01 	strb.w	r6, [r5], #1
 800481e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004820:	42ab      	cmp	r3, r5
 8004822:	4680      	mov	r8, r0
 8004824:	4689      	mov	r9, r1
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	d125      	bne.n	8004878 <_dtoa_r+0x5f0>
 800482c:	4b1b      	ldr	r3, [pc, #108]	; (800489c <_dtoa_r+0x614>)
 800482e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004832:	f7fb fd2b 	bl	800028c <__adddf3>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4640      	mov	r0, r8
 800483c:	4649      	mov	r1, r9
 800483e:	f7fc f967 	bl	8000b10 <__aeabi_dcmpgt>
 8004842:	2800      	cmp	r0, #0
 8004844:	d175      	bne.n	8004932 <_dtoa_r+0x6aa>
 8004846:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800484a:	2000      	movs	r0, #0
 800484c:	4913      	ldr	r1, [pc, #76]	; (800489c <_dtoa_r+0x614>)
 800484e:	f7fb fd1b 	bl	8000288 <__aeabi_dsub>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4640      	mov	r0, r8
 8004858:	4649      	mov	r1, r9
 800485a:	f7fc f93b 	bl	8000ad4 <__aeabi_dcmplt>
 800485e:	2800      	cmp	r0, #0
 8004860:	f43f af2f 	beq.w	80046c2 <_dtoa_r+0x43a>
 8004864:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004868:	2b30      	cmp	r3, #48	; 0x30
 800486a:	f105 32ff 	add.w	r2, r5, #4294967295
 800486e:	d001      	beq.n	8004874 <_dtoa_r+0x5ec>
 8004870:	46bb      	mov	fp, r7
 8004872:	e04d      	b.n	8004910 <_dtoa_r+0x688>
 8004874:	4615      	mov	r5, r2
 8004876:	e7f5      	b.n	8004864 <_dtoa_r+0x5dc>
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <_dtoa_r+0x608>)
 800487a:	f7fb feb9 	bl	80005f0 <__aeabi_dmul>
 800487e:	e9cd 0100 	strd	r0, r1, [sp]
 8004882:	e7bc      	b.n	80047fe <_dtoa_r+0x576>
 8004884:	08006b58 	.word	0x08006b58
 8004888:	08006b30 	.word	0x08006b30
 800488c:	3ff00000 	.word	0x3ff00000
 8004890:	40240000 	.word	0x40240000
 8004894:	401c0000 	.word	0x401c0000
 8004898:	40140000 	.word	0x40140000
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80048a4:	9d02      	ldr	r5, [sp, #8]
 80048a6:	4642      	mov	r2, r8
 80048a8:	464b      	mov	r3, r9
 80048aa:	4630      	mov	r0, r6
 80048ac:	4639      	mov	r1, r7
 80048ae:	f7fb ffc9 	bl	8000844 <__aeabi_ddiv>
 80048b2:	f7fc f94d 	bl	8000b50 <__aeabi_d2iz>
 80048b6:	9000      	str	r0, [sp, #0]
 80048b8:	f7fb fe34 	bl	8000524 <__aeabi_i2d>
 80048bc:	4642      	mov	r2, r8
 80048be:	464b      	mov	r3, r9
 80048c0:	f7fb fe96 	bl	80005f0 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	f7fb fcdc 	bl	8000288 <__aeabi_dsub>
 80048d0:	9e00      	ldr	r6, [sp, #0]
 80048d2:	9f03      	ldr	r7, [sp, #12]
 80048d4:	3630      	adds	r6, #48	; 0x30
 80048d6:	f805 6b01 	strb.w	r6, [r5], #1
 80048da:	9e02      	ldr	r6, [sp, #8]
 80048dc:	1bae      	subs	r6, r5, r6
 80048de:	42b7      	cmp	r7, r6
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	d138      	bne.n	8004958 <_dtoa_r+0x6d0>
 80048e6:	f7fb fcd1 	bl	800028c <__adddf3>
 80048ea:	4606      	mov	r6, r0
 80048ec:	460f      	mov	r7, r1
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4640      	mov	r0, r8
 80048f4:	4649      	mov	r1, r9
 80048f6:	f7fc f8ed 	bl	8000ad4 <__aeabi_dcmplt>
 80048fa:	b9c8      	cbnz	r0, 8004930 <_dtoa_r+0x6a8>
 80048fc:	4632      	mov	r2, r6
 80048fe:	463b      	mov	r3, r7
 8004900:	4640      	mov	r0, r8
 8004902:	4649      	mov	r1, r9
 8004904:	f7fc f8dc 	bl	8000ac0 <__aeabi_dcmpeq>
 8004908:	b110      	cbz	r0, 8004910 <_dtoa_r+0x688>
 800490a:	9b00      	ldr	r3, [sp, #0]
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d40f      	bmi.n	8004930 <_dtoa_r+0x6a8>
 8004910:	4651      	mov	r1, sl
 8004912:	4620      	mov	r0, r4
 8004914:	f001 f83c 	bl	8005990 <_Bfree>
 8004918:	2300      	movs	r3, #0
 800491a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800491c:	702b      	strb	r3, [r5, #0]
 800491e:	f10b 0301 	add.w	r3, fp, #1
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004926:	2b00      	cmp	r3, #0
 8004928:	f43f acf8 	beq.w	800431c <_dtoa_r+0x94>
 800492c:	601d      	str	r5, [r3, #0]
 800492e:	e4f5      	b.n	800431c <_dtoa_r+0x94>
 8004930:	465f      	mov	r7, fp
 8004932:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004936:	2a39      	cmp	r2, #57	; 0x39
 8004938:	f105 33ff 	add.w	r3, r5, #4294967295
 800493c:	d106      	bne.n	800494c <_dtoa_r+0x6c4>
 800493e:	9a02      	ldr	r2, [sp, #8]
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <_dtoa_r+0x6cc>
 8004944:	2330      	movs	r3, #48	; 0x30
 8004946:	7013      	strb	r3, [r2, #0]
 8004948:	3701      	adds	r7, #1
 800494a:	4613      	mov	r3, r2
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	3201      	adds	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e78d      	b.n	8004870 <_dtoa_r+0x5e8>
 8004954:	461d      	mov	r5, r3
 8004956:	e7ec      	b.n	8004932 <_dtoa_r+0x6aa>
 8004958:	2200      	movs	r2, #0
 800495a:	4ba4      	ldr	r3, [pc, #656]	; (8004bec <_dtoa_r+0x964>)
 800495c:	f7fb fe48 	bl	80005f0 <__aeabi_dmul>
 8004960:	2200      	movs	r2, #0
 8004962:	2300      	movs	r3, #0
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	f7fc f8aa 	bl	8000ac0 <__aeabi_dcmpeq>
 800496c:	2800      	cmp	r0, #0
 800496e:	d09a      	beq.n	80048a6 <_dtoa_r+0x61e>
 8004970:	e7ce      	b.n	8004910 <_dtoa_r+0x688>
 8004972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004974:	2a00      	cmp	r2, #0
 8004976:	f000 80cd 	beq.w	8004b14 <_dtoa_r+0x88c>
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	2a01      	cmp	r2, #1
 800497e:	f300 80af 	bgt.w	8004ae0 <_dtoa_r+0x858>
 8004982:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004984:	2a00      	cmp	r2, #0
 8004986:	f000 80a7 	beq.w	8004ad8 <_dtoa_r+0x850>
 800498a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800498e:	9e08      	ldr	r6, [sp, #32]
 8004990:	9d05      	ldr	r5, [sp, #20]
 8004992:	9a05      	ldr	r2, [sp, #20]
 8004994:	441a      	add	r2, r3
 8004996:	9205      	str	r2, [sp, #20]
 8004998:	9a06      	ldr	r2, [sp, #24]
 800499a:	2101      	movs	r1, #1
 800499c:	441a      	add	r2, r3
 800499e:	4620      	mov	r0, r4
 80049a0:	9206      	str	r2, [sp, #24]
 80049a2:	f001 f895 	bl	8005ad0 <__i2b>
 80049a6:	4607      	mov	r7, r0
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	dd0c      	ble.n	80049c6 <_dtoa_r+0x73e>
 80049ac:	9b06      	ldr	r3, [sp, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dd09      	ble.n	80049c6 <_dtoa_r+0x73e>
 80049b2:	42ab      	cmp	r3, r5
 80049b4:	9a05      	ldr	r2, [sp, #20]
 80049b6:	bfa8      	it	ge
 80049b8:	462b      	movge	r3, r5
 80049ba:	1ad2      	subs	r2, r2, r3
 80049bc:	9205      	str	r2, [sp, #20]
 80049be:	9a06      	ldr	r2, [sp, #24]
 80049c0:	1aed      	subs	r5, r5, r3
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	9306      	str	r3, [sp, #24]
 80049c6:	9b08      	ldr	r3, [sp, #32]
 80049c8:	b1f3      	cbz	r3, 8004a08 <_dtoa_r+0x780>
 80049ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a5 	beq.w	8004b1c <_dtoa_r+0x894>
 80049d2:	2e00      	cmp	r6, #0
 80049d4:	dd10      	ble.n	80049f8 <_dtoa_r+0x770>
 80049d6:	4639      	mov	r1, r7
 80049d8:	4632      	mov	r2, r6
 80049da:	4620      	mov	r0, r4
 80049dc:	f001 f90e 	bl	8005bfc <__pow5mult>
 80049e0:	4652      	mov	r2, sl
 80049e2:	4601      	mov	r1, r0
 80049e4:	4607      	mov	r7, r0
 80049e6:	4620      	mov	r0, r4
 80049e8:	f001 f87b 	bl	8005ae2 <__multiply>
 80049ec:	4651      	mov	r1, sl
 80049ee:	4680      	mov	r8, r0
 80049f0:	4620      	mov	r0, r4
 80049f2:	f000 ffcd 	bl	8005990 <_Bfree>
 80049f6:	46c2      	mov	sl, r8
 80049f8:	9b08      	ldr	r3, [sp, #32]
 80049fa:	1b9a      	subs	r2, r3, r6
 80049fc:	d004      	beq.n	8004a08 <_dtoa_r+0x780>
 80049fe:	4651      	mov	r1, sl
 8004a00:	4620      	mov	r0, r4
 8004a02:	f001 f8fb 	bl	8005bfc <__pow5mult>
 8004a06:	4682      	mov	sl, r0
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f001 f860 	bl	8005ad0 <__i2b>
 8004a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	4606      	mov	r6, r0
 8004a16:	f340 8083 	ble.w	8004b20 <_dtoa_r+0x898>
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4601      	mov	r1, r0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f001 f8ec 	bl	8005bfc <__pow5mult>
 8004a24:	9b07      	ldr	r3, [sp, #28]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	4606      	mov	r6, r0
 8004a2a:	dd7c      	ble.n	8004b26 <_dtoa_r+0x89e>
 8004a2c:	f04f 0800 	mov.w	r8, #0
 8004a30:	6933      	ldr	r3, [r6, #16]
 8004a32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a36:	6918      	ldr	r0, [r3, #16]
 8004a38:	f000 fffc 	bl	8005a34 <__hi0bits>
 8004a3c:	f1c0 0020 	rsb	r0, r0, #32
 8004a40:	9b06      	ldr	r3, [sp, #24]
 8004a42:	4418      	add	r0, r3
 8004a44:	f010 001f 	ands.w	r0, r0, #31
 8004a48:	f000 8096 	beq.w	8004b78 <_dtoa_r+0x8f0>
 8004a4c:	f1c0 0320 	rsb	r3, r0, #32
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	f340 8087 	ble.w	8004b64 <_dtoa_r+0x8dc>
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	f1c0 001c 	rsb	r0, r0, #28
 8004a5c:	4403      	add	r3, r0
 8004a5e:	9305      	str	r3, [sp, #20]
 8004a60:	9b06      	ldr	r3, [sp, #24]
 8004a62:	4405      	add	r5, r0
 8004a64:	4403      	add	r3, r0
 8004a66:	9306      	str	r3, [sp, #24]
 8004a68:	9b05      	ldr	r3, [sp, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	dd05      	ble.n	8004a7a <_dtoa_r+0x7f2>
 8004a6e:	4651      	mov	r1, sl
 8004a70:	461a      	mov	r2, r3
 8004a72:	4620      	mov	r0, r4
 8004a74:	f001 f910 	bl	8005c98 <__lshift>
 8004a78:	4682      	mov	sl, r0
 8004a7a:	9b06      	ldr	r3, [sp, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	dd05      	ble.n	8004a8c <_dtoa_r+0x804>
 8004a80:	4631      	mov	r1, r6
 8004a82:	461a      	mov	r2, r3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f001 f907 	bl	8005c98 <__lshift>
 8004a8a:	4606      	mov	r6, r0
 8004a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d074      	beq.n	8004b7c <_dtoa_r+0x8f4>
 8004a92:	4631      	mov	r1, r6
 8004a94:	4650      	mov	r0, sl
 8004a96:	f001 f950 	bl	8005d3a <__mcmp>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	da6e      	bge.n	8004b7c <_dtoa_r+0x8f4>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	220a      	movs	r2, #10
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	f000 ff8a 	bl	80059be <__multadd>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ab0:	4682      	mov	sl, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 81a8 	beq.w	8004e08 <_dtoa_r+0xb80>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4639      	mov	r1, r7
 8004abc:	220a      	movs	r2, #10
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f000 ff7d 	bl	80059be <__multadd>
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	4607      	mov	r7, r0
 8004aca:	f300 80c8 	bgt.w	8004c5e <_dtoa_r+0x9d6>
 8004ace:	9b07      	ldr	r3, [sp, #28]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	f340 80c4 	ble.w	8004c5e <_dtoa_r+0x9d6>
 8004ad6:	e059      	b.n	8004b8c <_dtoa_r+0x904>
 8004ad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ada:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ade:	e756      	b.n	800498e <_dtoa_r+0x706>
 8004ae0:	9b03      	ldr	r3, [sp, #12]
 8004ae2:	1e5e      	subs	r6, r3, #1
 8004ae4:	9b08      	ldr	r3, [sp, #32]
 8004ae6:	42b3      	cmp	r3, r6
 8004ae8:	bfbf      	itttt	lt
 8004aea:	9b08      	ldrlt	r3, [sp, #32]
 8004aec:	9608      	strlt	r6, [sp, #32]
 8004aee:	1af2      	sublt	r2, r6, r3
 8004af0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004af2:	bfb6      	itet	lt
 8004af4:	189b      	addlt	r3, r3, r2
 8004af6:	1b9e      	subge	r6, r3, r6
 8004af8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004afa:	9b03      	ldr	r3, [sp, #12]
 8004afc:	bfb8      	it	lt
 8004afe:	2600      	movlt	r6, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb9      	ittee	lt
 8004b04:	9b05      	ldrlt	r3, [sp, #20]
 8004b06:	9a03      	ldrlt	r2, [sp, #12]
 8004b08:	9d05      	ldrge	r5, [sp, #20]
 8004b0a:	9b03      	ldrge	r3, [sp, #12]
 8004b0c:	bfbc      	itt	lt
 8004b0e:	1a9d      	sublt	r5, r3, r2
 8004b10:	2300      	movlt	r3, #0
 8004b12:	e73e      	b.n	8004992 <_dtoa_r+0x70a>
 8004b14:	9e08      	ldr	r6, [sp, #32]
 8004b16:	9d05      	ldr	r5, [sp, #20]
 8004b18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b1a:	e745      	b.n	80049a8 <_dtoa_r+0x720>
 8004b1c:	9a08      	ldr	r2, [sp, #32]
 8004b1e:	e76e      	b.n	80049fe <_dtoa_r+0x776>
 8004b20:	9b07      	ldr	r3, [sp, #28]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	dc19      	bgt.n	8004b5a <_dtoa_r+0x8d2>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	b9bb      	cbnz	r3, 8004b5a <_dtoa_r+0x8d2>
 8004b2a:	9b01      	ldr	r3, [sp, #4]
 8004b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b30:	b99b      	cbnz	r3, 8004b5a <_dtoa_r+0x8d2>
 8004b32:	9b01      	ldr	r3, [sp, #4]
 8004b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b38:	0d1b      	lsrs	r3, r3, #20
 8004b3a:	051b      	lsls	r3, r3, #20
 8004b3c:	b183      	cbz	r3, 8004b60 <_dtoa_r+0x8d8>
 8004b3e:	9b05      	ldr	r3, [sp, #20]
 8004b40:	3301      	adds	r3, #1
 8004b42:	9305      	str	r3, [sp, #20]
 8004b44:	9b06      	ldr	r3, [sp, #24]
 8004b46:	3301      	adds	r3, #1
 8004b48:	9306      	str	r3, [sp, #24]
 8004b4a:	f04f 0801 	mov.w	r8, #1
 8004b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f47f af6d 	bne.w	8004a30 <_dtoa_r+0x7a8>
 8004b56:	2001      	movs	r0, #1
 8004b58:	e772      	b.n	8004a40 <_dtoa_r+0x7b8>
 8004b5a:	f04f 0800 	mov.w	r8, #0
 8004b5e:	e7f6      	b.n	8004b4e <_dtoa_r+0x8c6>
 8004b60:	4698      	mov	r8, r3
 8004b62:	e7f4      	b.n	8004b4e <_dtoa_r+0x8c6>
 8004b64:	d080      	beq.n	8004a68 <_dtoa_r+0x7e0>
 8004b66:	9a05      	ldr	r2, [sp, #20]
 8004b68:	331c      	adds	r3, #28
 8004b6a:	441a      	add	r2, r3
 8004b6c:	9205      	str	r2, [sp, #20]
 8004b6e:	9a06      	ldr	r2, [sp, #24]
 8004b70:	441a      	add	r2, r3
 8004b72:	441d      	add	r5, r3
 8004b74:	4613      	mov	r3, r2
 8004b76:	e776      	b.n	8004a66 <_dtoa_r+0x7de>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	e7f4      	b.n	8004b66 <_dtoa_r+0x8de>
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dc36      	bgt.n	8004bf0 <_dtoa_r+0x968>
 8004b82:	9b07      	ldr	r3, [sp, #28]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	dd33      	ble.n	8004bf0 <_dtoa_r+0x968>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	9304      	str	r3, [sp, #16]
 8004b8c:	9b04      	ldr	r3, [sp, #16]
 8004b8e:	b963      	cbnz	r3, 8004baa <_dtoa_r+0x922>
 8004b90:	4631      	mov	r1, r6
 8004b92:	2205      	movs	r2, #5
 8004b94:	4620      	mov	r0, r4
 8004b96:	f000 ff12 	bl	80059be <__multadd>
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	f001 f8cb 	bl	8005d3a <__mcmp>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	f73f adb6 	bgt.w	8004716 <_dtoa_r+0x48e>
 8004baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bac:	9d02      	ldr	r5, [sp, #8]
 8004bae:	ea6f 0b03 	mvn.w	fp, r3
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f000 fee9 	bl	8005990 <_Bfree>
 8004bbe:	2f00      	cmp	r7, #0
 8004bc0:	f43f aea6 	beq.w	8004910 <_dtoa_r+0x688>
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	b12b      	cbz	r3, 8004bd4 <_dtoa_r+0x94c>
 8004bc8:	42bb      	cmp	r3, r7
 8004bca:	d003      	beq.n	8004bd4 <_dtoa_r+0x94c>
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f000 fede 	bl	8005990 <_Bfree>
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f000 feda 	bl	8005990 <_Bfree>
 8004bdc:	e698      	b.n	8004910 <_dtoa_r+0x688>
 8004bde:	2600      	movs	r6, #0
 8004be0:	4637      	mov	r7, r6
 8004be2:	e7e2      	b.n	8004baa <_dtoa_r+0x922>
 8004be4:	46bb      	mov	fp, r7
 8004be6:	4637      	mov	r7, r6
 8004be8:	e595      	b.n	8004716 <_dtoa_r+0x48e>
 8004bea:	bf00      	nop
 8004bec:	40240000 	.word	0x40240000
 8004bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf2:	bb93      	cbnz	r3, 8004c5a <_dtoa_r+0x9d2>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	9d02      	ldr	r5, [sp, #8]
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4650      	mov	r0, sl
 8004bfe:	f7ff fab5 	bl	800416c <quorem>
 8004c02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c06:	f805 9b01 	strb.w	r9, [r5], #1
 8004c0a:	9b02      	ldr	r3, [sp, #8]
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	1aeb      	subs	r3, r5, r3
 8004c10:	429a      	cmp	r2, r3
 8004c12:	f300 80dc 	bgt.w	8004dce <_dtoa_r+0xb46>
 8004c16:	9b02      	ldr	r3, [sp, #8]
 8004c18:	2a01      	cmp	r2, #1
 8004c1a:	bfac      	ite	ge
 8004c1c:	189b      	addge	r3, r3, r2
 8004c1e:	3301      	addlt	r3, #1
 8004c20:	4698      	mov	r8, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	9303      	str	r3, [sp, #12]
 8004c26:	4651      	mov	r1, sl
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f001 f834 	bl	8005c98 <__lshift>
 8004c30:	4631      	mov	r1, r6
 8004c32:	4682      	mov	sl, r0
 8004c34:	f001 f881 	bl	8005d3a <__mcmp>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f300 808d 	bgt.w	8004d58 <_dtoa_r+0xad0>
 8004c3e:	d103      	bne.n	8004c48 <_dtoa_r+0x9c0>
 8004c40:	f019 0f01 	tst.w	r9, #1
 8004c44:	f040 8088 	bne.w	8004d58 <_dtoa_r+0xad0>
 8004c48:	4645      	mov	r5, r8
 8004c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	f105 32ff 	add.w	r2, r5, #4294967295
 8004c54:	d1af      	bne.n	8004bb6 <_dtoa_r+0x92e>
 8004c56:	4615      	mov	r5, r2
 8004c58:	e7f7      	b.n	8004c4a <_dtoa_r+0x9c2>
 8004c5a:	9b03      	ldr	r3, [sp, #12]
 8004c5c:	9304      	str	r3, [sp, #16]
 8004c5e:	2d00      	cmp	r5, #0
 8004c60:	dd05      	ble.n	8004c6e <_dtoa_r+0x9e6>
 8004c62:	4639      	mov	r1, r7
 8004c64:	462a      	mov	r2, r5
 8004c66:	4620      	mov	r0, r4
 8004c68:	f001 f816 	bl	8005c98 <__lshift>
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	f1b8 0f00 	cmp.w	r8, #0
 8004c72:	d04c      	beq.n	8004d0e <_dtoa_r+0xa86>
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 fe56 	bl	8005928 <_Balloc>
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	3202      	adds	r2, #2
 8004c80:	4605      	mov	r5, r0
 8004c82:	0092      	lsls	r2, r2, #2
 8004c84:	f107 010c 	add.w	r1, r7, #12
 8004c88:	300c      	adds	r0, #12
 8004c8a:	f000 fe35 	bl	80058f8 <memcpy>
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4629      	mov	r1, r5
 8004c92:	4620      	mov	r0, r4
 8004c94:	f001 f800 	bl	8005c98 <__lshift>
 8004c98:	9b00      	ldr	r3, [sp, #0]
 8004c9a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004c9e:	9703      	str	r7, [sp, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	9305      	str	r3, [sp, #20]
 8004ca8:	4631      	mov	r1, r6
 8004caa:	4650      	mov	r0, sl
 8004cac:	f7ff fa5e 	bl	800416c <quorem>
 8004cb0:	9903      	ldr	r1, [sp, #12]
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cb8:	4650      	mov	r0, sl
 8004cba:	f001 f83e 	bl	8005d3a <__mcmp>
 8004cbe:	463a      	mov	r2, r7
 8004cc0:	9000      	str	r0, [sp, #0]
 8004cc2:	4631      	mov	r1, r6
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f001 f852 	bl	8005d6e <__mdiff>
 8004cca:	68c3      	ldr	r3, [r0, #12]
 8004ccc:	4602      	mov	r2, r0
 8004cce:	bb03      	cbnz	r3, 8004d12 <_dtoa_r+0xa8a>
 8004cd0:	4601      	mov	r1, r0
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	4650      	mov	r0, sl
 8004cd6:	f001 f830 	bl	8005d3a <__mcmp>
 8004cda:	9a06      	ldr	r2, [sp, #24]
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	9306      	str	r3, [sp, #24]
 8004ce4:	f000 fe54 	bl	8005990 <_Bfree>
 8004ce8:	9b06      	ldr	r3, [sp, #24]
 8004cea:	b9a3      	cbnz	r3, 8004d16 <_dtoa_r+0xa8e>
 8004cec:	9a07      	ldr	r2, [sp, #28]
 8004cee:	b992      	cbnz	r2, 8004d16 <_dtoa_r+0xa8e>
 8004cf0:	9a05      	ldr	r2, [sp, #20]
 8004cf2:	b982      	cbnz	r2, 8004d16 <_dtoa_r+0xa8e>
 8004cf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cf8:	d029      	beq.n	8004d4e <_dtoa_r+0xac6>
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dd01      	ble.n	8004d04 <_dtoa_r+0xa7c>
 8004d00:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004d04:	f108 0501 	add.w	r5, r8, #1
 8004d08:	f888 9000 	strb.w	r9, [r8]
 8004d0c:	e753      	b.n	8004bb6 <_dtoa_r+0x92e>
 8004d0e:	4638      	mov	r0, r7
 8004d10:	e7c2      	b.n	8004c98 <_dtoa_r+0xa10>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e7e3      	b.n	8004cde <_dtoa_r+0xa56>
 8004d16:	9a00      	ldr	r2, [sp, #0]
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	db04      	blt.n	8004d26 <_dtoa_r+0xa9e>
 8004d1c:	d125      	bne.n	8004d6a <_dtoa_r+0xae2>
 8004d1e:	9a07      	ldr	r2, [sp, #28]
 8004d20:	bb1a      	cbnz	r2, 8004d6a <_dtoa_r+0xae2>
 8004d22:	9a05      	ldr	r2, [sp, #20]
 8004d24:	bb0a      	cbnz	r2, 8004d6a <_dtoa_r+0xae2>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	ddec      	ble.n	8004d04 <_dtoa_r+0xa7c>
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 ffb2 	bl	8005c98 <__lshift>
 8004d34:	4631      	mov	r1, r6
 8004d36:	4682      	mov	sl, r0
 8004d38:	f000 ffff 	bl	8005d3a <__mcmp>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	dc03      	bgt.n	8004d48 <_dtoa_r+0xac0>
 8004d40:	d1e0      	bne.n	8004d04 <_dtoa_r+0xa7c>
 8004d42:	f019 0f01 	tst.w	r9, #1
 8004d46:	d0dd      	beq.n	8004d04 <_dtoa_r+0xa7c>
 8004d48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d4c:	d1d8      	bne.n	8004d00 <_dtoa_r+0xa78>
 8004d4e:	2339      	movs	r3, #57	; 0x39
 8004d50:	f888 3000 	strb.w	r3, [r8]
 8004d54:	f108 0801 	add.w	r8, r8, #1
 8004d58:	4645      	mov	r5, r8
 8004d5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d5e:	2b39      	cmp	r3, #57	; 0x39
 8004d60:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d64:	d03b      	beq.n	8004dde <_dtoa_r+0xb56>
 8004d66:	3301      	adds	r3, #1
 8004d68:	e040      	b.n	8004dec <_dtoa_r+0xb64>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f108 0501 	add.w	r5, r8, #1
 8004d70:	dd05      	ble.n	8004d7e <_dtoa_r+0xaf6>
 8004d72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d76:	d0ea      	beq.n	8004d4e <_dtoa_r+0xac6>
 8004d78:	f109 0901 	add.w	r9, r9, #1
 8004d7c:	e7c4      	b.n	8004d08 <_dtoa_r+0xa80>
 8004d7e:	9b02      	ldr	r3, [sp, #8]
 8004d80:	9a04      	ldr	r2, [sp, #16]
 8004d82:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004d86:	1aeb      	subs	r3, r5, r3
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	46a8      	mov	r8, r5
 8004d8c:	f43f af4b 	beq.w	8004c26 <_dtoa_r+0x99e>
 8004d90:	4651      	mov	r1, sl
 8004d92:	2300      	movs	r3, #0
 8004d94:	220a      	movs	r2, #10
 8004d96:	4620      	mov	r0, r4
 8004d98:	f000 fe11 	bl	80059be <__multadd>
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	9903      	ldr	r1, [sp, #12]
 8004da0:	42bb      	cmp	r3, r7
 8004da2:	4682      	mov	sl, r0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	f04f 020a 	mov.w	r2, #10
 8004dac:	4620      	mov	r0, r4
 8004dae:	d104      	bne.n	8004dba <_dtoa_r+0xb32>
 8004db0:	f000 fe05 	bl	80059be <__multadd>
 8004db4:	9003      	str	r0, [sp, #12]
 8004db6:	4607      	mov	r7, r0
 8004db8:	e776      	b.n	8004ca8 <_dtoa_r+0xa20>
 8004dba:	f000 fe00 	bl	80059be <__multadd>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	9003      	str	r0, [sp, #12]
 8004dc2:	220a      	movs	r2, #10
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f000 fdf9 	bl	80059be <__multadd>
 8004dcc:	e7f3      	b.n	8004db6 <_dtoa_r+0xb2e>
 8004dce:	4651      	mov	r1, sl
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	f000 fdf2 	bl	80059be <__multadd>
 8004dda:	4682      	mov	sl, r0
 8004ddc:	e70d      	b.n	8004bfa <_dtoa_r+0x972>
 8004dde:	9b02      	ldr	r3, [sp, #8]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d105      	bne.n	8004df0 <_dtoa_r+0xb68>
 8004de4:	9a02      	ldr	r2, [sp, #8]
 8004de6:	f10b 0b01 	add.w	fp, fp, #1
 8004dea:	2331      	movs	r3, #49	; 0x31
 8004dec:	7013      	strb	r3, [r2, #0]
 8004dee:	e6e2      	b.n	8004bb6 <_dtoa_r+0x92e>
 8004df0:	4615      	mov	r5, r2
 8004df2:	e7b2      	b.n	8004d5a <_dtoa_r+0xad2>
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <_dtoa_r+0xb94>)
 8004df6:	f7ff baae 	b.w	8004356 <_dtoa_r+0xce>
 8004dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f47f aa88 	bne.w	8004312 <_dtoa_r+0x8a>
 8004e02:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <_dtoa_r+0xb98>)
 8004e04:	f7ff baa7 	b.w	8004356 <_dtoa_r+0xce>
 8004e08:	9b04      	ldr	r3, [sp, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f73f aef4 	bgt.w	8004bf8 <_dtoa_r+0x970>
 8004e10:	9b07      	ldr	r3, [sp, #28]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	f77f aef0 	ble.w	8004bf8 <_dtoa_r+0x970>
 8004e18:	e6b8      	b.n	8004b8c <_dtoa_r+0x904>
 8004e1a:	bf00      	nop
 8004e1c:	08006a9e 	.word	0x08006a9e
 8004e20:	08006ac0 	.word	0x08006ac0

08004e24 <__sflush_r>:
 8004e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e28:	b293      	uxth	r3, r2
 8004e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e2e:	4605      	mov	r5, r0
 8004e30:	0718      	lsls	r0, r3, #28
 8004e32:	460c      	mov	r4, r1
 8004e34:	d461      	bmi.n	8004efa <__sflush_r+0xd6>
 8004e36:	684b      	ldr	r3, [r1, #4]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	818a      	strh	r2, [r1, #12]
 8004e40:	dc05      	bgt.n	8004e4e <__sflush_r+0x2a>
 8004e42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	dc02      	bgt.n	8004e4e <__sflush_r+0x2a>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e50:	2e00      	cmp	r6, #0
 8004e52:	d0f9      	beq.n	8004e48 <__sflush_r+0x24>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e5a:	682f      	ldr	r7, [r5, #0]
 8004e5c:	602b      	str	r3, [r5, #0]
 8004e5e:	d037      	beq.n	8004ed0 <__sflush_r+0xac>
 8004e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	075a      	lsls	r2, r3, #29
 8004e66:	d505      	bpl.n	8004e74 <__sflush_r+0x50>
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	1ac0      	subs	r0, r0, r3
 8004e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e6e:	b10b      	cbz	r3, 8004e74 <__sflush_r+0x50>
 8004e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e72:	1ac0      	subs	r0, r0, r3
 8004e74:	2300      	movs	r3, #0
 8004e76:	4602      	mov	r2, r0
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	6a21      	ldr	r1, [r4, #32]
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b0      	blx	r6
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	d106      	bne.n	8004e94 <__sflush_r+0x70>
 8004e86:	6829      	ldr	r1, [r5, #0]
 8004e88:	291d      	cmp	r1, #29
 8004e8a:	d84f      	bhi.n	8004f2c <__sflush_r+0x108>
 8004e8c:	4a2d      	ldr	r2, [pc, #180]	; (8004f44 <__sflush_r+0x120>)
 8004e8e:	40ca      	lsrs	r2, r1
 8004e90:	07d6      	lsls	r6, r2, #31
 8004e92:	d54b      	bpl.n	8004f2c <__sflush_r+0x108>
 8004e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	6062      	str	r2, [r4, #4]
 8004e9e:	04d9      	lsls	r1, r3, #19
 8004ea0:	6922      	ldr	r2, [r4, #16]
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	6022      	str	r2, [r4, #0]
 8004ea6:	d504      	bpl.n	8004eb2 <__sflush_r+0x8e>
 8004ea8:	1c42      	adds	r2, r0, #1
 8004eaa:	d101      	bne.n	8004eb0 <__sflush_r+0x8c>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b903      	cbnz	r3, 8004eb2 <__sflush_r+0x8e>
 8004eb0:	6560      	str	r0, [r4, #84]	; 0x54
 8004eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eb4:	602f      	str	r7, [r5, #0]
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	d0c6      	beq.n	8004e48 <__sflush_r+0x24>
 8004eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ebe:	4299      	cmp	r1, r3
 8004ec0:	d002      	beq.n	8004ec8 <__sflush_r+0xa4>
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f000 f9aa 	bl	800521c <_free_r>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	6360      	str	r0, [r4, #52]	; 0x34
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed0:	6a21      	ldr	r1, [r4, #32]
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	1c41      	adds	r1, r0, #1
 8004eda:	d1c2      	bne.n	8004e62 <__sflush_r+0x3e>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0bf      	beq.n	8004e62 <__sflush_r+0x3e>
 8004ee2:	2b1d      	cmp	r3, #29
 8004ee4:	d001      	beq.n	8004eea <__sflush_r+0xc6>
 8004ee6:	2b16      	cmp	r3, #22
 8004ee8:	d101      	bne.n	8004eee <__sflush_r+0xca>
 8004eea:	602f      	str	r7, [r5, #0]
 8004eec:	e7ac      	b.n	8004e48 <__sflush_r+0x24>
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004efa:	690f      	ldr	r7, [r1, #16]
 8004efc:	2f00      	cmp	r7, #0
 8004efe:	d0a3      	beq.n	8004e48 <__sflush_r+0x24>
 8004f00:	079b      	lsls	r3, r3, #30
 8004f02:	680e      	ldr	r6, [r1, #0]
 8004f04:	bf08      	it	eq
 8004f06:	694b      	ldreq	r3, [r1, #20]
 8004f08:	600f      	str	r7, [r1, #0]
 8004f0a:	bf18      	it	ne
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	eba6 0807 	sub.w	r8, r6, r7
 8004f12:	608b      	str	r3, [r1, #8]
 8004f14:	f1b8 0f00 	cmp.w	r8, #0
 8004f18:	dd96      	ble.n	8004e48 <__sflush_r+0x24>
 8004f1a:	4643      	mov	r3, r8
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	6a21      	ldr	r1, [r4, #32]
 8004f20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f22:	4628      	mov	r0, r5
 8004f24:	47b0      	blx	r6
 8004f26:	2800      	cmp	r0, #0
 8004f28:	dc07      	bgt.n	8004f3a <__sflush_r+0x116>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	f04f 30ff 	mov.w	r0, #4294967295
 8004f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f3a:	4407      	add	r7, r0
 8004f3c:	eba8 0800 	sub.w	r8, r8, r0
 8004f40:	e7e8      	b.n	8004f14 <__sflush_r+0xf0>
 8004f42:	bf00      	nop
 8004f44:	20400001 	.word	0x20400001

08004f48 <_fflush_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	690b      	ldr	r3, [r1, #16]
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	460c      	mov	r4, r1
 8004f50:	b913      	cbnz	r3, 8004f58 <_fflush_r+0x10>
 8004f52:	2500      	movs	r5, #0
 8004f54:	4628      	mov	r0, r5
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	b118      	cbz	r0, 8004f62 <_fflush_r+0x1a>
 8004f5a:	6983      	ldr	r3, [r0, #24]
 8004f5c:	b90b      	cbnz	r3, 8004f62 <_fflush_r+0x1a>
 8004f5e:	f000 f887 	bl	8005070 <__sinit>
 8004f62:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <_fflush_r+0x6c>)
 8004f64:	429c      	cmp	r4, r3
 8004f66:	d11b      	bne.n	8004fa0 <_fflush_r+0x58>
 8004f68:	686c      	ldr	r4, [r5, #4]
 8004f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0ef      	beq.n	8004f52 <_fflush_r+0xa>
 8004f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f74:	07d0      	lsls	r0, r2, #31
 8004f76:	d404      	bmi.n	8004f82 <_fflush_r+0x3a>
 8004f78:	0599      	lsls	r1, r3, #22
 8004f7a:	d402      	bmi.n	8004f82 <_fflush_r+0x3a>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7e:	f000 fa37 	bl	80053f0 <__retarget_lock_acquire_recursive>
 8004f82:	4628      	mov	r0, r5
 8004f84:	4621      	mov	r1, r4
 8004f86:	f7ff ff4d 	bl	8004e24 <__sflush_r>
 8004f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f8c:	07da      	lsls	r2, r3, #31
 8004f8e:	4605      	mov	r5, r0
 8004f90:	d4e0      	bmi.n	8004f54 <_fflush_r+0xc>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	059b      	lsls	r3, r3, #22
 8004f96:	d4dd      	bmi.n	8004f54 <_fflush_r+0xc>
 8004f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f9a:	f000 fa2a 	bl	80053f2 <__retarget_lock_release_recursive>
 8004f9e:	e7d9      	b.n	8004f54 <_fflush_r+0xc>
 8004fa0:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <_fflush_r+0x70>)
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	d101      	bne.n	8004faa <_fflush_r+0x62>
 8004fa6:	68ac      	ldr	r4, [r5, #8]
 8004fa8:	e7df      	b.n	8004f6a <_fflush_r+0x22>
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <_fflush_r+0x74>)
 8004fac:	429c      	cmp	r4, r3
 8004fae:	bf08      	it	eq
 8004fb0:	68ec      	ldreq	r4, [r5, #12]
 8004fb2:	e7da      	b.n	8004f6a <_fflush_r+0x22>
 8004fb4:	08006af0 	.word	0x08006af0
 8004fb8:	08006b10 	.word	0x08006b10
 8004fbc:	08006ad0 	.word	0x08006ad0

08004fc0 <_cleanup_r>:
 8004fc0:	4901      	ldr	r1, [pc, #4]	; (8004fc8 <_cleanup_r+0x8>)
 8004fc2:	f000 b9e7 	b.w	8005394 <_fwalk_reent>
 8004fc6:	bf00      	nop
 8004fc8:	08006079 	.word	0x08006079

08004fcc <std.isra.0>:
 8004fcc:	2300      	movs	r3, #0
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	6003      	str	r3, [r0, #0]
 8004fd4:	6043      	str	r3, [r0, #4]
 8004fd6:	6083      	str	r3, [r0, #8]
 8004fd8:	8181      	strh	r1, [r0, #12]
 8004fda:	6643      	str	r3, [r0, #100]	; 0x64
 8004fdc:	81c2      	strh	r2, [r0, #14]
 8004fde:	6103      	str	r3, [r0, #16]
 8004fe0:	6143      	str	r3, [r0, #20]
 8004fe2:	6183      	str	r3, [r0, #24]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	305c      	adds	r0, #92	; 0x5c
 8004fea:	f7fd ffb3 	bl	8002f54 <memset>
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <std.isra.0+0x38>)
 8004ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ff2:	4b05      	ldr	r3, [pc, #20]	; (8005008 <std.isra.0+0x3c>)
 8004ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ff6:	4b05      	ldr	r3, [pc, #20]	; (800500c <std.isra.0+0x40>)
 8004ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std.isra.0+0x44>)
 8004ffc:	6224      	str	r4, [r4, #32]
 8004ffe:	6323      	str	r3, [r4, #48]	; 0x30
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	08005ee9 	.word	0x08005ee9
 8005008:	08005f0b 	.word	0x08005f0b
 800500c:	08005f43 	.word	0x08005f43
 8005010:	08005f67 	.word	0x08005f67

08005014 <__sfmoreglue>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	1e4a      	subs	r2, r1, #1
 8005018:	2568      	movs	r5, #104	; 0x68
 800501a:	4355      	muls	r5, r2
 800501c:	460e      	mov	r6, r1
 800501e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005022:	f000 fa5b 	bl	80054dc <_malloc_r>
 8005026:	4604      	mov	r4, r0
 8005028:	b140      	cbz	r0, 800503c <__sfmoreglue+0x28>
 800502a:	2100      	movs	r1, #0
 800502c:	e880 0042 	stmia.w	r0, {r1, r6}
 8005030:	300c      	adds	r0, #12
 8005032:	60a0      	str	r0, [r4, #8]
 8005034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005038:	f7fd ff8c 	bl	8002f54 <memset>
 800503c:	4620      	mov	r0, r4
 800503e:	bd70      	pop	{r4, r5, r6, pc}

08005040 <__sfp_lock_acquire>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__sfp_lock_acquire+0x8>)
 8005042:	f000 b9d5 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	20000ab8 	.word	0x20000ab8

0800504c <__sfp_lock_release>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__sfp_lock_release+0x8>)
 800504e:	f000 b9d0 	b.w	80053f2 <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	20000ab8 	.word	0x20000ab8

08005058 <__sinit_lock_acquire>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sinit_lock_acquire+0x8>)
 800505a:	f000 b9c9 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	20000ab3 	.word	0x20000ab3

08005064 <__sinit_lock_release>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sinit_lock_release+0x8>)
 8005066:	f000 b9c4 	b.w	80053f2 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	20000ab3 	.word	0x20000ab3

08005070 <__sinit>:
 8005070:	b510      	push	{r4, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	f7ff fff0 	bl	8005058 <__sinit_lock_acquire>
 8005078:	69a3      	ldr	r3, [r4, #24]
 800507a:	b11b      	cbz	r3, 8005084 <__sinit+0x14>
 800507c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005080:	f7ff bff0 	b.w	8005064 <__sinit_lock_release>
 8005084:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005088:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800508c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005090:	4b12      	ldr	r3, [pc, #72]	; (80050dc <__sinit+0x6c>)
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <__sinit+0x70>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	62a2      	str	r2, [r4, #40]	; 0x28
 8005098:	429c      	cmp	r4, r3
 800509a:	bf04      	itt	eq
 800509c:	2301      	moveq	r3, #1
 800509e:	61a3      	streq	r3, [r4, #24]
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 f81f 	bl	80050e4 <__sfp>
 80050a6:	6060      	str	r0, [r4, #4]
 80050a8:	4620      	mov	r0, r4
 80050aa:	f000 f81b 	bl	80050e4 <__sfp>
 80050ae:	60a0      	str	r0, [r4, #8]
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 f817 	bl	80050e4 <__sfp>
 80050b6:	2200      	movs	r2, #0
 80050b8:	60e0      	str	r0, [r4, #12]
 80050ba:	2104      	movs	r1, #4
 80050bc:	6860      	ldr	r0, [r4, #4]
 80050be:	f7ff ff85 	bl	8004fcc <std.isra.0>
 80050c2:	2201      	movs	r2, #1
 80050c4:	2109      	movs	r1, #9
 80050c6:	68a0      	ldr	r0, [r4, #8]
 80050c8:	f7ff ff80 	bl	8004fcc <std.isra.0>
 80050cc:	2202      	movs	r2, #2
 80050ce:	2112      	movs	r1, #18
 80050d0:	68e0      	ldr	r0, [r4, #12]
 80050d2:	f7ff ff7b 	bl	8004fcc <std.isra.0>
 80050d6:	2301      	movs	r3, #1
 80050d8:	61a3      	str	r3, [r4, #24]
 80050da:	e7cf      	b.n	800507c <__sinit+0xc>
 80050dc:	08006a68 	.word	0x08006a68
 80050e0:	08004fc1 	.word	0x08004fc1

080050e4 <__sfp>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	4607      	mov	r7, r0
 80050e8:	f7ff ffaa 	bl	8005040 <__sfp_lock_acquire>
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <__sfp+0x88>)
 80050ee:	681e      	ldr	r6, [r3, #0]
 80050f0:	69b3      	ldr	r3, [r6, #24]
 80050f2:	b913      	cbnz	r3, 80050fa <__sfp+0x16>
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7ff ffbb 	bl	8005070 <__sinit>
 80050fa:	36d8      	adds	r6, #216	; 0xd8
 80050fc:	68b4      	ldr	r4, [r6, #8]
 80050fe:	6873      	ldr	r3, [r6, #4]
 8005100:	3b01      	subs	r3, #1
 8005102:	d503      	bpl.n	800510c <__sfp+0x28>
 8005104:	6833      	ldr	r3, [r6, #0]
 8005106:	b133      	cbz	r3, 8005116 <__sfp+0x32>
 8005108:	6836      	ldr	r6, [r6, #0]
 800510a:	e7f7      	b.n	80050fc <__sfp+0x18>
 800510c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005110:	b17d      	cbz	r5, 8005132 <__sfp+0x4e>
 8005112:	3468      	adds	r4, #104	; 0x68
 8005114:	e7f4      	b.n	8005100 <__sfp+0x1c>
 8005116:	2104      	movs	r1, #4
 8005118:	4638      	mov	r0, r7
 800511a:	f7ff ff7b 	bl	8005014 <__sfmoreglue>
 800511e:	4604      	mov	r4, r0
 8005120:	6030      	str	r0, [r6, #0]
 8005122:	2800      	cmp	r0, #0
 8005124:	d1f0      	bne.n	8005108 <__sfp+0x24>
 8005126:	f7ff ff91 	bl	800504c <__sfp_lock_release>
 800512a:	230c      	movs	r3, #12
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4620      	mov	r0, r4
 8005130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005136:	81e3      	strh	r3, [r4, #14]
 8005138:	2301      	movs	r3, #1
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005140:	6665      	str	r5, [r4, #100]	; 0x64
 8005142:	f000 f953 	bl	80053ec <__retarget_lock_init_recursive>
 8005146:	f7ff ff81 	bl	800504c <__sfp_lock_release>
 800514a:	6025      	str	r5, [r4, #0]
 800514c:	60a5      	str	r5, [r4, #8]
 800514e:	6065      	str	r5, [r4, #4]
 8005150:	6125      	str	r5, [r4, #16]
 8005152:	6165      	str	r5, [r4, #20]
 8005154:	61a5      	str	r5, [r4, #24]
 8005156:	2208      	movs	r2, #8
 8005158:	4629      	mov	r1, r5
 800515a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800515e:	f7fd fef9 	bl	8002f54 <memset>
 8005162:	6365      	str	r5, [r4, #52]	; 0x34
 8005164:	63a5      	str	r5, [r4, #56]	; 0x38
 8005166:	64a5      	str	r5, [r4, #72]	; 0x48
 8005168:	64e5      	str	r5, [r4, #76]	; 0x4c
 800516a:	e7e0      	b.n	800512e <__sfp+0x4a>
 800516c:	08006a68 	.word	0x08006a68

08005170 <_malloc_trim_r>:
 8005170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005174:	4f25      	ldr	r7, [pc, #148]	; (800520c <_malloc_trim_r+0x9c>)
 8005176:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005218 <_malloc_trim_r+0xa8>
 800517a:	4689      	mov	r9, r1
 800517c:	4606      	mov	r6, r0
 800517e:	f000 fbc7 	bl	8005910 <__malloc_lock>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	685d      	ldr	r5, [r3, #4]
 8005186:	f1a8 0411 	sub.w	r4, r8, #17
 800518a:	f025 0503 	bic.w	r5, r5, #3
 800518e:	eba4 0409 	sub.w	r4, r4, r9
 8005192:	442c      	add	r4, r5
 8005194:	fbb4 f4f8 	udiv	r4, r4, r8
 8005198:	3c01      	subs	r4, #1
 800519a:	fb08 f404 	mul.w	r4, r8, r4
 800519e:	4544      	cmp	r4, r8
 80051a0:	da05      	bge.n	80051ae <_malloc_trim_r+0x3e>
 80051a2:	4630      	mov	r0, r6
 80051a4:	f000 fbba 	bl	800591c <__malloc_unlock>
 80051a8:	2000      	movs	r0, #0
 80051aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ae:	2100      	movs	r1, #0
 80051b0:	4630      	mov	r0, r6
 80051b2:	f000 fe89 	bl	8005ec8 <_sbrk_r>
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	442b      	add	r3, r5
 80051ba:	4298      	cmp	r0, r3
 80051bc:	d1f1      	bne.n	80051a2 <_malloc_trim_r+0x32>
 80051be:	4261      	negs	r1, r4
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 fe81 	bl	8005ec8 <_sbrk_r>
 80051c6:	3001      	adds	r0, #1
 80051c8:	d110      	bne.n	80051ec <_malloc_trim_r+0x7c>
 80051ca:	2100      	movs	r1, #0
 80051cc:	4630      	mov	r0, r6
 80051ce:	f000 fe7b 	bl	8005ec8 <_sbrk_r>
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	1a83      	subs	r3, r0, r2
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	dde3      	ble.n	80051a2 <_malloc_trim_r+0x32>
 80051da:	490d      	ldr	r1, [pc, #52]	; (8005210 <_malloc_trim_r+0xa0>)
 80051dc:	6809      	ldr	r1, [r1, #0]
 80051de:	1a40      	subs	r0, r0, r1
 80051e0:	490c      	ldr	r1, [pc, #48]	; (8005214 <_malloc_trim_r+0xa4>)
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	6008      	str	r0, [r1, #0]
 80051e8:	6053      	str	r3, [r2, #4]
 80051ea:	e7da      	b.n	80051a2 <_malloc_trim_r+0x32>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4a09      	ldr	r2, [pc, #36]	; (8005214 <_malloc_trim_r+0xa4>)
 80051f0:	1b2d      	subs	r5, r5, r4
 80051f2:	f045 0501 	orr.w	r5, r5, #1
 80051f6:	605d      	str	r5, [r3, #4]
 80051f8:	6813      	ldr	r3, [r2, #0]
 80051fa:	4630      	mov	r0, r6
 80051fc:	1b1c      	subs	r4, r3, r4
 80051fe:	6014      	str	r4, [r2, #0]
 8005200:	f000 fb8c 	bl	800591c <__malloc_unlock>
 8005204:	2001      	movs	r0, #1
 8005206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800520a:	bf00      	nop
 800520c:	20000100 	.word	0x20000100
 8005210:	20000508 	.word	0x20000508
 8005214:	200006a4 	.word	0x200006a4
 8005218:	00000080 	.word	0x00000080

0800521c <_free_r>:
 800521c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005220:	4604      	mov	r4, r0
 8005222:	4688      	mov	r8, r1
 8005224:	2900      	cmp	r1, #0
 8005226:	f000 80ab 	beq.w	8005380 <_free_r+0x164>
 800522a:	f000 fb71 	bl	8005910 <__malloc_lock>
 800522e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005232:	4d54      	ldr	r5, [pc, #336]	; (8005384 <_free_r+0x168>)
 8005234:	f022 0001 	bic.w	r0, r2, #1
 8005238:	f1a8 0308 	sub.w	r3, r8, #8
 800523c:	181f      	adds	r7, r3, r0
 800523e:	68a9      	ldr	r1, [r5, #8]
 8005240:	687e      	ldr	r6, [r7, #4]
 8005242:	428f      	cmp	r7, r1
 8005244:	f026 0603 	bic.w	r6, r6, #3
 8005248:	f002 0201 	and.w	r2, r2, #1
 800524c:	d11b      	bne.n	8005286 <_free_r+0x6a>
 800524e:	4430      	add	r0, r6
 8005250:	b93a      	cbnz	r2, 8005262 <_free_r+0x46>
 8005252:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	4410      	add	r0, r2
 800525a:	6899      	ldr	r1, [r3, #8]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	60ca      	str	r2, [r1, #12]
 8005260:	6091      	str	r1, [r2, #8]
 8005262:	f040 0201 	orr.w	r2, r0, #1
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	60ab      	str	r3, [r5, #8]
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <_free_r+0x16c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4298      	cmp	r0, r3
 8005270:	d304      	bcc.n	800527c <_free_r+0x60>
 8005272:	4b46      	ldr	r3, [pc, #280]	; (800538c <_free_r+0x170>)
 8005274:	4620      	mov	r0, r4
 8005276:	6819      	ldr	r1, [r3, #0]
 8005278:	f7ff ff7a 	bl	8005170 <_malloc_trim_r>
 800527c:	4620      	mov	r0, r4
 800527e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005282:	f000 bb4b 	b.w	800591c <__malloc_unlock>
 8005286:	607e      	str	r6, [r7, #4]
 8005288:	2a00      	cmp	r2, #0
 800528a:	d139      	bne.n	8005300 <_free_r+0xe4>
 800528c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005290:	1a5b      	subs	r3, r3, r1
 8005292:	4408      	add	r0, r1
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	f105 0e08 	add.w	lr, r5, #8
 800529a:	4571      	cmp	r1, lr
 800529c:	d032      	beq.n	8005304 <_free_r+0xe8>
 800529e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80052a2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80052a6:	f8ce 1008 	str.w	r1, [lr, #8]
 80052aa:	19b9      	adds	r1, r7, r6
 80052ac:	6849      	ldr	r1, [r1, #4]
 80052ae:	07c9      	lsls	r1, r1, #31
 80052b0:	d40a      	bmi.n	80052c8 <_free_r+0xac>
 80052b2:	4430      	add	r0, r6
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	bb3a      	cbnz	r2, 8005308 <_free_r+0xec>
 80052b8:	4e35      	ldr	r6, [pc, #212]	; (8005390 <_free_r+0x174>)
 80052ba:	42b1      	cmp	r1, r6
 80052bc:	d124      	bne.n	8005308 <_free_r+0xec>
 80052be:	616b      	str	r3, [r5, #20]
 80052c0:	612b      	str	r3, [r5, #16]
 80052c2:	2201      	movs	r2, #1
 80052c4:	60d9      	str	r1, [r3, #12]
 80052c6:	6099      	str	r1, [r3, #8]
 80052c8:	f040 0101 	orr.w	r1, r0, #1
 80052cc:	6059      	str	r1, [r3, #4]
 80052ce:	5018      	str	r0, [r3, r0]
 80052d0:	2a00      	cmp	r2, #0
 80052d2:	d1d3      	bne.n	800527c <_free_r+0x60>
 80052d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80052d8:	d21a      	bcs.n	8005310 <_free_r+0xf4>
 80052da:	08c0      	lsrs	r0, r0, #3
 80052dc:	1081      	asrs	r1, r0, #2
 80052de:	2201      	movs	r2, #1
 80052e0:	408a      	lsls	r2, r1
 80052e2:	6869      	ldr	r1, [r5, #4]
 80052e4:	3001      	adds	r0, #1
 80052e6:	430a      	orrs	r2, r1
 80052e8:	606a      	str	r2, [r5, #4]
 80052ea:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80052ee:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80052f2:	6099      	str	r1, [r3, #8]
 80052f4:	3a08      	subs	r2, #8
 80052f6:	60da      	str	r2, [r3, #12]
 80052f8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80052fc:	60cb      	str	r3, [r1, #12]
 80052fe:	e7bd      	b.n	800527c <_free_r+0x60>
 8005300:	2200      	movs	r2, #0
 8005302:	e7d2      	b.n	80052aa <_free_r+0x8e>
 8005304:	2201      	movs	r2, #1
 8005306:	e7d0      	b.n	80052aa <_free_r+0x8e>
 8005308:	68fe      	ldr	r6, [r7, #12]
 800530a:	60ce      	str	r6, [r1, #12]
 800530c:	60b1      	str	r1, [r6, #8]
 800530e:	e7db      	b.n	80052c8 <_free_r+0xac>
 8005310:	0a42      	lsrs	r2, r0, #9
 8005312:	2a04      	cmp	r2, #4
 8005314:	d813      	bhi.n	800533e <_free_r+0x122>
 8005316:	0982      	lsrs	r2, r0, #6
 8005318:	3238      	adds	r2, #56	; 0x38
 800531a:	1c51      	adds	r1, r2, #1
 800531c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005320:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005324:	428e      	cmp	r6, r1
 8005326:	d124      	bne.n	8005372 <_free_r+0x156>
 8005328:	2001      	movs	r0, #1
 800532a:	1092      	asrs	r2, r2, #2
 800532c:	fa00 f202 	lsl.w	r2, r0, r2
 8005330:	6868      	ldr	r0, [r5, #4]
 8005332:	4302      	orrs	r2, r0
 8005334:	606a      	str	r2, [r5, #4]
 8005336:	60de      	str	r6, [r3, #12]
 8005338:	6099      	str	r1, [r3, #8]
 800533a:	60b3      	str	r3, [r6, #8]
 800533c:	e7de      	b.n	80052fc <_free_r+0xe0>
 800533e:	2a14      	cmp	r2, #20
 8005340:	d801      	bhi.n	8005346 <_free_r+0x12a>
 8005342:	325b      	adds	r2, #91	; 0x5b
 8005344:	e7e9      	b.n	800531a <_free_r+0xfe>
 8005346:	2a54      	cmp	r2, #84	; 0x54
 8005348:	d802      	bhi.n	8005350 <_free_r+0x134>
 800534a:	0b02      	lsrs	r2, r0, #12
 800534c:	326e      	adds	r2, #110	; 0x6e
 800534e:	e7e4      	b.n	800531a <_free_r+0xfe>
 8005350:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005354:	d802      	bhi.n	800535c <_free_r+0x140>
 8005356:	0bc2      	lsrs	r2, r0, #15
 8005358:	3277      	adds	r2, #119	; 0x77
 800535a:	e7de      	b.n	800531a <_free_r+0xfe>
 800535c:	f240 5154 	movw	r1, #1364	; 0x554
 8005360:	428a      	cmp	r2, r1
 8005362:	bf9a      	itte	ls
 8005364:	0c82      	lsrls	r2, r0, #18
 8005366:	327c      	addls	r2, #124	; 0x7c
 8005368:	227e      	movhi	r2, #126	; 0x7e
 800536a:	e7d6      	b.n	800531a <_free_r+0xfe>
 800536c:	6889      	ldr	r1, [r1, #8]
 800536e:	428e      	cmp	r6, r1
 8005370:	d004      	beq.n	800537c <_free_r+0x160>
 8005372:	684a      	ldr	r2, [r1, #4]
 8005374:	f022 0203 	bic.w	r2, r2, #3
 8005378:	4290      	cmp	r0, r2
 800537a:	d3f7      	bcc.n	800536c <_free_r+0x150>
 800537c:	68ce      	ldr	r6, [r1, #12]
 800537e:	e7da      	b.n	8005336 <_free_r+0x11a>
 8005380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005384:	20000100 	.word	0x20000100
 8005388:	2000050c 	.word	0x2000050c
 800538c:	200006d4 	.word	0x200006d4
 8005390:	20000108 	.word	0x20000108

08005394 <_fwalk_reent>:
 8005394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005398:	4680      	mov	r8, r0
 800539a:	4689      	mov	r9, r1
 800539c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 80053a0:	2600      	movs	r6, #0
 80053a2:	b914      	cbnz	r4, 80053aa <_fwalk_reent+0x16>
 80053a4:	4630      	mov	r0, r6
 80053a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053aa:	68a5      	ldr	r5, [r4, #8]
 80053ac:	6867      	ldr	r7, [r4, #4]
 80053ae:	3f01      	subs	r7, #1
 80053b0:	d501      	bpl.n	80053b6 <_fwalk_reent+0x22>
 80053b2:	6824      	ldr	r4, [r4, #0]
 80053b4:	e7f5      	b.n	80053a2 <_fwalk_reent+0xe>
 80053b6:	89ab      	ldrh	r3, [r5, #12]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d907      	bls.n	80053cc <_fwalk_reent+0x38>
 80053bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c0:	3301      	adds	r3, #1
 80053c2:	d003      	beq.n	80053cc <_fwalk_reent+0x38>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4640      	mov	r0, r8
 80053c8:	47c8      	blx	r9
 80053ca:	4306      	orrs	r6, r0
 80053cc:	3568      	adds	r5, #104	; 0x68
 80053ce:	e7ee      	b.n	80053ae <_fwalk_reent+0x1a>

080053d0 <_localeconv_r>:
 80053d0:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <_localeconv_r+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6a18      	ldr	r0, [r3, #32]
 80053d6:	4b04      	ldr	r3, [pc, #16]	; (80053e8 <_localeconv_r+0x18>)
 80053d8:	2800      	cmp	r0, #0
 80053da:	bf08      	it	eq
 80053dc:	4618      	moveq	r0, r3
 80053de:	30f0      	adds	r0, #240	; 0xf0
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	20000510 	.word	0x20000510

080053ec <__retarget_lock_init_recursive>:
 80053ec:	4770      	bx	lr

080053ee <__retarget_lock_close_recursive>:
 80053ee:	4770      	bx	lr

080053f0 <__retarget_lock_acquire_recursive>:
 80053f0:	4770      	bx	lr

080053f2 <__retarget_lock_release_recursive>:
 80053f2:	4770      	bx	lr

080053f4 <__swhatbuf_r>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	460e      	mov	r6, r1
 80053f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053fc:	2900      	cmp	r1, #0
 80053fe:	b090      	sub	sp, #64	; 0x40
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	da09      	bge.n	800541a <__swhatbuf_r+0x26>
 8005406:	89b3      	ldrh	r3, [r6, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	d116      	bne.n	8005440 <__swhatbuf_r+0x4c>
 8005412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	e015      	b.n	8005446 <__swhatbuf_r+0x52>
 800541a:	aa01      	add	r2, sp, #4
 800541c:	f000 ff02 	bl	8006224 <_fstat_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	dbf0      	blt.n	8005406 <__swhatbuf_r+0x12>
 8005424:	9a02      	ldr	r2, [sp, #8]
 8005426:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800542a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800542e:	425a      	negs	r2, r3
 8005430:	415a      	adcs	r2, r3
 8005432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005436:	602a      	str	r2, [r5, #0]
 8005438:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	e002      	b.n	8005446 <__swhatbuf_r+0x52>
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	4610      	mov	r0, r2
 8005446:	b010      	add	sp, #64	; 0x40
 8005448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800544c <__smakebuf_r>:
 800544c:	898b      	ldrh	r3, [r1, #12]
 800544e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005450:	079d      	lsls	r5, r3, #30
 8005452:	4606      	mov	r6, r0
 8005454:	460c      	mov	r4, r1
 8005456:	d507      	bpl.n	8005468 <__smakebuf_r+0x1c>
 8005458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	2301      	movs	r3, #1
 8005462:	6163      	str	r3, [r4, #20]
 8005464:	b002      	add	sp, #8
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	ab01      	add	r3, sp, #4
 800546a:	466a      	mov	r2, sp
 800546c:	f7ff ffc2 	bl	80053f4 <__swhatbuf_r>
 8005470:	9900      	ldr	r1, [sp, #0]
 8005472:	4605      	mov	r5, r0
 8005474:	4630      	mov	r0, r6
 8005476:	f000 f831 	bl	80054dc <_malloc_r>
 800547a:	b948      	cbnz	r0, 8005490 <__smakebuf_r+0x44>
 800547c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005480:	059a      	lsls	r2, r3, #22
 8005482:	d4ef      	bmi.n	8005464 <__smakebuf_r+0x18>
 8005484:	f023 0303 	bic.w	r3, r3, #3
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e7e3      	b.n	8005458 <__smakebuf_r+0xc>
 8005490:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <__smakebuf_r+0x7c>)
 8005492:	62b3      	str	r3, [r6, #40]	; 0x28
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	6020      	str	r0, [r4, #0]
 8005498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	6163      	str	r3, [r4, #20]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	6120      	str	r0, [r4, #16]
 80054a6:	b15b      	cbz	r3, 80054c0 <__smakebuf_r+0x74>
 80054a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054ac:	4630      	mov	r0, r6
 80054ae:	f001 f819 	bl	80064e4 <_isatty_r>
 80054b2:	b128      	cbz	r0, 80054c0 <__smakebuf_r+0x74>
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	81a3      	strh	r3, [r4, #12]
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	431d      	orrs	r5, r3
 80054c4:	81a5      	strh	r5, [r4, #12]
 80054c6:	e7cd      	b.n	8005464 <__smakebuf_r+0x18>
 80054c8:	08004fc1 	.word	0x08004fc1

080054cc <malloc>:
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <malloc+0xc>)
 80054ce:	4601      	mov	r1, r0
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	f000 b803 	b.w	80054dc <_malloc_r>
 80054d6:	bf00      	nop
 80054d8:	2000000c 	.word	0x2000000c

080054dc <_malloc_r>:
 80054dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	f101 040b 	add.w	r4, r1, #11
 80054e4:	2c16      	cmp	r4, #22
 80054e6:	4681      	mov	r9, r0
 80054e8:	d907      	bls.n	80054fa <_malloc_r+0x1e>
 80054ea:	f034 0407 	bics.w	r4, r4, #7
 80054ee:	d505      	bpl.n	80054fc <_malloc_r+0x20>
 80054f0:	230c      	movs	r3, #12
 80054f2:	f8c9 3000 	str.w	r3, [r9]
 80054f6:	2600      	movs	r6, #0
 80054f8:	e131      	b.n	800575e <_malloc_r+0x282>
 80054fa:	2410      	movs	r4, #16
 80054fc:	428c      	cmp	r4, r1
 80054fe:	d3f7      	bcc.n	80054f0 <_malloc_r+0x14>
 8005500:	4648      	mov	r0, r9
 8005502:	f000 fa05 	bl	8005910 <__malloc_lock>
 8005506:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800550a:	4d9c      	ldr	r5, [pc, #624]	; (800577c <_malloc_r+0x2a0>)
 800550c:	d236      	bcs.n	800557c <_malloc_r+0xa0>
 800550e:	f104 0208 	add.w	r2, r4, #8
 8005512:	442a      	add	r2, r5
 8005514:	f1a2 0108 	sub.w	r1, r2, #8
 8005518:	6856      	ldr	r6, [r2, #4]
 800551a:	428e      	cmp	r6, r1
 800551c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005520:	d102      	bne.n	8005528 <_malloc_r+0x4c>
 8005522:	68d6      	ldr	r6, [r2, #12]
 8005524:	42b2      	cmp	r2, r6
 8005526:	d010      	beq.n	800554a <_malloc_r+0x6e>
 8005528:	6873      	ldr	r3, [r6, #4]
 800552a:	68f2      	ldr	r2, [r6, #12]
 800552c:	68b1      	ldr	r1, [r6, #8]
 800552e:	f023 0303 	bic.w	r3, r3, #3
 8005532:	60ca      	str	r2, [r1, #12]
 8005534:	4433      	add	r3, r6
 8005536:	6091      	str	r1, [r2, #8]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	605a      	str	r2, [r3, #4]
 8005540:	4648      	mov	r0, r9
 8005542:	f000 f9eb 	bl	800591c <__malloc_unlock>
 8005546:	3608      	adds	r6, #8
 8005548:	e109      	b.n	800575e <_malloc_r+0x282>
 800554a:	3302      	adds	r3, #2
 800554c:	4a8c      	ldr	r2, [pc, #560]	; (8005780 <_malloc_r+0x2a4>)
 800554e:	692e      	ldr	r6, [r5, #16]
 8005550:	4296      	cmp	r6, r2
 8005552:	4611      	mov	r1, r2
 8005554:	d06d      	beq.n	8005632 <_malloc_r+0x156>
 8005556:	6870      	ldr	r0, [r6, #4]
 8005558:	f020 0003 	bic.w	r0, r0, #3
 800555c:	1b07      	subs	r7, r0, r4
 800555e:	2f0f      	cmp	r7, #15
 8005560:	dd47      	ble.n	80055f2 <_malloc_r+0x116>
 8005562:	1933      	adds	r3, r6, r4
 8005564:	f044 0401 	orr.w	r4, r4, #1
 8005568:	6074      	str	r4, [r6, #4]
 800556a:	616b      	str	r3, [r5, #20]
 800556c:	612b      	str	r3, [r5, #16]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	609a      	str	r2, [r3, #8]
 8005572:	f047 0201 	orr.w	r2, r7, #1
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	5037      	str	r7, [r6, r0]
 800557a:	e7e1      	b.n	8005540 <_malloc_r+0x64>
 800557c:	0a63      	lsrs	r3, r4, #9
 800557e:	d02a      	beq.n	80055d6 <_malloc_r+0xfa>
 8005580:	2b04      	cmp	r3, #4
 8005582:	d812      	bhi.n	80055aa <_malloc_r+0xce>
 8005584:	09a3      	lsrs	r3, r4, #6
 8005586:	3338      	adds	r3, #56	; 0x38
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800558e:	f1a2 0008 	sub.w	r0, r2, #8
 8005592:	6856      	ldr	r6, [r2, #4]
 8005594:	4286      	cmp	r6, r0
 8005596:	d006      	beq.n	80055a6 <_malloc_r+0xca>
 8005598:	6872      	ldr	r2, [r6, #4]
 800559a:	f022 0203 	bic.w	r2, r2, #3
 800559e:	1b11      	subs	r1, r2, r4
 80055a0:	290f      	cmp	r1, #15
 80055a2:	dd1c      	ble.n	80055de <_malloc_r+0x102>
 80055a4:	3b01      	subs	r3, #1
 80055a6:	3301      	adds	r3, #1
 80055a8:	e7d0      	b.n	800554c <_malloc_r+0x70>
 80055aa:	2b14      	cmp	r3, #20
 80055ac:	d801      	bhi.n	80055b2 <_malloc_r+0xd6>
 80055ae:	335b      	adds	r3, #91	; 0x5b
 80055b0:	e7ea      	b.n	8005588 <_malloc_r+0xac>
 80055b2:	2b54      	cmp	r3, #84	; 0x54
 80055b4:	d802      	bhi.n	80055bc <_malloc_r+0xe0>
 80055b6:	0b23      	lsrs	r3, r4, #12
 80055b8:	336e      	adds	r3, #110	; 0x6e
 80055ba:	e7e5      	b.n	8005588 <_malloc_r+0xac>
 80055bc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80055c0:	d802      	bhi.n	80055c8 <_malloc_r+0xec>
 80055c2:	0be3      	lsrs	r3, r4, #15
 80055c4:	3377      	adds	r3, #119	; 0x77
 80055c6:	e7df      	b.n	8005588 <_malloc_r+0xac>
 80055c8:	f240 5254 	movw	r2, #1364	; 0x554
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d804      	bhi.n	80055da <_malloc_r+0xfe>
 80055d0:	0ca3      	lsrs	r3, r4, #18
 80055d2:	337c      	adds	r3, #124	; 0x7c
 80055d4:	e7d8      	b.n	8005588 <_malloc_r+0xac>
 80055d6:	233f      	movs	r3, #63	; 0x3f
 80055d8:	e7d6      	b.n	8005588 <_malloc_r+0xac>
 80055da:	237e      	movs	r3, #126	; 0x7e
 80055dc:	e7d4      	b.n	8005588 <_malloc_r+0xac>
 80055de:	2900      	cmp	r1, #0
 80055e0:	68f1      	ldr	r1, [r6, #12]
 80055e2:	db04      	blt.n	80055ee <_malloc_r+0x112>
 80055e4:	68b3      	ldr	r3, [r6, #8]
 80055e6:	60d9      	str	r1, [r3, #12]
 80055e8:	608b      	str	r3, [r1, #8]
 80055ea:	18b3      	adds	r3, r6, r2
 80055ec:	e7a4      	b.n	8005538 <_malloc_r+0x5c>
 80055ee:	460e      	mov	r6, r1
 80055f0:	e7d0      	b.n	8005594 <_malloc_r+0xb8>
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	616a      	str	r2, [r5, #20]
 80055f6:	612a      	str	r2, [r5, #16]
 80055f8:	db05      	blt.n	8005606 <_malloc_r+0x12a>
 80055fa:	4430      	add	r0, r6
 80055fc:	6843      	ldr	r3, [r0, #4]
 80055fe:	f043 0301 	orr.w	r3, r3, #1
 8005602:	6043      	str	r3, [r0, #4]
 8005604:	e79c      	b.n	8005540 <_malloc_r+0x64>
 8005606:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800560a:	d244      	bcs.n	8005696 <_malloc_r+0x1ba>
 800560c:	08c0      	lsrs	r0, r0, #3
 800560e:	1087      	asrs	r7, r0, #2
 8005610:	2201      	movs	r2, #1
 8005612:	fa02 f707 	lsl.w	r7, r2, r7
 8005616:	686a      	ldr	r2, [r5, #4]
 8005618:	3001      	adds	r0, #1
 800561a:	433a      	orrs	r2, r7
 800561c:	606a      	str	r2, [r5, #4]
 800561e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005622:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005626:	60b7      	str	r7, [r6, #8]
 8005628:	3a08      	subs	r2, #8
 800562a:	60f2      	str	r2, [r6, #12]
 800562c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005630:	60fe      	str	r6, [r7, #12]
 8005632:	2001      	movs	r0, #1
 8005634:	109a      	asrs	r2, r3, #2
 8005636:	fa00 f202 	lsl.w	r2, r0, r2
 800563a:	6868      	ldr	r0, [r5, #4]
 800563c:	4282      	cmp	r2, r0
 800563e:	f200 80a1 	bhi.w	8005784 <_malloc_r+0x2a8>
 8005642:	4202      	tst	r2, r0
 8005644:	d106      	bne.n	8005654 <_malloc_r+0x178>
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	0052      	lsls	r2, r2, #1
 800564c:	4202      	tst	r2, r0
 800564e:	f103 0304 	add.w	r3, r3, #4
 8005652:	d0fa      	beq.n	800564a <_malloc_r+0x16e>
 8005654:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005658:	46e0      	mov	r8, ip
 800565a:	469e      	mov	lr, r3
 800565c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005660:	4546      	cmp	r6, r8
 8005662:	d153      	bne.n	800570c <_malloc_r+0x230>
 8005664:	f10e 0e01 	add.w	lr, lr, #1
 8005668:	f01e 0f03 	tst.w	lr, #3
 800566c:	f108 0808 	add.w	r8, r8, #8
 8005670:	d1f4      	bne.n	800565c <_malloc_r+0x180>
 8005672:	0798      	lsls	r0, r3, #30
 8005674:	d179      	bne.n	800576a <_malloc_r+0x28e>
 8005676:	686b      	ldr	r3, [r5, #4]
 8005678:	ea23 0302 	bic.w	r3, r3, r2
 800567c:	606b      	str	r3, [r5, #4]
 800567e:	6868      	ldr	r0, [r5, #4]
 8005680:	0052      	lsls	r2, r2, #1
 8005682:	4282      	cmp	r2, r0
 8005684:	d87e      	bhi.n	8005784 <_malloc_r+0x2a8>
 8005686:	2a00      	cmp	r2, #0
 8005688:	d07c      	beq.n	8005784 <_malloc_r+0x2a8>
 800568a:	4673      	mov	r3, lr
 800568c:	4202      	tst	r2, r0
 800568e:	d1e1      	bne.n	8005654 <_malloc_r+0x178>
 8005690:	3304      	adds	r3, #4
 8005692:	0052      	lsls	r2, r2, #1
 8005694:	e7fa      	b.n	800568c <_malloc_r+0x1b0>
 8005696:	0a42      	lsrs	r2, r0, #9
 8005698:	2a04      	cmp	r2, #4
 800569a:	d815      	bhi.n	80056c8 <_malloc_r+0x1ec>
 800569c:	0982      	lsrs	r2, r0, #6
 800569e:	3238      	adds	r2, #56	; 0x38
 80056a0:	1c57      	adds	r7, r2, #1
 80056a2:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80056a6:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80056aa:	45be      	cmp	lr, r7
 80056ac:	d126      	bne.n	80056fc <_malloc_r+0x220>
 80056ae:	2001      	movs	r0, #1
 80056b0:	1092      	asrs	r2, r2, #2
 80056b2:	fa00 f202 	lsl.w	r2, r0, r2
 80056b6:	6868      	ldr	r0, [r5, #4]
 80056b8:	4310      	orrs	r0, r2
 80056ba:	6068      	str	r0, [r5, #4]
 80056bc:	f8c6 e00c 	str.w	lr, [r6, #12]
 80056c0:	60b7      	str	r7, [r6, #8]
 80056c2:	f8ce 6008 	str.w	r6, [lr, #8]
 80056c6:	e7b3      	b.n	8005630 <_malloc_r+0x154>
 80056c8:	2a14      	cmp	r2, #20
 80056ca:	d801      	bhi.n	80056d0 <_malloc_r+0x1f4>
 80056cc:	325b      	adds	r2, #91	; 0x5b
 80056ce:	e7e7      	b.n	80056a0 <_malloc_r+0x1c4>
 80056d0:	2a54      	cmp	r2, #84	; 0x54
 80056d2:	d802      	bhi.n	80056da <_malloc_r+0x1fe>
 80056d4:	0b02      	lsrs	r2, r0, #12
 80056d6:	326e      	adds	r2, #110	; 0x6e
 80056d8:	e7e2      	b.n	80056a0 <_malloc_r+0x1c4>
 80056da:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056de:	d802      	bhi.n	80056e6 <_malloc_r+0x20a>
 80056e0:	0bc2      	lsrs	r2, r0, #15
 80056e2:	3277      	adds	r2, #119	; 0x77
 80056e4:	e7dc      	b.n	80056a0 <_malloc_r+0x1c4>
 80056e6:	f240 5754 	movw	r7, #1364	; 0x554
 80056ea:	42ba      	cmp	r2, r7
 80056ec:	bf9a      	itte	ls
 80056ee:	0c82      	lsrls	r2, r0, #18
 80056f0:	327c      	addls	r2, #124	; 0x7c
 80056f2:	227e      	movhi	r2, #126	; 0x7e
 80056f4:	e7d4      	b.n	80056a0 <_malloc_r+0x1c4>
 80056f6:	68bf      	ldr	r7, [r7, #8]
 80056f8:	45be      	cmp	lr, r7
 80056fa:	d004      	beq.n	8005706 <_malloc_r+0x22a>
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	f022 0203 	bic.w	r2, r2, #3
 8005702:	4290      	cmp	r0, r2
 8005704:	d3f7      	bcc.n	80056f6 <_malloc_r+0x21a>
 8005706:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800570a:	e7d7      	b.n	80056bc <_malloc_r+0x1e0>
 800570c:	6870      	ldr	r0, [r6, #4]
 800570e:	68f7      	ldr	r7, [r6, #12]
 8005710:	f020 0003 	bic.w	r0, r0, #3
 8005714:	eba0 0a04 	sub.w	sl, r0, r4
 8005718:	f1ba 0f0f 	cmp.w	sl, #15
 800571c:	dd10      	ble.n	8005740 <_malloc_r+0x264>
 800571e:	68b2      	ldr	r2, [r6, #8]
 8005720:	1933      	adds	r3, r6, r4
 8005722:	f044 0401 	orr.w	r4, r4, #1
 8005726:	6074      	str	r4, [r6, #4]
 8005728:	60d7      	str	r7, [r2, #12]
 800572a:	60ba      	str	r2, [r7, #8]
 800572c:	f04a 0201 	orr.w	r2, sl, #1
 8005730:	616b      	str	r3, [r5, #20]
 8005732:	612b      	str	r3, [r5, #16]
 8005734:	60d9      	str	r1, [r3, #12]
 8005736:	6099      	str	r1, [r3, #8]
 8005738:	605a      	str	r2, [r3, #4]
 800573a:	f846 a000 	str.w	sl, [r6, r0]
 800573e:	e6ff      	b.n	8005540 <_malloc_r+0x64>
 8005740:	f1ba 0f00 	cmp.w	sl, #0
 8005744:	db0f      	blt.n	8005766 <_malloc_r+0x28a>
 8005746:	4430      	add	r0, r6
 8005748:	6843      	ldr	r3, [r0, #4]
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6043      	str	r3, [r0, #4]
 8005750:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005754:	4648      	mov	r0, r9
 8005756:	60df      	str	r7, [r3, #12]
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	f000 f8df 	bl	800591c <__malloc_unlock>
 800575e:	4630      	mov	r0, r6
 8005760:	b003      	add	sp, #12
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	463e      	mov	r6, r7
 8005768:	e77a      	b.n	8005660 <_malloc_r+0x184>
 800576a:	f85c 0908 	ldr.w	r0, [ip], #-8
 800576e:	4584      	cmp	ip, r0
 8005770:	f103 33ff 	add.w	r3, r3, #4294967295
 8005774:	f43f af7d 	beq.w	8005672 <_malloc_r+0x196>
 8005778:	e781      	b.n	800567e <_malloc_r+0x1a2>
 800577a:	bf00      	nop
 800577c:	20000100 	.word	0x20000100
 8005780:	20000108 	.word	0x20000108
 8005784:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005788:	f8db 6004 	ldr.w	r6, [fp, #4]
 800578c:	f026 0603 	bic.w	r6, r6, #3
 8005790:	42b4      	cmp	r4, r6
 8005792:	d803      	bhi.n	800579c <_malloc_r+0x2c0>
 8005794:	1b33      	subs	r3, r6, r4
 8005796:	2b0f      	cmp	r3, #15
 8005798:	f300 8096 	bgt.w	80058c8 <_malloc_r+0x3ec>
 800579c:	4a4f      	ldr	r2, [pc, #316]	; (80058dc <_malloc_r+0x400>)
 800579e:	6817      	ldr	r7, [r2, #0]
 80057a0:	4a4f      	ldr	r2, [pc, #316]	; (80058e0 <_malloc_r+0x404>)
 80057a2:	6811      	ldr	r1, [r2, #0]
 80057a4:	3710      	adds	r7, #16
 80057a6:	3101      	adds	r1, #1
 80057a8:	eb0b 0306 	add.w	r3, fp, r6
 80057ac:	4427      	add	r7, r4
 80057ae:	d005      	beq.n	80057bc <_malloc_r+0x2e0>
 80057b0:	494c      	ldr	r1, [pc, #304]	; (80058e4 <_malloc_r+0x408>)
 80057b2:	3901      	subs	r1, #1
 80057b4:	440f      	add	r7, r1
 80057b6:	3101      	adds	r1, #1
 80057b8:	4249      	negs	r1, r1
 80057ba:	400f      	ands	r7, r1
 80057bc:	4639      	mov	r1, r7
 80057be:	4648      	mov	r0, r9
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	f000 fb80 	bl	8005ec8 <_sbrk_r>
 80057c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057cc:	4680      	mov	r8, r0
 80057ce:	d056      	beq.n	800587e <_malloc_r+0x3a2>
 80057d0:	9b00      	ldr	r3, [sp, #0]
 80057d2:	9a01      	ldr	r2, [sp, #4]
 80057d4:	4283      	cmp	r3, r0
 80057d6:	d901      	bls.n	80057dc <_malloc_r+0x300>
 80057d8:	45ab      	cmp	fp, r5
 80057da:	d150      	bne.n	800587e <_malloc_r+0x3a2>
 80057dc:	4842      	ldr	r0, [pc, #264]	; (80058e8 <_malloc_r+0x40c>)
 80057de:	6801      	ldr	r1, [r0, #0]
 80057e0:	4543      	cmp	r3, r8
 80057e2:	eb07 0e01 	add.w	lr, r7, r1
 80057e6:	f8c0 e000 	str.w	lr, [r0]
 80057ea:	4940      	ldr	r1, [pc, #256]	; (80058ec <_malloc_r+0x410>)
 80057ec:	4682      	mov	sl, r0
 80057ee:	d113      	bne.n	8005818 <_malloc_r+0x33c>
 80057f0:	420b      	tst	r3, r1
 80057f2:	d111      	bne.n	8005818 <_malloc_r+0x33c>
 80057f4:	68ab      	ldr	r3, [r5, #8]
 80057f6:	443e      	add	r6, r7
 80057f8:	f046 0601 	orr.w	r6, r6, #1
 80057fc:	605e      	str	r6, [r3, #4]
 80057fe:	4a3c      	ldr	r2, [pc, #240]	; (80058f0 <_malloc_r+0x414>)
 8005800:	f8da 3000 	ldr.w	r3, [sl]
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	428b      	cmp	r3, r1
 8005808:	bf88      	it	hi
 800580a:	6013      	strhi	r3, [r2, #0]
 800580c:	4a39      	ldr	r2, [pc, #228]	; (80058f4 <_malloc_r+0x418>)
 800580e:	6811      	ldr	r1, [r2, #0]
 8005810:	428b      	cmp	r3, r1
 8005812:	bf88      	it	hi
 8005814:	6013      	strhi	r3, [r2, #0]
 8005816:	e032      	b.n	800587e <_malloc_r+0x3a2>
 8005818:	6810      	ldr	r0, [r2, #0]
 800581a:	3001      	adds	r0, #1
 800581c:	bf1b      	ittet	ne
 800581e:	eba8 0303 	subne.w	r3, r8, r3
 8005822:	4473      	addne	r3, lr
 8005824:	f8c2 8000 	streq.w	r8, [r2]
 8005828:	f8ca 3000 	strne.w	r3, [sl]
 800582c:	f018 0007 	ands.w	r0, r8, #7
 8005830:	bf1c      	itt	ne
 8005832:	f1c0 0008 	rsbne	r0, r0, #8
 8005836:	4480      	addne	r8, r0
 8005838:	4b2a      	ldr	r3, [pc, #168]	; (80058e4 <_malloc_r+0x408>)
 800583a:	4447      	add	r7, r8
 800583c:	4418      	add	r0, r3
 800583e:	400f      	ands	r7, r1
 8005840:	1bc7      	subs	r7, r0, r7
 8005842:	4639      	mov	r1, r7
 8005844:	4648      	mov	r0, r9
 8005846:	f000 fb3f 	bl	8005ec8 <_sbrk_r>
 800584a:	1c43      	adds	r3, r0, #1
 800584c:	bf08      	it	eq
 800584e:	4640      	moveq	r0, r8
 8005850:	f8da 3000 	ldr.w	r3, [sl]
 8005854:	f8c5 8008 	str.w	r8, [r5, #8]
 8005858:	bf08      	it	eq
 800585a:	2700      	moveq	r7, #0
 800585c:	eba0 0008 	sub.w	r0, r0, r8
 8005860:	443b      	add	r3, r7
 8005862:	4407      	add	r7, r0
 8005864:	f047 0701 	orr.w	r7, r7, #1
 8005868:	45ab      	cmp	fp, r5
 800586a:	f8ca 3000 	str.w	r3, [sl]
 800586e:	f8c8 7004 	str.w	r7, [r8, #4]
 8005872:	d0c4      	beq.n	80057fe <_malloc_r+0x322>
 8005874:	2e0f      	cmp	r6, #15
 8005876:	d810      	bhi.n	800589a <_malloc_r+0x3be>
 8005878:	2301      	movs	r3, #1
 800587a:	f8c8 3004 	str.w	r3, [r8, #4]
 800587e:	68ab      	ldr	r3, [r5, #8]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	f022 0203 	bic.w	r2, r2, #3
 8005886:	4294      	cmp	r4, r2
 8005888:	eba2 0304 	sub.w	r3, r2, r4
 800588c:	d801      	bhi.n	8005892 <_malloc_r+0x3b6>
 800588e:	2b0f      	cmp	r3, #15
 8005890:	dc1a      	bgt.n	80058c8 <_malloc_r+0x3ec>
 8005892:	4648      	mov	r0, r9
 8005894:	f000 f842 	bl	800591c <__malloc_unlock>
 8005898:	e62d      	b.n	80054f6 <_malloc_r+0x1a>
 800589a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800589e:	3e0c      	subs	r6, #12
 80058a0:	f026 0607 	bic.w	r6, r6, #7
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	4333      	orrs	r3, r6
 80058aa:	f8cb 3004 	str.w	r3, [fp, #4]
 80058ae:	eb0b 0306 	add.w	r3, fp, r6
 80058b2:	2205      	movs	r2, #5
 80058b4:	2e0f      	cmp	r6, #15
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]
 80058ba:	d9a0      	bls.n	80057fe <_malloc_r+0x322>
 80058bc:	f10b 0108 	add.w	r1, fp, #8
 80058c0:	4648      	mov	r0, r9
 80058c2:	f7ff fcab 	bl	800521c <_free_r>
 80058c6:	e79a      	b.n	80057fe <_malloc_r+0x322>
 80058c8:	68ae      	ldr	r6, [r5, #8]
 80058ca:	f044 0201 	orr.w	r2, r4, #1
 80058ce:	4434      	add	r4, r6
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6072      	str	r2, [r6, #4]
 80058d6:	60ac      	str	r4, [r5, #8]
 80058d8:	6063      	str	r3, [r4, #4]
 80058da:	e631      	b.n	8005540 <_malloc_r+0x64>
 80058dc:	200006d4 	.word	0x200006d4
 80058e0:	20000508 	.word	0x20000508
 80058e4:	00000080 	.word	0x00000080
 80058e8:	200006a4 	.word	0x200006a4
 80058ec:	0000007f 	.word	0x0000007f
 80058f0:	200006cc 	.word	0x200006cc
 80058f4:	200006d0 	.word	0x200006d0

080058f8 <memcpy>:
 80058f8:	b510      	push	{r4, lr}
 80058fa:	1e43      	subs	r3, r0, #1
 80058fc:	440a      	add	r2, r1
 80058fe:	4291      	cmp	r1, r2
 8005900:	d100      	bne.n	8005904 <memcpy+0xc>
 8005902:	bd10      	pop	{r4, pc}
 8005904:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590c:	e7f7      	b.n	80058fe <memcpy+0x6>
	...

08005910 <__malloc_lock>:
 8005910:	4801      	ldr	r0, [pc, #4]	; (8005918 <__malloc_lock+0x8>)
 8005912:	f7ff bd6d 	b.w	80053f0 <__retarget_lock_acquire_recursive>
 8005916:	bf00      	nop
 8005918:	20000ab4 	.word	0x20000ab4

0800591c <__malloc_unlock>:
 800591c:	4801      	ldr	r0, [pc, #4]	; (8005924 <__malloc_unlock+0x8>)
 800591e:	f7ff bd68 	b.w	80053f2 <__retarget_lock_release_recursive>
 8005922:	bf00      	nop
 8005924:	20000ab4 	.word	0x20000ab4

08005928 <_Balloc>:
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800592c:	4604      	mov	r4, r0
 800592e:	460e      	mov	r6, r1
 8005930:	b93d      	cbnz	r5, 8005942 <_Balloc+0x1a>
 8005932:	2010      	movs	r0, #16
 8005934:	f7ff fdca 	bl	80054cc <malloc>
 8005938:	6260      	str	r0, [r4, #36]	; 0x24
 800593a:	6045      	str	r5, [r0, #4]
 800593c:	6085      	str	r5, [r0, #8]
 800593e:	6005      	str	r5, [r0, #0]
 8005940:	60c5      	str	r5, [r0, #12]
 8005942:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005944:	68eb      	ldr	r3, [r5, #12]
 8005946:	b183      	cbz	r3, 800596a <_Balloc+0x42>
 8005948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005950:	b9b8      	cbnz	r0, 8005982 <_Balloc+0x5a>
 8005952:	2101      	movs	r1, #1
 8005954:	fa01 f506 	lsl.w	r5, r1, r6
 8005958:	1d6a      	adds	r2, r5, #5
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fb4d 	bl	8005ffc <_calloc_r>
 8005962:	b160      	cbz	r0, 800597e <_Balloc+0x56>
 8005964:	6046      	str	r6, [r0, #4]
 8005966:	6085      	str	r5, [r0, #8]
 8005968:	e00e      	b.n	8005988 <_Balloc+0x60>
 800596a:	2221      	movs	r2, #33	; 0x21
 800596c:	2104      	movs	r1, #4
 800596e:	4620      	mov	r0, r4
 8005970:	f000 fb44 	bl	8005ffc <_calloc_r>
 8005974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005976:	60e8      	str	r0, [r5, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e4      	bne.n	8005948 <_Balloc+0x20>
 800597e:	2000      	movs	r0, #0
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	6802      	ldr	r2, [r0, #0]
 8005984:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005988:	2300      	movs	r3, #0
 800598a:	6103      	str	r3, [r0, #16]
 800598c:	60c3      	str	r3, [r0, #12]
 800598e:	bd70      	pop	{r4, r5, r6, pc}

08005990 <_Bfree>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005994:	4606      	mov	r6, r0
 8005996:	460d      	mov	r5, r1
 8005998:	b93c      	cbnz	r4, 80059aa <_Bfree+0x1a>
 800599a:	2010      	movs	r0, #16
 800599c:	f7ff fd96 	bl	80054cc <malloc>
 80059a0:	6270      	str	r0, [r6, #36]	; 0x24
 80059a2:	6044      	str	r4, [r0, #4]
 80059a4:	6084      	str	r4, [r0, #8]
 80059a6:	6004      	str	r4, [r0, #0]
 80059a8:	60c4      	str	r4, [r0, #12]
 80059aa:	b13d      	cbz	r5, 80059bc <_Bfree+0x2c>
 80059ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059ae:	686a      	ldr	r2, [r5, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059b6:	6029      	str	r1, [r5, #0]
 80059b8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059bc:	bd70      	pop	{r4, r5, r6, pc}

080059be <__multadd>:
 80059be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c2:	690d      	ldr	r5, [r1, #16]
 80059c4:	461f      	mov	r7, r3
 80059c6:	4606      	mov	r6, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	f101 0e14 	add.w	lr, r1, #20
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8de 0000 	ldr.w	r0, [lr]
 80059d4:	b281      	uxth	r1, r0
 80059d6:	fb02 7101 	mla	r1, r2, r1, r7
 80059da:	0c0f      	lsrs	r7, r1, #16
 80059dc:	0c00      	lsrs	r0, r0, #16
 80059de:	fb02 7000 	mla	r0, r2, r0, r7
 80059e2:	b289      	uxth	r1, r1
 80059e4:	3301      	adds	r3, #1
 80059e6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059ea:	429d      	cmp	r5, r3
 80059ec:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059f0:	f84e 1b04 	str.w	r1, [lr], #4
 80059f4:	dcec      	bgt.n	80059d0 <__multadd+0x12>
 80059f6:	b1d7      	cbz	r7, 8005a2e <__multadd+0x70>
 80059f8:	68a3      	ldr	r3, [r4, #8]
 80059fa:	429d      	cmp	r5, r3
 80059fc:	db12      	blt.n	8005a24 <__multadd+0x66>
 80059fe:	6861      	ldr	r1, [r4, #4]
 8005a00:	4630      	mov	r0, r6
 8005a02:	3101      	adds	r1, #1
 8005a04:	f7ff ff90 	bl	8005928 <_Balloc>
 8005a08:	6922      	ldr	r2, [r4, #16]
 8005a0a:	3202      	adds	r2, #2
 8005a0c:	f104 010c 	add.w	r1, r4, #12
 8005a10:	4680      	mov	r8, r0
 8005a12:	0092      	lsls	r2, r2, #2
 8005a14:	300c      	adds	r0, #12
 8005a16:	f7ff ff6f 	bl	80058f8 <memcpy>
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f7ff ffb7 	bl	8005990 <_Bfree>
 8005a22:	4644      	mov	r4, r8
 8005a24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a28:	3501      	adds	r5, #1
 8005a2a:	615f      	str	r7, [r3, #20]
 8005a2c:	6125      	str	r5, [r4, #16]
 8005a2e:	4620      	mov	r0, r4
 8005a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a34 <__hi0bits>:
 8005a34:	0c02      	lsrs	r2, r0, #16
 8005a36:	0412      	lsls	r2, r2, #16
 8005a38:	4603      	mov	r3, r0
 8005a3a:	b9b2      	cbnz	r2, 8005a6a <__hi0bits+0x36>
 8005a3c:	0403      	lsls	r3, r0, #16
 8005a3e:	2010      	movs	r0, #16
 8005a40:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a44:	bf04      	itt	eq
 8005a46:	021b      	lsleq	r3, r3, #8
 8005a48:	3008      	addeq	r0, #8
 8005a4a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a4e:	bf04      	itt	eq
 8005a50:	011b      	lsleq	r3, r3, #4
 8005a52:	3004      	addeq	r0, #4
 8005a54:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a58:	bf04      	itt	eq
 8005a5a:	009b      	lsleq	r3, r3, #2
 8005a5c:	3002      	addeq	r0, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	db06      	blt.n	8005a70 <__hi0bits+0x3c>
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	d503      	bpl.n	8005a6e <__hi0bits+0x3a>
 8005a66:	3001      	adds	r0, #1
 8005a68:	4770      	bx	lr
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e7e8      	b.n	8005a40 <__hi0bits+0xc>
 8005a6e:	2020      	movs	r0, #32
 8005a70:	4770      	bx	lr

08005a72 <__lo0bits>:
 8005a72:	6803      	ldr	r3, [r0, #0]
 8005a74:	f013 0207 	ands.w	r2, r3, #7
 8005a78:	4601      	mov	r1, r0
 8005a7a:	d00b      	beq.n	8005a94 <__lo0bits+0x22>
 8005a7c:	07da      	lsls	r2, r3, #31
 8005a7e:	d423      	bmi.n	8005ac8 <__lo0bits+0x56>
 8005a80:	0798      	lsls	r0, r3, #30
 8005a82:	bf49      	itett	mi
 8005a84:	085b      	lsrmi	r3, r3, #1
 8005a86:	089b      	lsrpl	r3, r3, #2
 8005a88:	2001      	movmi	r0, #1
 8005a8a:	600b      	strmi	r3, [r1, #0]
 8005a8c:	bf5c      	itt	pl
 8005a8e:	600b      	strpl	r3, [r1, #0]
 8005a90:	2002      	movpl	r0, #2
 8005a92:	4770      	bx	lr
 8005a94:	b298      	uxth	r0, r3
 8005a96:	b9a8      	cbnz	r0, 8005ac4 <__lo0bits+0x52>
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	2010      	movs	r0, #16
 8005a9c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005aa0:	bf04      	itt	eq
 8005aa2:	0a1b      	lsreq	r3, r3, #8
 8005aa4:	3008      	addeq	r0, #8
 8005aa6:	071a      	lsls	r2, r3, #28
 8005aa8:	bf04      	itt	eq
 8005aaa:	091b      	lsreq	r3, r3, #4
 8005aac:	3004      	addeq	r0, #4
 8005aae:	079a      	lsls	r2, r3, #30
 8005ab0:	bf04      	itt	eq
 8005ab2:	089b      	lsreq	r3, r3, #2
 8005ab4:	3002      	addeq	r0, #2
 8005ab6:	07da      	lsls	r2, r3, #31
 8005ab8:	d402      	bmi.n	8005ac0 <__lo0bits+0x4e>
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	d006      	beq.n	8005acc <__lo0bits+0x5a>
 8005abe:	3001      	adds	r0, #1
 8005ac0:	600b      	str	r3, [r1, #0]
 8005ac2:	4770      	bx	lr
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	e7e9      	b.n	8005a9c <__lo0bits+0x2a>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	4770      	bx	lr
 8005acc:	2020      	movs	r0, #32
 8005ace:	4770      	bx	lr

08005ad0 <__i2b>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	f7ff ff27 	bl	8005928 <_Balloc>
 8005ada:	2201      	movs	r2, #1
 8005adc:	6144      	str	r4, [r0, #20]
 8005ade:	6102      	str	r2, [r0, #16]
 8005ae0:	bd10      	pop	{r4, pc}

08005ae2 <__multiply>:
 8005ae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	690a      	ldr	r2, [r1, #16]
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	bfb8      	it	lt
 8005af0:	460b      	movlt	r3, r1
 8005af2:	4689      	mov	r9, r1
 8005af4:	bfbc      	itt	lt
 8005af6:	46a1      	movlt	r9, r4
 8005af8:	461c      	movlt	r4, r3
 8005afa:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005afe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005b02:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005b06:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b0a:	eb07 060a 	add.w	r6, r7, sl
 8005b0e:	429e      	cmp	r6, r3
 8005b10:	bfc8      	it	gt
 8005b12:	3101      	addgt	r1, #1
 8005b14:	f7ff ff08 	bl	8005928 <_Balloc>
 8005b18:	f100 0514 	add.w	r5, r0, #20
 8005b1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b20:	462b      	mov	r3, r5
 8005b22:	2200      	movs	r2, #0
 8005b24:	4543      	cmp	r3, r8
 8005b26:	d316      	bcc.n	8005b56 <__multiply+0x74>
 8005b28:	f104 0214 	add.w	r2, r4, #20
 8005b2c:	f109 0114 	add.w	r1, r9, #20
 8005b30:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005b34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	9c01      	ldr	r4, [sp, #4]
 8005b3c:	4294      	cmp	r4, r2
 8005b3e:	4613      	mov	r3, r2
 8005b40:	d80c      	bhi.n	8005b5c <__multiply+0x7a>
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	dd03      	ble.n	8005b4e <__multiply+0x6c>
 8005b46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d054      	beq.n	8005bf8 <__multiply+0x116>
 8005b4e:	6106      	str	r6, [r0, #16]
 8005b50:	b003      	add	sp, #12
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	f843 2b04 	str.w	r2, [r3], #4
 8005b5a:	e7e3      	b.n	8005b24 <__multiply+0x42>
 8005b5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b60:	3204      	adds	r2, #4
 8005b62:	f1ba 0f00 	cmp.w	sl, #0
 8005b66:	d020      	beq.n	8005baa <__multiply+0xc8>
 8005b68:	46ae      	mov	lr, r5
 8005b6a:	4689      	mov	r9, r1
 8005b6c:	f04f 0c00 	mov.w	ip, #0
 8005b70:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b74:	f8be b000 	ldrh.w	fp, [lr]
 8005b78:	b2a3      	uxth	r3, r4
 8005b7a:	fb0a b303 	mla	r3, sl, r3, fp
 8005b7e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005b82:	f8de 4000 	ldr.w	r4, [lr]
 8005b86:	4463      	add	r3, ip
 8005b88:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005b8c:	fb0a c40b 	mla	r4, sl, fp, ip
 8005b90:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b9a:	454f      	cmp	r7, r9
 8005b9c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005ba0:	f84e 3b04 	str.w	r3, [lr], #4
 8005ba4:	d8e4      	bhi.n	8005b70 <__multiply+0x8e>
 8005ba6:	f8ce c000 	str.w	ip, [lr]
 8005baa:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005bae:	f1b9 0f00 	cmp.w	r9, #0
 8005bb2:	d01f      	beq.n	8005bf4 <__multiply+0x112>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	46ae      	mov	lr, r5
 8005bb8:	468c      	mov	ip, r1
 8005bba:	f04f 0a00 	mov.w	sl, #0
 8005bbe:	f8bc 4000 	ldrh.w	r4, [ip]
 8005bc2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005bc6:	fb09 b404 	mla	r4, r9, r4, fp
 8005bca:	44a2      	add	sl, r4
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005bd2:	f84e 3b04 	str.w	r3, [lr], #4
 8005bd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bda:	f8be 4000 	ldrh.w	r4, [lr]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	fb09 4303 	mla	r3, r9, r3, r4
 8005be4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005be8:	4567      	cmp	r7, ip
 8005bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bee:	d8e6      	bhi.n	8005bbe <__multiply+0xdc>
 8005bf0:	f8ce 3000 	str.w	r3, [lr]
 8005bf4:	3504      	adds	r5, #4
 8005bf6:	e7a0      	b.n	8005b3a <__multiply+0x58>
 8005bf8:	3e01      	subs	r6, #1
 8005bfa:	e7a2      	b.n	8005b42 <__multiply+0x60>

08005bfc <__pow5mult>:
 8005bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c00:	4615      	mov	r5, r2
 8005c02:	f012 0203 	ands.w	r2, r2, #3
 8005c06:	4606      	mov	r6, r0
 8005c08:	460f      	mov	r7, r1
 8005c0a:	d007      	beq.n	8005c1c <__pow5mult+0x20>
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	4c21      	ldr	r4, [pc, #132]	; (8005c94 <__pow5mult+0x98>)
 8005c10:	2300      	movs	r3, #0
 8005c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c16:	f7ff fed2 	bl	80059be <__multadd>
 8005c1a:	4607      	mov	r7, r0
 8005c1c:	10ad      	asrs	r5, r5, #2
 8005c1e:	d035      	beq.n	8005c8c <__pow5mult+0x90>
 8005c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c22:	b93c      	cbnz	r4, 8005c34 <__pow5mult+0x38>
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7ff fc51 	bl	80054cc <malloc>
 8005c2a:	6270      	str	r0, [r6, #36]	; 0x24
 8005c2c:	6044      	str	r4, [r0, #4]
 8005c2e:	6084      	str	r4, [r0, #8]
 8005c30:	6004      	str	r4, [r0, #0]
 8005c32:	60c4      	str	r4, [r0, #12]
 8005c34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c3c:	b94c      	cbnz	r4, 8005c52 <__pow5mult+0x56>
 8005c3e:	f240 2171 	movw	r1, #625	; 0x271
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7ff ff44 	bl	8005ad0 <__i2b>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c4e:	4604      	mov	r4, r0
 8005c50:	6003      	str	r3, [r0, #0]
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	07eb      	lsls	r3, r5, #31
 8005c58:	d50a      	bpl.n	8005c70 <__pow5mult+0x74>
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4622      	mov	r2, r4
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ff3f 	bl	8005ae2 <__multiply>
 8005c64:	4639      	mov	r1, r7
 8005c66:	4681      	mov	r9, r0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fe91 	bl	8005990 <_Bfree>
 8005c6e:	464f      	mov	r7, r9
 8005c70:	106d      	asrs	r5, r5, #1
 8005c72:	d00b      	beq.n	8005c8c <__pow5mult+0x90>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	b938      	cbnz	r0, 8005c88 <__pow5mult+0x8c>
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4621      	mov	r1, r4
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7ff ff30 	bl	8005ae2 <__multiply>
 8005c82:	6020      	str	r0, [r4, #0]
 8005c84:	f8c0 8000 	str.w	r8, [r0]
 8005c88:	4604      	mov	r4, r0
 8005c8a:	e7e4      	b.n	8005c56 <__pow5mult+0x5a>
 8005c8c:	4638      	mov	r0, r7
 8005c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c92:	bf00      	nop
 8005c94:	08006c20 	.word	0x08006c20

08005c98 <__lshift>:
 8005c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca2:	6923      	ldr	r3, [r4, #16]
 8005ca4:	6849      	ldr	r1, [r1, #4]
 8005ca6:	eb0a 0903 	add.w	r9, sl, r3
 8005caa:	68a3      	ldr	r3, [r4, #8]
 8005cac:	4607      	mov	r7, r0
 8005cae:	4616      	mov	r6, r2
 8005cb0:	f109 0501 	add.w	r5, r9, #1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	db31      	blt.n	8005d1c <__lshift+0x84>
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff fe35 	bl	8005928 <_Balloc>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	f100 0314 	add.w	r3, r0, #20
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	4552      	cmp	r2, sl
 8005cca:	db2a      	blt.n	8005d22 <__lshift+0x8a>
 8005ccc:	6920      	ldr	r0, [r4, #16]
 8005cce:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005cd2:	f104 0114 	add.w	r1, r4, #20
 8005cd6:	f016 021f 	ands.w	r2, r6, #31
 8005cda:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005cde:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005ce2:	d022      	beq.n	8005d2a <__lshift+0x92>
 8005ce4:	f1c2 0c20 	rsb	ip, r2, #32
 8005ce8:	2000      	movs	r0, #0
 8005cea:	680e      	ldr	r6, [r1, #0]
 8005cec:	4096      	lsls	r6, r2
 8005cee:	4330      	orrs	r0, r6
 8005cf0:	f843 0b04 	str.w	r0, [r3], #4
 8005cf4:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cf8:	458e      	cmp	lr, r1
 8005cfa:	fa20 f00c 	lsr.w	r0, r0, ip
 8005cfe:	d8f4      	bhi.n	8005cea <__lshift+0x52>
 8005d00:	6018      	str	r0, [r3, #0]
 8005d02:	b108      	cbz	r0, 8005d08 <__lshift+0x70>
 8005d04:	f109 0502 	add.w	r5, r9, #2
 8005d08:	3d01      	subs	r5, #1
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d10:	4621      	mov	r1, r4
 8005d12:	f7ff fe3d 	bl	8005990 <_Bfree>
 8005d16:	4640      	mov	r0, r8
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3101      	adds	r1, #1
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	e7c8      	b.n	8005cb4 <__lshift+0x1c>
 8005d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005d26:	3201      	adds	r2, #1
 8005d28:	e7ce      	b.n	8005cc8 <__lshift+0x30>
 8005d2a:	3b04      	subs	r3, #4
 8005d2c:	f851 2b04 	ldr.w	r2, [r1], #4
 8005d30:	f843 2f04 	str.w	r2, [r3, #4]!
 8005d34:	458e      	cmp	lr, r1
 8005d36:	d8f9      	bhi.n	8005d2c <__lshift+0x94>
 8005d38:	e7e6      	b.n	8005d08 <__lshift+0x70>

08005d3a <__mcmp>:
 8005d3a:	6903      	ldr	r3, [r0, #16]
 8005d3c:	690a      	ldr	r2, [r1, #16]
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	b530      	push	{r4, r5, lr}
 8005d42:	d10c      	bne.n	8005d5e <__mcmp+0x24>
 8005d44:	0092      	lsls	r2, r2, #2
 8005d46:	3014      	adds	r0, #20
 8005d48:	3114      	adds	r1, #20
 8005d4a:	1884      	adds	r4, r0, r2
 8005d4c:	4411      	add	r1, r2
 8005d4e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d52:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d56:	4295      	cmp	r5, r2
 8005d58:	d003      	beq.n	8005d62 <__mcmp+0x28>
 8005d5a:	d305      	bcc.n	8005d68 <__mcmp+0x2e>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	bd30      	pop	{r4, r5, pc}
 8005d62:	42a0      	cmp	r0, r4
 8005d64:	d3f3      	bcc.n	8005d4e <__mcmp+0x14>
 8005d66:	e7fa      	b.n	8005d5e <__mcmp+0x24>
 8005d68:	f04f 33ff 	mov.w	r3, #4294967295
 8005d6c:	e7f7      	b.n	8005d5e <__mcmp+0x24>

08005d6e <__mdiff>:
 8005d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d72:	460d      	mov	r5, r1
 8005d74:	4607      	mov	r7, r0
 8005d76:	4611      	mov	r1, r2
 8005d78:	4628      	mov	r0, r5
 8005d7a:	4614      	mov	r4, r2
 8005d7c:	f7ff ffdd 	bl	8005d3a <__mcmp>
 8005d80:	1e06      	subs	r6, r0, #0
 8005d82:	d108      	bne.n	8005d96 <__mdiff+0x28>
 8005d84:	4631      	mov	r1, r6
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7ff fdce 	bl	8005928 <_Balloc>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	6103      	str	r3, [r0, #16]
 8005d90:	6146      	str	r6, [r0, #20]
 8005d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d96:	bfa4      	itt	ge
 8005d98:	4623      	movge	r3, r4
 8005d9a:	462c      	movge	r4, r5
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	6861      	ldr	r1, [r4, #4]
 8005da0:	bfa6      	itte	ge
 8005da2:	461d      	movge	r5, r3
 8005da4:	2600      	movge	r6, #0
 8005da6:	2601      	movlt	r6, #1
 8005da8:	f7ff fdbe 	bl	8005928 <_Balloc>
 8005dac:	692b      	ldr	r3, [r5, #16]
 8005dae:	60c6      	str	r6, [r0, #12]
 8005db0:	6926      	ldr	r6, [r4, #16]
 8005db2:	f105 0914 	add.w	r9, r5, #20
 8005db6:	f104 0214 	add.w	r2, r4, #20
 8005dba:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005dbe:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005dc2:	f100 0514 	add.w	r5, r0, #20
 8005dc6:	f04f 0c00 	mov.w	ip, #0
 8005dca:	f852 ab04 	ldr.w	sl, [r2], #4
 8005dce:	f859 4b04 	ldr.w	r4, [r9], #4
 8005dd2:	fa1c f18a 	uxtah	r1, ip, sl
 8005dd6:	b2a3      	uxth	r3, r4
 8005dd8:	1ac9      	subs	r1, r1, r3
 8005dda:	0c23      	lsrs	r3, r4, #16
 8005ddc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005de0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005de4:	b289      	uxth	r1, r1
 8005de6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005dea:	45c8      	cmp	r8, r9
 8005dec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005df0:	4696      	mov	lr, r2
 8005df2:	f845 3b04 	str.w	r3, [r5], #4
 8005df6:	d8e8      	bhi.n	8005dca <__mdiff+0x5c>
 8005df8:	45be      	cmp	lr, r7
 8005dfa:	d305      	bcc.n	8005e08 <__mdiff+0x9a>
 8005dfc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005e00:	b18b      	cbz	r3, 8005e26 <__mdiff+0xb8>
 8005e02:	6106      	str	r6, [r0, #16]
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005e0c:	fa1c f381 	uxtah	r3, ip, r1
 8005e10:	141a      	asrs	r2, r3, #16
 8005e12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e20:	f845 3b04 	str.w	r3, [r5], #4
 8005e24:	e7e8      	b.n	8005df8 <__mdiff+0x8a>
 8005e26:	3e01      	subs	r6, #1
 8005e28:	e7e8      	b.n	8005dfc <__mdiff+0x8e>

08005e2a <__d2b>:
 8005e2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e2e:	460e      	mov	r6, r1
 8005e30:	2101      	movs	r1, #1
 8005e32:	ec59 8b10 	vmov	r8, r9, d0
 8005e36:	4615      	mov	r5, r2
 8005e38:	f7ff fd76 	bl	8005928 <_Balloc>
 8005e3c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e40:	4607      	mov	r7, r0
 8005e42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e46:	bb34      	cbnz	r4, 8005e96 <__d2b+0x6c>
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f1b8 0f00 	cmp.w	r8, #0
 8005e4e:	d027      	beq.n	8005ea0 <__d2b+0x76>
 8005e50:	a802      	add	r0, sp, #8
 8005e52:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005e56:	f7ff fe0c 	bl	8005a72 <__lo0bits>
 8005e5a:	9900      	ldr	r1, [sp, #0]
 8005e5c:	b1f0      	cbz	r0, 8005e9c <__d2b+0x72>
 8005e5e:	9a01      	ldr	r2, [sp, #4]
 8005e60:	f1c0 0320 	rsb	r3, r0, #32
 8005e64:	fa02 f303 	lsl.w	r3, r2, r3
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	40c2      	lsrs	r2, r0
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf14      	ite	ne
 8005e78:	2102      	movne	r1, #2
 8005e7a:	2101      	moveq	r1, #1
 8005e7c:	6139      	str	r1, [r7, #16]
 8005e7e:	b1c4      	cbz	r4, 8005eb2 <__d2b+0x88>
 8005e80:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e84:	4404      	add	r4, r0
 8005e86:	6034      	str	r4, [r6, #0]
 8005e88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e8c:	6028      	str	r0, [r5, #0]
 8005e8e:	4638      	mov	r0, r7
 8005e90:	b003      	add	sp, #12
 8005e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e9a:	e7d5      	b.n	8005e48 <__d2b+0x1e>
 8005e9c:	6179      	str	r1, [r7, #20]
 8005e9e:	e7e7      	b.n	8005e70 <__d2b+0x46>
 8005ea0:	a801      	add	r0, sp, #4
 8005ea2:	f7ff fde6 	bl	8005a72 <__lo0bits>
 8005ea6:	9b01      	ldr	r3, [sp, #4]
 8005ea8:	617b      	str	r3, [r7, #20]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	6139      	str	r1, [r7, #16]
 8005eae:	3020      	adds	r0, #32
 8005eb0:	e7e5      	b.n	8005e7e <__d2b+0x54>
 8005eb2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005eb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005eba:	6030      	str	r0, [r6, #0]
 8005ebc:	6918      	ldr	r0, [r3, #16]
 8005ebe:	f7ff fdb9 	bl	8005a34 <__hi0bits>
 8005ec2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ec6:	e7e1      	b.n	8005e8c <__d2b+0x62>

08005ec8 <_sbrk_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4c06      	ldr	r4, [pc, #24]	; (8005ee4 <_sbrk_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4605      	mov	r5, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	6023      	str	r3, [r4, #0]
 8005ed4:	f7fc ffa0 	bl	8002e18 <_sbrk>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_sbrk_r+0x1a>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_sbrk_r+0x1a>
 8005ee0:	602b      	str	r3, [r5, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	20000abc 	.word	0x20000abc

08005ee8 <__sread>:
 8005ee8:	b510      	push	{r4, lr}
 8005eea:	460c      	mov	r4, r1
 8005eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef0:	f000 fb54 	bl	800659c <_read_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	bfab      	itete	ge
 8005ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005efa:	89a3      	ldrhlt	r3, [r4, #12]
 8005efc:	181b      	addge	r3, r3, r0
 8005efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f02:	bfac      	ite	ge
 8005f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f06:	81a3      	strhlt	r3, [r4, #12]
 8005f08:	bd10      	pop	{r4, pc}

08005f0a <__swrite>:
 8005f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0e:	461f      	mov	r7, r3
 8005f10:	898b      	ldrh	r3, [r1, #12]
 8005f12:	05db      	lsls	r3, r3, #23
 8005f14:	4605      	mov	r5, r0
 8005f16:	460c      	mov	r4, r1
 8005f18:	4616      	mov	r6, r2
 8005f1a:	d505      	bpl.n	8005f28 <__swrite+0x1e>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f24:	f000 fafc 	bl	8006520 <_lseek_r>
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	4632      	mov	r2, r6
 8005f36:	463b      	mov	r3, r7
 8005f38:	4628      	mov	r0, r5
 8005f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	f000 b84b 	b.w	8005fd8 <_write_r>

08005f42 <__sseek>:
 8005f42:	b510      	push	{r4, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4a:	f000 fae9 	bl	8006520 <_lseek_r>
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	bf15      	itete	ne
 8005f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f5e:	81a3      	strheq	r3, [r4, #12]
 8005f60:	bf18      	it	ne
 8005f62:	81a3      	strhne	r3, [r4, #12]
 8005f64:	bd10      	pop	{r4, pc}

08005f66 <__sclose>:
 8005f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6a:	f000 b875 	b.w	8006058 <_close_r>

08005f6e <__sprint_r>:
 8005f6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f72:	6893      	ldr	r3, [r2, #8]
 8005f74:	4680      	mov	r8, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	4614      	mov	r4, r2
 8005f7a:	b91b      	cbnz	r3, 8005f84 <__sprint_r+0x16>
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005f86:	049d      	lsls	r5, r3, #18
 8005f88:	d523      	bpl.n	8005fd2 <__sprint_r+0x64>
 8005f8a:	6815      	ldr	r5, [r2, #0]
 8005f8c:	68a0      	ldr	r0, [r4, #8]
 8005f8e:	3508      	adds	r5, #8
 8005f90:	b920      	cbnz	r0, 8005f9c <__sprint_r+0x2e>
 8005f92:	2300      	movs	r3, #0
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f9c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8005fa0:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8005fa4:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8005fa8:	f04f 0900 	mov.w	r9, #0
 8005fac:	45ca      	cmp	sl, r9
 8005fae:	dc05      	bgt.n	8005fbc <__sprint_r+0x4e>
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	f026 0603 	bic.w	r6, r6, #3
 8005fb6:	1b9e      	subs	r6, r3, r6
 8005fb8:	60a6      	str	r6, [r4, #8]
 8005fba:	e7e7      	b.n	8005f8c <__sprint_r+0x1e>
 8005fbc:	463a      	mov	r2, r7
 8005fbe:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f000 f905 	bl	80061d2 <_fputwc_r>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d0e2      	beq.n	8005f92 <__sprint_r+0x24>
 8005fcc:	f109 0901 	add.w	r9, r9, #1
 8005fd0:	e7ec      	b.n	8005fac <__sprint_r+0x3e>
 8005fd2:	f000 f939 	bl	8006248 <__sfvwrite_r>
 8005fd6:	e7dc      	b.n	8005f92 <__sprint_r+0x24>

08005fd8 <_write_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4c07      	ldr	r4, [pc, #28]	; (8005ff8 <_write_r+0x20>)
 8005fdc:	4605      	mov	r5, r0
 8005fde:	4608      	mov	r0, r1
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	6022      	str	r2, [r4, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f7fc ff08 	bl	8002dfc <_write>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_write_r+0x1e>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_write_r+0x1e>
 8005ff4:	602b      	str	r3, [r5, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000abc 	.word	0x20000abc

08005ffc <_calloc_r>:
 8005ffc:	b510      	push	{r4, lr}
 8005ffe:	4351      	muls	r1, r2
 8006000:	f7ff fa6c 	bl	80054dc <_malloc_r>
 8006004:	4604      	mov	r4, r0
 8006006:	b198      	cbz	r0, 8006030 <_calloc_r+0x34>
 8006008:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800600c:	f022 0203 	bic.w	r2, r2, #3
 8006010:	3a04      	subs	r2, #4
 8006012:	2a24      	cmp	r2, #36	; 0x24
 8006014:	d81b      	bhi.n	800604e <_calloc_r+0x52>
 8006016:	2a13      	cmp	r2, #19
 8006018:	d917      	bls.n	800604a <_calloc_r+0x4e>
 800601a:	2100      	movs	r1, #0
 800601c:	2a1b      	cmp	r2, #27
 800601e:	6001      	str	r1, [r0, #0]
 8006020:	6041      	str	r1, [r0, #4]
 8006022:	d807      	bhi.n	8006034 <_calloc_r+0x38>
 8006024:	f100 0308 	add.w	r3, r0, #8
 8006028:	2200      	movs	r2, #0
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	4620      	mov	r0, r4
 8006032:	bd10      	pop	{r4, pc}
 8006034:	2a24      	cmp	r2, #36	; 0x24
 8006036:	6081      	str	r1, [r0, #8]
 8006038:	60c1      	str	r1, [r0, #12]
 800603a:	bf11      	iteee	ne
 800603c:	f100 0310 	addne.w	r3, r0, #16
 8006040:	6101      	streq	r1, [r0, #16]
 8006042:	f100 0318 	addeq.w	r3, r0, #24
 8006046:	6141      	streq	r1, [r0, #20]
 8006048:	e7ee      	b.n	8006028 <_calloc_r+0x2c>
 800604a:	4603      	mov	r3, r0
 800604c:	e7ec      	b.n	8006028 <_calloc_r+0x2c>
 800604e:	2100      	movs	r1, #0
 8006050:	f7fc ff80 	bl	8002f54 <memset>
 8006054:	e7ec      	b.n	8006030 <_calloc_r+0x34>
	...

08006058 <_close_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4c06      	ldr	r4, [pc, #24]	; (8006074 <_close_r+0x1c>)
 800605c:	2300      	movs	r3, #0
 800605e:	4605      	mov	r5, r0
 8006060:	4608      	mov	r0, r1
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	f7fc fef2 	bl	8002e4c <_close>
 8006068:	1c43      	adds	r3, r0, #1
 800606a:	d102      	bne.n	8006072 <_close_r+0x1a>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	b103      	cbz	r3, 8006072 <_close_r+0x1a>
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	bd38      	pop	{r3, r4, r5, pc}
 8006074:	20000abc 	.word	0x20000abc

08006078 <_fclose_r>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4605      	mov	r5, r0
 800607c:	460c      	mov	r4, r1
 800607e:	b911      	cbnz	r1, 8006086 <_fclose_r+0xe>
 8006080:	2600      	movs	r6, #0
 8006082:	4630      	mov	r0, r6
 8006084:	bd70      	pop	{r4, r5, r6, pc}
 8006086:	b118      	cbz	r0, 8006090 <_fclose_r+0x18>
 8006088:	6983      	ldr	r3, [r0, #24]
 800608a:	b90b      	cbnz	r3, 8006090 <_fclose_r+0x18>
 800608c:	f7fe fff0 	bl	8005070 <__sinit>
 8006090:	4b2c      	ldr	r3, [pc, #176]	; (8006144 <_fclose_r+0xcc>)
 8006092:	429c      	cmp	r4, r3
 8006094:	d114      	bne.n	80060c0 <_fclose_r+0x48>
 8006096:	686c      	ldr	r4, [r5, #4]
 8006098:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800609a:	07d8      	lsls	r0, r3, #31
 800609c:	d405      	bmi.n	80060aa <_fclose_r+0x32>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	0599      	lsls	r1, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_fclose_r+0x32>
 80060a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060a6:	f7ff f9a3 	bl	80053f0 <__retarget_lock_acquire_recursive>
 80060aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ae:	b98b      	cbnz	r3, 80060d4 <_fclose_r+0x5c>
 80060b0:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80060b2:	f016 0601 	ands.w	r6, r6, #1
 80060b6:	d1e3      	bne.n	8006080 <_fclose_r+0x8>
 80060b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ba:	f7ff f99a 	bl	80053f2 <__retarget_lock_release_recursive>
 80060be:	e7e0      	b.n	8006082 <_fclose_r+0xa>
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <_fclose_r+0xd0>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <_fclose_r+0x52>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7e6      	b.n	8006098 <_fclose_r+0x20>
 80060ca:	4b20      	ldr	r3, [pc, #128]	; (800614c <_fclose_r+0xd4>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	bf08      	it	eq
 80060d0:	68ec      	ldreq	r4, [r5, #12]
 80060d2:	e7e1      	b.n	8006098 <_fclose_r+0x20>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7fe fea4 	bl	8004e24 <__sflush_r>
 80060dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060de:	4606      	mov	r6, r0
 80060e0:	b133      	cbz	r3, 80060f0 <_fclose_r+0x78>
 80060e2:	6a21      	ldr	r1, [r4, #32]
 80060e4:	4628      	mov	r0, r5
 80060e6:	4798      	blx	r3
 80060e8:	2800      	cmp	r0, #0
 80060ea:	bfb8      	it	lt
 80060ec:	f04f 36ff 	movlt.w	r6, #4294967295
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	061a      	lsls	r2, r3, #24
 80060f4:	d503      	bpl.n	80060fe <_fclose_r+0x86>
 80060f6:	6921      	ldr	r1, [r4, #16]
 80060f8:	4628      	mov	r0, r5
 80060fa:	f7ff f88f 	bl	800521c <_free_r>
 80060fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006100:	b141      	cbz	r1, 8006114 <_fclose_r+0x9c>
 8006102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006106:	4299      	cmp	r1, r3
 8006108:	d002      	beq.n	8006110 <_fclose_r+0x98>
 800610a:	4628      	mov	r0, r5
 800610c:	f7ff f886 	bl	800521c <_free_r>
 8006110:	2300      	movs	r3, #0
 8006112:	6363      	str	r3, [r4, #52]	; 0x34
 8006114:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006116:	b121      	cbz	r1, 8006122 <_fclose_r+0xaa>
 8006118:	4628      	mov	r0, r5
 800611a:	f7ff f87f 	bl	800521c <_free_r>
 800611e:	2300      	movs	r3, #0
 8006120:	64a3      	str	r3, [r4, #72]	; 0x48
 8006122:	f7fe ff8d 	bl	8005040 <__sfp_lock_acquire>
 8006126:	2300      	movs	r3, #0
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800612c:	07db      	lsls	r3, r3, #31
 800612e:	d402      	bmi.n	8006136 <_fclose_r+0xbe>
 8006130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006132:	f7ff f95e 	bl	80053f2 <__retarget_lock_release_recursive>
 8006136:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006138:	f7ff f959 	bl	80053ee <__retarget_lock_close_recursive>
 800613c:	f7fe ff86 	bl	800504c <__sfp_lock_release>
 8006140:	e79f      	b.n	8006082 <_fclose_r+0xa>
 8006142:	bf00      	nop
 8006144:	08006af0 	.word	0x08006af0
 8006148:	08006b10 	.word	0x08006b10
 800614c:	08006ad0 	.word	0x08006ad0

08006150 <__fputwc>:
 8006150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006154:	4680      	mov	r8, r0
 8006156:	460e      	mov	r6, r1
 8006158:	4614      	mov	r4, r2
 800615a:	f000 f9d3 	bl	8006504 <__locale_mb_cur_max>
 800615e:	2801      	cmp	r0, #1
 8006160:	d11c      	bne.n	800619c <__fputwc+0x4c>
 8006162:	1e73      	subs	r3, r6, #1
 8006164:	2bfe      	cmp	r3, #254	; 0xfe
 8006166:	d819      	bhi.n	800619c <__fputwc+0x4c>
 8006168:	f88d 6004 	strb.w	r6, [sp, #4]
 800616c:	4605      	mov	r5, r0
 800616e:	2700      	movs	r7, #0
 8006170:	f10d 0904 	add.w	r9, sp, #4
 8006174:	42af      	cmp	r7, r5
 8006176:	d020      	beq.n	80061ba <__fputwc+0x6a>
 8006178:	68a3      	ldr	r3, [r4, #8]
 800617a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800617e:	3b01      	subs	r3, #1
 8006180:	2b00      	cmp	r3, #0
 8006182:	60a3      	str	r3, [r4, #8]
 8006184:	da04      	bge.n	8006190 <__fputwc+0x40>
 8006186:	69a2      	ldr	r2, [r4, #24]
 8006188:	4293      	cmp	r3, r2
 800618a:	db1a      	blt.n	80061c2 <__fputwc+0x72>
 800618c:	290a      	cmp	r1, #10
 800618e:	d018      	beq.n	80061c2 <__fputwc+0x72>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	6022      	str	r2, [r4, #0]
 8006196:	7019      	strb	r1, [r3, #0]
 8006198:	3701      	adds	r7, #1
 800619a:	e7eb      	b.n	8006174 <__fputwc+0x24>
 800619c:	4632      	mov	r2, r6
 800619e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 80061a2:	a901      	add	r1, sp, #4
 80061a4:	4640      	mov	r0, r8
 80061a6:	f000 fbe9 	bl	800697c <_wcrtomb_r>
 80061aa:	1c42      	adds	r2, r0, #1
 80061ac:	4605      	mov	r5, r0
 80061ae:	d1de      	bne.n	800616e <__fputwc+0x1e>
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	4606      	mov	r6, r0
 80061ba:	4630      	mov	r0, r6
 80061bc:	b003      	add	sp, #12
 80061be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061c2:	4622      	mov	r2, r4
 80061c4:	4640      	mov	r0, r8
 80061c6:	f000 fb7b 	bl	80068c0 <__swbuf_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	d1e4      	bne.n	8006198 <__fputwc+0x48>
 80061ce:	4606      	mov	r6, r0
 80061d0:	e7f3      	b.n	80061ba <__fputwc+0x6a>

080061d2 <_fputwc_r>:
 80061d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80061d4:	07db      	lsls	r3, r3, #31
 80061d6:	b570      	push	{r4, r5, r6, lr}
 80061d8:	4605      	mov	r5, r0
 80061da:	460e      	mov	r6, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	d405      	bmi.n	80061ec <_fputwc_r+0x1a>
 80061e0:	8993      	ldrh	r3, [r2, #12]
 80061e2:	0598      	lsls	r0, r3, #22
 80061e4:	d402      	bmi.n	80061ec <_fputwc_r+0x1a>
 80061e6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80061e8:	f7ff f902 	bl	80053f0 <__retarget_lock_acquire_recursive>
 80061ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f0:	0499      	lsls	r1, r3, #18
 80061f2:	d406      	bmi.n	8006202 <_fputwc_r+0x30>
 80061f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061f8:	81a3      	strh	r3, [r4, #12]
 80061fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006200:	6663      	str	r3, [r4, #100]	; 0x64
 8006202:	4622      	mov	r2, r4
 8006204:	4628      	mov	r0, r5
 8006206:	4631      	mov	r1, r6
 8006208:	f7ff ffa2 	bl	8006150 <__fputwc>
 800620c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800620e:	07da      	lsls	r2, r3, #31
 8006210:	4605      	mov	r5, r0
 8006212:	d405      	bmi.n	8006220 <_fputwc_r+0x4e>
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	059b      	lsls	r3, r3, #22
 8006218:	d402      	bmi.n	8006220 <_fputwc_r+0x4e>
 800621a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621c:	f7ff f8e9 	bl	80053f2 <__retarget_lock_release_recursive>
 8006220:	4628      	mov	r0, r5
 8006222:	bd70      	pop	{r4, r5, r6, pc}

08006224 <_fstat_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4c07      	ldr	r4, [pc, #28]	; (8006244 <_fstat_r+0x20>)
 8006228:	2300      	movs	r3, #0
 800622a:	4605      	mov	r5, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	f7fc fe0e 	bl	8002e52 <_fstat>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_fstat_r+0x1c>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	b103      	cbz	r3, 8006240 <_fstat_r+0x1c>
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	20000abc 	.word	0x20000abc

08006248 <__sfvwrite_r>:
 8006248:	6893      	ldr	r3, [r2, #8]
 800624a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624e:	4607      	mov	r7, r0
 8006250:	460c      	mov	r4, r1
 8006252:	4690      	mov	r8, r2
 8006254:	b91b      	cbnz	r3, 800625e <__sfvwrite_r+0x16>
 8006256:	2000      	movs	r0, #0
 8006258:	b003      	add	sp, #12
 800625a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625e:	898b      	ldrh	r3, [r1, #12]
 8006260:	0718      	lsls	r0, r3, #28
 8006262:	d526      	bpl.n	80062b2 <__sfvwrite_r+0x6a>
 8006264:	690b      	ldr	r3, [r1, #16]
 8006266:	b323      	cbz	r3, 80062b2 <__sfvwrite_r+0x6a>
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	f8d8 6000 	ldr.w	r6, [r8]
 800626e:	f013 0902 	ands.w	r9, r3, #2
 8006272:	d02d      	beq.n	80062d0 <__sfvwrite_r+0x88>
 8006274:	f04f 0a00 	mov.w	sl, #0
 8006278:	f8df b264 	ldr.w	fp, [pc, #612]	; 80064e0 <__sfvwrite_r+0x298>
 800627c:	46d1      	mov	r9, sl
 800627e:	f1b9 0f00 	cmp.w	r9, #0
 8006282:	d01f      	beq.n	80062c4 <__sfvwrite_r+0x7c>
 8006284:	45d9      	cmp	r9, fp
 8006286:	464b      	mov	r3, r9
 8006288:	4652      	mov	r2, sl
 800628a:	bf28      	it	cs
 800628c:	465b      	movcs	r3, fp
 800628e:	6a21      	ldr	r1, [r4, #32]
 8006290:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006292:	4638      	mov	r0, r7
 8006294:	47a8      	blx	r5
 8006296:	2800      	cmp	r0, #0
 8006298:	f340 8089 	ble.w	80063ae <__sfvwrite_r+0x166>
 800629c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80062a0:	4482      	add	sl, r0
 80062a2:	eba9 0900 	sub.w	r9, r9, r0
 80062a6:	1a18      	subs	r0, r3, r0
 80062a8:	f8c8 0008 	str.w	r0, [r8, #8]
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d1e6      	bne.n	800627e <__sfvwrite_r+0x36>
 80062b0:	e7d1      	b.n	8006256 <__sfvwrite_r+0xe>
 80062b2:	4621      	mov	r1, r4
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7fd feeb 	bl	8004090 <__swsetup_r>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0d4      	beq.n	8006268 <__sfvwrite_r+0x20>
 80062be:	f04f 30ff 	mov.w	r0, #4294967295
 80062c2:	e7c9      	b.n	8006258 <__sfvwrite_r+0x10>
 80062c4:	f8d6 a000 	ldr.w	sl, [r6]
 80062c8:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80062cc:	3608      	adds	r6, #8
 80062ce:	e7d6      	b.n	800627e <__sfvwrite_r+0x36>
 80062d0:	f013 0301 	ands.w	r3, r3, #1
 80062d4:	d043      	beq.n	800635e <__sfvwrite_r+0x116>
 80062d6:	4648      	mov	r0, r9
 80062d8:	46ca      	mov	sl, r9
 80062da:	46cb      	mov	fp, r9
 80062dc:	f1bb 0f00 	cmp.w	fp, #0
 80062e0:	f000 80d9 	beq.w	8006496 <__sfvwrite_r+0x24e>
 80062e4:	b950      	cbnz	r0, 80062fc <__sfvwrite_r+0xb4>
 80062e6:	465a      	mov	r2, fp
 80062e8:	210a      	movs	r1, #10
 80062ea:	4650      	mov	r0, sl
 80062ec:	f7f9 ff70 	bl	80001d0 <memchr>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f000 80d5 	beq.w	80064a0 <__sfvwrite_r+0x258>
 80062f6:	3001      	adds	r0, #1
 80062f8:	eba0 090a 	sub.w	r9, r0, sl
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	6921      	ldr	r1, [r4, #16]
 8006300:	6962      	ldr	r2, [r4, #20]
 8006302:	45d9      	cmp	r9, fp
 8006304:	464b      	mov	r3, r9
 8006306:	bf28      	it	cs
 8006308:	465b      	movcs	r3, fp
 800630a:	4288      	cmp	r0, r1
 800630c:	f240 80cb 	bls.w	80064a6 <__sfvwrite_r+0x25e>
 8006310:	68a5      	ldr	r5, [r4, #8]
 8006312:	4415      	add	r5, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	f340 80c6 	ble.w	80064a6 <__sfvwrite_r+0x25e>
 800631a:	4651      	mov	r1, sl
 800631c:	462a      	mov	r2, r5
 800631e:	f000 f923 	bl	8006568 <memmove>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	442b      	add	r3, r5
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	4621      	mov	r1, r4
 800632a:	4638      	mov	r0, r7
 800632c:	f7fe fe0c 	bl	8004f48 <_fflush_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d13c      	bne.n	80063ae <__sfvwrite_r+0x166>
 8006334:	ebb9 0905 	subs.w	r9, r9, r5
 8006338:	f040 80cf 	bne.w	80064da <__sfvwrite_r+0x292>
 800633c:	4621      	mov	r1, r4
 800633e:	4638      	mov	r0, r7
 8006340:	f7fe fe02 	bl	8004f48 <_fflush_r>
 8006344:	2800      	cmp	r0, #0
 8006346:	d132      	bne.n	80063ae <__sfvwrite_r+0x166>
 8006348:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800634c:	44aa      	add	sl, r5
 800634e:	ebab 0b05 	sub.w	fp, fp, r5
 8006352:	1b5d      	subs	r5, r3, r5
 8006354:	f8c8 5008 	str.w	r5, [r8, #8]
 8006358:	2d00      	cmp	r5, #0
 800635a:	d1bf      	bne.n	80062dc <__sfvwrite_r+0x94>
 800635c:	e77b      	b.n	8006256 <__sfvwrite_r+0xe>
 800635e:	4699      	mov	r9, r3
 8006360:	469a      	mov	sl, r3
 8006362:	f1ba 0f00 	cmp.w	sl, #0
 8006366:	d027      	beq.n	80063b8 <__sfvwrite_r+0x170>
 8006368:	89a2      	ldrh	r2, [r4, #12]
 800636a:	68a5      	ldr	r5, [r4, #8]
 800636c:	0591      	lsls	r1, r2, #22
 800636e:	d565      	bpl.n	800643c <__sfvwrite_r+0x1f4>
 8006370:	45aa      	cmp	sl, r5
 8006372:	d33b      	bcc.n	80063ec <__sfvwrite_r+0x1a4>
 8006374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006378:	d036      	beq.n	80063e8 <__sfvwrite_r+0x1a0>
 800637a:	6921      	ldr	r1, [r4, #16]
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	1a5b      	subs	r3, r3, r1
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	6963      	ldr	r3, [r4, #20]
 8006384:	2002      	movs	r0, #2
 8006386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800638a:	fb93 fbf0 	sdiv	fp, r3, r0
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	1c58      	adds	r0, r3, #1
 8006392:	4450      	add	r0, sl
 8006394:	4583      	cmp	fp, r0
 8006396:	bf38      	it	cc
 8006398:	4683      	movcc	fp, r0
 800639a:	0553      	lsls	r3, r2, #21
 800639c:	d53e      	bpl.n	800641c <__sfvwrite_r+0x1d4>
 800639e:	4659      	mov	r1, fp
 80063a0:	4638      	mov	r0, r7
 80063a2:	f7ff f89b 	bl	80054dc <_malloc_r>
 80063a6:	4605      	mov	r5, r0
 80063a8:	b950      	cbnz	r0, 80063c0 <__sfvwrite_r+0x178>
 80063aa:	230c      	movs	r3, #12
 80063ac:	603b      	str	r3, [r7, #0]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	e782      	b.n	80062be <__sfvwrite_r+0x76>
 80063b8:	e896 0600 	ldmia.w	r6, {r9, sl}
 80063bc:	3608      	adds	r6, #8
 80063be:	e7d0      	b.n	8006362 <__sfvwrite_r+0x11a>
 80063c0:	9a01      	ldr	r2, [sp, #4]
 80063c2:	6921      	ldr	r1, [r4, #16]
 80063c4:	f7ff fa98 	bl	80058f8 <memcpy>
 80063c8:	89a2      	ldrh	r2, [r4, #12]
 80063ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80063ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063d2:	81a2      	strh	r2, [r4, #12]
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	6125      	str	r5, [r4, #16]
 80063d8:	441d      	add	r5, r3
 80063da:	ebab 0303 	sub.w	r3, fp, r3
 80063de:	6025      	str	r5, [r4, #0]
 80063e0:	f8c4 b014 	str.w	fp, [r4, #20]
 80063e4:	4655      	mov	r5, sl
 80063e6:	60a3      	str	r3, [r4, #8]
 80063e8:	45aa      	cmp	sl, r5
 80063ea:	d200      	bcs.n	80063ee <__sfvwrite_r+0x1a6>
 80063ec:	4655      	mov	r5, sl
 80063ee:	462a      	mov	r2, r5
 80063f0:	4649      	mov	r1, r9
 80063f2:	6820      	ldr	r0, [r4, #0]
 80063f4:	f000 f8b8 	bl	8006568 <memmove>
 80063f8:	68a3      	ldr	r3, [r4, #8]
 80063fa:	1b5b      	subs	r3, r3, r5
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	6823      	ldr	r3, [r4, #0]
 8006400:	441d      	add	r5, r3
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	4655      	mov	r5, sl
 8006406:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800640a:	44a9      	add	r9, r5
 800640c:	ebaa 0a05 	sub.w	sl, sl, r5
 8006410:	1b5d      	subs	r5, r3, r5
 8006412:	f8c8 5008 	str.w	r5, [r8, #8]
 8006416:	2d00      	cmp	r5, #0
 8006418:	d1a3      	bne.n	8006362 <__sfvwrite_r+0x11a>
 800641a:	e71c      	b.n	8006256 <__sfvwrite_r+0xe>
 800641c:	465a      	mov	r2, fp
 800641e:	4638      	mov	r0, r7
 8006420:	f000 f8ce 	bl	80065c0 <_realloc_r>
 8006424:	4605      	mov	r5, r0
 8006426:	2800      	cmp	r0, #0
 8006428:	d1d4      	bne.n	80063d4 <__sfvwrite_r+0x18c>
 800642a:	6921      	ldr	r1, [r4, #16]
 800642c:	4638      	mov	r0, r7
 800642e:	f7fe fef5 	bl	800521c <_free_r>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006438:	81a3      	strh	r3, [r4, #12]
 800643a:	e7b6      	b.n	80063aa <__sfvwrite_r+0x162>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	6923      	ldr	r3, [r4, #16]
 8006440:	4298      	cmp	r0, r3
 8006442:	d802      	bhi.n	800644a <__sfvwrite_r+0x202>
 8006444:	6962      	ldr	r2, [r4, #20]
 8006446:	4592      	cmp	sl, r2
 8006448:	d215      	bcs.n	8006476 <__sfvwrite_r+0x22e>
 800644a:	4555      	cmp	r5, sl
 800644c:	bf28      	it	cs
 800644e:	4655      	movcs	r5, sl
 8006450:	462a      	mov	r2, r5
 8006452:	4649      	mov	r1, r9
 8006454:	f000 f888 	bl	8006568 <memmove>
 8006458:	68a3      	ldr	r3, [r4, #8]
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	1b5b      	subs	r3, r3, r5
 800645e:	442a      	add	r2, r5
 8006460:	60a3      	str	r3, [r4, #8]
 8006462:	6022      	str	r2, [r4, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1ce      	bne.n	8006406 <__sfvwrite_r+0x1be>
 8006468:	4621      	mov	r1, r4
 800646a:	4638      	mov	r0, r7
 800646c:	f7fe fd6c 	bl	8004f48 <_fflush_r>
 8006470:	2800      	cmp	r0, #0
 8006472:	d0c8      	beq.n	8006406 <__sfvwrite_r+0x1be>
 8006474:	e79b      	b.n	80063ae <__sfvwrite_r+0x166>
 8006476:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800647a:	4553      	cmp	r3, sl
 800647c:	bf28      	it	cs
 800647e:	4653      	movcs	r3, sl
 8006480:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006482:	fb93 f3f2 	sdiv	r3, r3, r2
 8006486:	6a21      	ldr	r1, [r4, #32]
 8006488:	4353      	muls	r3, r2
 800648a:	4638      	mov	r0, r7
 800648c:	464a      	mov	r2, r9
 800648e:	47a8      	blx	r5
 8006490:	1e05      	subs	r5, r0, #0
 8006492:	dcb8      	bgt.n	8006406 <__sfvwrite_r+0x1be>
 8006494:	e78b      	b.n	80063ae <__sfvwrite_r+0x166>
 8006496:	e896 0c00 	ldmia.w	r6, {sl, fp}
 800649a:	2000      	movs	r0, #0
 800649c:	3608      	adds	r6, #8
 800649e:	e71d      	b.n	80062dc <__sfvwrite_r+0x94>
 80064a0:	f10b 0901 	add.w	r9, fp, #1
 80064a4:	e72a      	b.n	80062fc <__sfvwrite_r+0xb4>
 80064a6:	4293      	cmp	r3, r2
 80064a8:	db09      	blt.n	80064be <__sfvwrite_r+0x276>
 80064aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80064ac:	6a21      	ldr	r1, [r4, #32]
 80064ae:	4613      	mov	r3, r2
 80064b0:	4638      	mov	r0, r7
 80064b2:	4652      	mov	r2, sl
 80064b4:	47a8      	blx	r5
 80064b6:	1e05      	subs	r5, r0, #0
 80064b8:	f73f af3c 	bgt.w	8006334 <__sfvwrite_r+0xec>
 80064bc:	e777      	b.n	80063ae <__sfvwrite_r+0x166>
 80064be:	461a      	mov	r2, r3
 80064c0:	4651      	mov	r1, sl
 80064c2:	9301      	str	r3, [sp, #4]
 80064c4:	f000 f850 	bl	8006568 <memmove>
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	68a2      	ldr	r2, [r4, #8]
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	60a2      	str	r2, [r4, #8]
 80064d0:	6822      	ldr	r2, [r4, #0]
 80064d2:	441a      	add	r2, r3
 80064d4:	6022      	str	r2, [r4, #0]
 80064d6:	461d      	mov	r5, r3
 80064d8:	e72c      	b.n	8006334 <__sfvwrite_r+0xec>
 80064da:	2001      	movs	r0, #1
 80064dc:	e734      	b.n	8006348 <__sfvwrite_r+0x100>
 80064de:	bf00      	nop
 80064e0:	7ffffc00 	.word	0x7ffffc00

080064e4 <_isatty_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4c06      	ldr	r4, [pc, #24]	; (8006500 <_isatty_r+0x1c>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4605      	mov	r5, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	f7fc fcb4 	bl	8002e5c <_isatty>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_isatty_r+0x1a>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_isatty_r+0x1a>
 80064fc:	602b      	str	r3, [r5, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	20000abc 	.word	0x20000abc

08006504 <__locale_mb_cur_max>:
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__locale_mb_cur_max+0x14>)
 8006506:	4a05      	ldr	r2, [pc, #20]	; (800651c <__locale_mb_cur_max+0x18>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf08      	it	eq
 8006510:	4613      	moveq	r3, r2
 8006512:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006516:	4770      	bx	lr
 8006518:	2000000c 	.word	0x2000000c
 800651c:	20000510 	.word	0x20000510

08006520 <_lseek_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4c07      	ldr	r4, [pc, #28]	; (8006540 <_lseek_r+0x20>)
 8006524:	4605      	mov	r5, r0
 8006526:	4608      	mov	r0, r1
 8006528:	4611      	mov	r1, r2
 800652a:	2200      	movs	r2, #0
 800652c:	6022      	str	r2, [r4, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f7fc fc96 	bl	8002e60 <_lseek>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_lseek_r+0x1e>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	b103      	cbz	r3, 800653e <_lseek_r+0x1e>
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20000abc 	.word	0x20000abc

08006544 <__ascii_mbtowc>:
 8006544:	b082      	sub	sp, #8
 8006546:	b901      	cbnz	r1, 800654a <__ascii_mbtowc+0x6>
 8006548:	a901      	add	r1, sp, #4
 800654a:	b142      	cbz	r2, 800655e <__ascii_mbtowc+0x1a>
 800654c:	b14b      	cbz	r3, 8006562 <__ascii_mbtowc+0x1e>
 800654e:	7813      	ldrb	r3, [r2, #0]
 8006550:	600b      	str	r3, [r1, #0]
 8006552:	7812      	ldrb	r2, [r2, #0]
 8006554:	1c10      	adds	r0, r2, #0
 8006556:	bf18      	it	ne
 8006558:	2001      	movne	r0, #1
 800655a:	b002      	add	sp, #8
 800655c:	4770      	bx	lr
 800655e:	4610      	mov	r0, r2
 8006560:	e7fb      	b.n	800655a <__ascii_mbtowc+0x16>
 8006562:	f06f 0001 	mvn.w	r0, #1
 8006566:	e7f8      	b.n	800655a <__ascii_mbtowc+0x16>

08006568 <memmove>:
 8006568:	4288      	cmp	r0, r1
 800656a:	b510      	push	{r4, lr}
 800656c:	eb01 0302 	add.w	r3, r1, r2
 8006570:	d803      	bhi.n	800657a <memmove+0x12>
 8006572:	1e42      	subs	r2, r0, #1
 8006574:	4299      	cmp	r1, r3
 8006576:	d10c      	bne.n	8006592 <memmove+0x2a>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	4298      	cmp	r0, r3
 800657c:	d2f9      	bcs.n	8006572 <memmove+0xa>
 800657e:	1881      	adds	r1, r0, r2
 8006580:	1ad2      	subs	r2, r2, r3
 8006582:	42d3      	cmn	r3, r2
 8006584:	d100      	bne.n	8006588 <memmove+0x20>
 8006586:	bd10      	pop	{r4, pc}
 8006588:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800658c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006590:	e7f7      	b.n	8006582 <memmove+0x1a>
 8006592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006596:	f802 4f01 	strb.w	r4, [r2, #1]!
 800659a:	e7eb      	b.n	8006574 <memmove+0xc>

0800659c <_read_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4c07      	ldr	r4, [pc, #28]	; (80065bc <_read_r+0x20>)
 80065a0:	4605      	mov	r5, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fc fc18 	bl	8002de0 <_read>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_read_r+0x1e>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_read_r+0x1e>
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20000abc 	.word	0x20000abc

080065c0 <_realloc_r>:
 80065c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	4682      	mov	sl, r0
 80065c6:	460c      	mov	r4, r1
 80065c8:	b929      	cbnz	r1, 80065d6 <_realloc_r+0x16>
 80065ca:	4611      	mov	r1, r2
 80065cc:	b003      	add	sp, #12
 80065ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d2:	f7fe bf83 	b.w	80054dc <_malloc_r>
 80065d6:	9201      	str	r2, [sp, #4]
 80065d8:	f7ff f99a 	bl	8005910 <__malloc_lock>
 80065dc:	9a01      	ldr	r2, [sp, #4]
 80065de:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80065e2:	f102 080b 	add.w	r8, r2, #11
 80065e6:	f1b8 0f16 	cmp.w	r8, #22
 80065ea:	f1a4 0908 	sub.w	r9, r4, #8
 80065ee:	f025 0603 	bic.w	r6, r5, #3
 80065f2:	d90a      	bls.n	800660a <_realloc_r+0x4a>
 80065f4:	f038 0807 	bics.w	r8, r8, #7
 80065f8:	d509      	bpl.n	800660e <_realloc_r+0x4e>
 80065fa:	230c      	movs	r3, #12
 80065fc:	f8ca 3000 	str.w	r3, [sl]
 8006600:	2700      	movs	r7, #0
 8006602:	4638      	mov	r0, r7
 8006604:	b003      	add	sp, #12
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	f04f 0810 	mov.w	r8, #16
 800660e:	4590      	cmp	r8, r2
 8006610:	d3f3      	bcc.n	80065fa <_realloc_r+0x3a>
 8006612:	45b0      	cmp	r8, r6
 8006614:	f340 8145 	ble.w	80068a2 <_realloc_r+0x2e2>
 8006618:	4ba8      	ldr	r3, [pc, #672]	; (80068bc <_realloc_r+0x2fc>)
 800661a:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800661e:	eb09 0106 	add.w	r1, r9, r6
 8006622:	4571      	cmp	r1, lr
 8006624:	469b      	mov	fp, r3
 8006626:	684b      	ldr	r3, [r1, #4]
 8006628:	d005      	beq.n	8006636 <_realloc_r+0x76>
 800662a:	f023 0001 	bic.w	r0, r3, #1
 800662e:	4408      	add	r0, r1
 8006630:	6840      	ldr	r0, [r0, #4]
 8006632:	07c7      	lsls	r7, r0, #31
 8006634:	d447      	bmi.n	80066c6 <_realloc_r+0x106>
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	4571      	cmp	r1, lr
 800663c:	eb06 0703 	add.w	r7, r6, r3
 8006640:	d119      	bne.n	8006676 <_realloc_r+0xb6>
 8006642:	f108 0010 	add.w	r0, r8, #16
 8006646:	4287      	cmp	r7, r0
 8006648:	db3f      	blt.n	80066ca <_realloc_r+0x10a>
 800664a:	eb09 0308 	add.w	r3, r9, r8
 800664e:	eba7 0708 	sub.w	r7, r7, r8
 8006652:	f047 0701 	orr.w	r7, r7, #1
 8006656:	f8cb 3008 	str.w	r3, [fp, #8]
 800665a:	605f      	str	r7, [r3, #4]
 800665c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	ea43 0308 	orr.w	r3, r3, r8
 8006668:	f844 3c04 	str.w	r3, [r4, #-4]
 800666c:	4650      	mov	r0, sl
 800666e:	f7ff f955 	bl	800591c <__malloc_unlock>
 8006672:	4627      	mov	r7, r4
 8006674:	e7c5      	b.n	8006602 <_realloc_r+0x42>
 8006676:	45b8      	cmp	r8, r7
 8006678:	dc27      	bgt.n	80066ca <_realloc_r+0x10a>
 800667a:	68cb      	ldr	r3, [r1, #12]
 800667c:	688a      	ldr	r2, [r1, #8]
 800667e:	60d3      	str	r3, [r2, #12]
 8006680:	609a      	str	r2, [r3, #8]
 8006682:	eba7 0008 	sub.w	r0, r7, r8
 8006686:	280f      	cmp	r0, #15
 8006688:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800668c:	eb09 0207 	add.w	r2, r9, r7
 8006690:	f240 8109 	bls.w	80068a6 <_realloc_r+0x2e6>
 8006694:	eb09 0108 	add.w	r1, r9, r8
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	ea43 0308 	orr.w	r3, r3, r8
 80066a0:	f040 0001 	orr.w	r0, r0, #1
 80066a4:	f8c9 3004 	str.w	r3, [r9, #4]
 80066a8:	6048      	str	r0, [r1, #4]
 80066aa:	6853      	ldr	r3, [r2, #4]
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	3108      	adds	r1, #8
 80066b4:	4650      	mov	r0, sl
 80066b6:	f7fe fdb1 	bl	800521c <_free_r>
 80066ba:	4650      	mov	r0, sl
 80066bc:	f7ff f92e 	bl	800591c <__malloc_unlock>
 80066c0:	f109 0708 	add.w	r7, r9, #8
 80066c4:	e79d      	b.n	8006602 <_realloc_r+0x42>
 80066c6:	2300      	movs	r3, #0
 80066c8:	4619      	mov	r1, r3
 80066ca:	07e8      	lsls	r0, r5, #31
 80066cc:	f100 8084 	bmi.w	80067d8 <_realloc_r+0x218>
 80066d0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80066d4:	eba9 0505 	sub.w	r5, r9, r5
 80066d8:	6868      	ldr	r0, [r5, #4]
 80066da:	f020 0003 	bic.w	r0, r0, #3
 80066de:	4430      	add	r0, r6
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d076      	beq.n	80067d2 <_realloc_r+0x212>
 80066e4:	4571      	cmp	r1, lr
 80066e6:	d150      	bne.n	800678a <_realloc_r+0x1ca>
 80066e8:	4403      	add	r3, r0
 80066ea:	f108 0110 	add.w	r1, r8, #16
 80066ee:	428b      	cmp	r3, r1
 80066f0:	db6f      	blt.n	80067d2 <_realloc_r+0x212>
 80066f2:	462f      	mov	r7, r5
 80066f4:	68ea      	ldr	r2, [r5, #12]
 80066f6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80066fa:	60ca      	str	r2, [r1, #12]
 80066fc:	6091      	str	r1, [r2, #8]
 80066fe:	1f32      	subs	r2, r6, #4
 8006700:	2a24      	cmp	r2, #36	; 0x24
 8006702:	d83b      	bhi.n	800677c <_realloc_r+0x1bc>
 8006704:	2a13      	cmp	r2, #19
 8006706:	d936      	bls.n	8006776 <_realloc_r+0x1b6>
 8006708:	6821      	ldr	r1, [r4, #0]
 800670a:	60a9      	str	r1, [r5, #8]
 800670c:	6861      	ldr	r1, [r4, #4]
 800670e:	60e9      	str	r1, [r5, #12]
 8006710:	2a1b      	cmp	r2, #27
 8006712:	d81c      	bhi.n	800674e <_realloc_r+0x18e>
 8006714:	f105 0210 	add.w	r2, r5, #16
 8006718:	f104 0108 	add.w	r1, r4, #8
 800671c:	6808      	ldr	r0, [r1, #0]
 800671e:	6010      	str	r0, [r2, #0]
 8006720:	6848      	ldr	r0, [r1, #4]
 8006722:	6050      	str	r0, [r2, #4]
 8006724:	6889      	ldr	r1, [r1, #8]
 8006726:	6091      	str	r1, [r2, #8]
 8006728:	eb05 0208 	add.w	r2, r5, r8
 800672c:	eba3 0308 	sub.w	r3, r3, r8
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	f8cb 2008 	str.w	r2, [fp, #8]
 8006738:	6053      	str	r3, [r2, #4]
 800673a:	686b      	ldr	r3, [r5, #4]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	ea43 0308 	orr.w	r3, r3, r8
 8006744:	606b      	str	r3, [r5, #4]
 8006746:	4650      	mov	r0, sl
 8006748:	f7ff f8e8 	bl	800591c <__malloc_unlock>
 800674c:	e759      	b.n	8006602 <_realloc_r+0x42>
 800674e:	68a1      	ldr	r1, [r4, #8]
 8006750:	6129      	str	r1, [r5, #16]
 8006752:	68e1      	ldr	r1, [r4, #12]
 8006754:	6169      	str	r1, [r5, #20]
 8006756:	2a24      	cmp	r2, #36	; 0x24
 8006758:	bf01      	itttt	eq
 800675a:	6922      	ldreq	r2, [r4, #16]
 800675c:	61aa      	streq	r2, [r5, #24]
 800675e:	6960      	ldreq	r0, [r4, #20]
 8006760:	61e8      	streq	r0, [r5, #28]
 8006762:	bf19      	ittee	ne
 8006764:	f105 0218 	addne.w	r2, r5, #24
 8006768:	f104 0110 	addne.w	r1, r4, #16
 800676c:	f105 0220 	addeq.w	r2, r5, #32
 8006770:	f104 0118 	addeq.w	r1, r4, #24
 8006774:	e7d2      	b.n	800671c <_realloc_r+0x15c>
 8006776:	463a      	mov	r2, r7
 8006778:	4621      	mov	r1, r4
 800677a:	e7cf      	b.n	800671c <_realloc_r+0x15c>
 800677c:	4621      	mov	r1, r4
 800677e:	4638      	mov	r0, r7
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	f7ff fef1 	bl	8006568 <memmove>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	e7ce      	b.n	8006728 <_realloc_r+0x168>
 800678a:	18c7      	adds	r7, r0, r3
 800678c:	45b8      	cmp	r8, r7
 800678e:	dc20      	bgt.n	80067d2 <_realloc_r+0x212>
 8006790:	68cb      	ldr	r3, [r1, #12]
 8006792:	688a      	ldr	r2, [r1, #8]
 8006794:	60d3      	str	r3, [r2, #12]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	4628      	mov	r0, r5
 800679a:	68eb      	ldr	r3, [r5, #12]
 800679c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80067a0:	60d3      	str	r3, [r2, #12]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	1f32      	subs	r2, r6, #4
 80067a6:	2a24      	cmp	r2, #36	; 0x24
 80067a8:	d842      	bhi.n	8006830 <_realloc_r+0x270>
 80067aa:	2a13      	cmp	r2, #19
 80067ac:	d93e      	bls.n	800682c <_realloc_r+0x26c>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	60ab      	str	r3, [r5, #8]
 80067b2:	6863      	ldr	r3, [r4, #4]
 80067b4:	60eb      	str	r3, [r5, #12]
 80067b6:	2a1b      	cmp	r2, #27
 80067b8:	d824      	bhi.n	8006804 <_realloc_r+0x244>
 80067ba:	f105 0010 	add.w	r0, r5, #16
 80067be:	f104 0308 	add.w	r3, r4, #8
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	6002      	str	r2, [r0, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	6042      	str	r2, [r0, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	6083      	str	r3, [r0, #8]
 80067ce:	46a9      	mov	r9, r5
 80067d0:	e757      	b.n	8006682 <_realloc_r+0xc2>
 80067d2:	4580      	cmp	r8, r0
 80067d4:	4607      	mov	r7, r0
 80067d6:	dddf      	ble.n	8006798 <_realloc_r+0x1d8>
 80067d8:	4611      	mov	r1, r2
 80067da:	4650      	mov	r0, sl
 80067dc:	f7fe fe7e 	bl	80054dc <_malloc_r>
 80067e0:	4607      	mov	r7, r0
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d0af      	beq.n	8006746 <_realloc_r+0x186>
 80067e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	f1a0 0208 	sub.w	r2, r0, #8
 80067f2:	444b      	add	r3, r9
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d11f      	bne.n	8006838 <_realloc_r+0x278>
 80067f8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80067fc:	f027 0703 	bic.w	r7, r7, #3
 8006800:	4437      	add	r7, r6
 8006802:	e73e      	b.n	8006682 <_realloc_r+0xc2>
 8006804:	68a3      	ldr	r3, [r4, #8]
 8006806:	612b      	str	r3, [r5, #16]
 8006808:	68e3      	ldr	r3, [r4, #12]
 800680a:	616b      	str	r3, [r5, #20]
 800680c:	2a24      	cmp	r2, #36	; 0x24
 800680e:	bf01      	itttt	eq
 8006810:	6923      	ldreq	r3, [r4, #16]
 8006812:	61ab      	streq	r3, [r5, #24]
 8006814:	6962      	ldreq	r2, [r4, #20]
 8006816:	61ea      	streq	r2, [r5, #28]
 8006818:	bf19      	ittee	ne
 800681a:	f105 0018 	addne.w	r0, r5, #24
 800681e:	f104 0310 	addne.w	r3, r4, #16
 8006822:	f105 0020 	addeq.w	r0, r5, #32
 8006826:	f104 0318 	addeq.w	r3, r4, #24
 800682a:	e7ca      	b.n	80067c2 <_realloc_r+0x202>
 800682c:	4623      	mov	r3, r4
 800682e:	e7c8      	b.n	80067c2 <_realloc_r+0x202>
 8006830:	4621      	mov	r1, r4
 8006832:	f7ff fe99 	bl	8006568 <memmove>
 8006836:	e7ca      	b.n	80067ce <_realloc_r+0x20e>
 8006838:	1f32      	subs	r2, r6, #4
 800683a:	2a24      	cmp	r2, #36	; 0x24
 800683c:	d82d      	bhi.n	800689a <_realloc_r+0x2da>
 800683e:	2a13      	cmp	r2, #19
 8006840:	d928      	bls.n	8006894 <_realloc_r+0x2d4>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	6863      	ldr	r3, [r4, #4]
 8006848:	6043      	str	r3, [r0, #4]
 800684a:	2a1b      	cmp	r2, #27
 800684c:	d80e      	bhi.n	800686c <_realloc_r+0x2ac>
 800684e:	f100 0308 	add.w	r3, r0, #8
 8006852:	f104 0208 	add.w	r2, r4, #8
 8006856:	6811      	ldr	r1, [r2, #0]
 8006858:	6019      	str	r1, [r3, #0]
 800685a:	6851      	ldr	r1, [r2, #4]
 800685c:	6059      	str	r1, [r3, #4]
 800685e:	6892      	ldr	r2, [r2, #8]
 8006860:	609a      	str	r2, [r3, #8]
 8006862:	4621      	mov	r1, r4
 8006864:	4650      	mov	r0, sl
 8006866:	f7fe fcd9 	bl	800521c <_free_r>
 800686a:	e76c      	b.n	8006746 <_realloc_r+0x186>
 800686c:	68a3      	ldr	r3, [r4, #8]
 800686e:	6083      	str	r3, [r0, #8]
 8006870:	68e3      	ldr	r3, [r4, #12]
 8006872:	60c3      	str	r3, [r0, #12]
 8006874:	2a24      	cmp	r2, #36	; 0x24
 8006876:	bf01      	itttt	eq
 8006878:	6923      	ldreq	r3, [r4, #16]
 800687a:	6103      	streq	r3, [r0, #16]
 800687c:	6961      	ldreq	r1, [r4, #20]
 800687e:	6141      	streq	r1, [r0, #20]
 8006880:	bf19      	ittee	ne
 8006882:	f100 0310 	addne.w	r3, r0, #16
 8006886:	f104 0210 	addne.w	r2, r4, #16
 800688a:	f100 0318 	addeq.w	r3, r0, #24
 800688e:	f104 0218 	addeq.w	r2, r4, #24
 8006892:	e7e0      	b.n	8006856 <_realloc_r+0x296>
 8006894:	4603      	mov	r3, r0
 8006896:	4622      	mov	r2, r4
 8006898:	e7dd      	b.n	8006856 <_realloc_r+0x296>
 800689a:	4621      	mov	r1, r4
 800689c:	f7ff fe64 	bl	8006568 <memmove>
 80068a0:	e7df      	b.n	8006862 <_realloc_r+0x2a2>
 80068a2:	4637      	mov	r7, r6
 80068a4:	e6ed      	b.n	8006682 <_realloc_r+0xc2>
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	431f      	orrs	r7, r3
 80068ac:	f8c9 7004 	str.w	r7, [r9, #4]
 80068b0:	6853      	ldr	r3, [r2, #4]
 80068b2:	f043 0301 	orr.w	r3, r3, #1
 80068b6:	6053      	str	r3, [r2, #4]
 80068b8:	e6ff      	b.n	80066ba <_realloc_r+0xfa>
 80068ba:	bf00      	nop
 80068bc:	20000100 	.word	0x20000100

080068c0 <__swbuf_r>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	460e      	mov	r6, r1
 80068c4:	4614      	mov	r4, r2
 80068c6:	4605      	mov	r5, r0
 80068c8:	b118      	cbz	r0, 80068d2 <__swbuf_r+0x12>
 80068ca:	6983      	ldr	r3, [r0, #24]
 80068cc:	b90b      	cbnz	r3, 80068d2 <__swbuf_r+0x12>
 80068ce:	f7fe fbcf 	bl	8005070 <__sinit>
 80068d2:	4b27      	ldr	r3, [pc, #156]	; (8006970 <__swbuf_r+0xb0>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d12f      	bne.n	8006938 <__swbuf_r+0x78>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	69a3      	ldr	r3, [r4, #24]
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	89a3      	ldrh	r3, [r4, #12]
 80068e0:	0719      	lsls	r1, r3, #28
 80068e2:	d533      	bpl.n	800694c <__swbuf_r+0x8c>
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d030      	beq.n	800694c <__swbuf_r+0x8c>
 80068ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ee:	b2f6      	uxtb	r6, r6
 80068f0:	049a      	lsls	r2, r3, #18
 80068f2:	4637      	mov	r7, r6
 80068f4:	d534      	bpl.n	8006960 <__swbuf_r+0xa0>
 80068f6:	6923      	ldr	r3, [r4, #16]
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1ac0      	subs	r0, r0, r3
 80068fc:	6963      	ldr	r3, [r4, #20]
 80068fe:	4298      	cmp	r0, r3
 8006900:	db04      	blt.n	800690c <__swbuf_r+0x4c>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f7fe fb1f 	bl	8004f48 <_fflush_r>
 800690a:	bb28      	cbnz	r0, 8006958 <__swbuf_r+0x98>
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	60a3      	str	r3, [r4, #8]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	6022      	str	r2, [r4, #0]
 8006918:	701e      	strb	r6, [r3, #0]
 800691a:	6963      	ldr	r3, [r4, #20]
 800691c:	3001      	adds	r0, #1
 800691e:	4298      	cmp	r0, r3
 8006920:	d004      	beq.n	800692c <__swbuf_r+0x6c>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	07db      	lsls	r3, r3, #31
 8006926:	d519      	bpl.n	800695c <__swbuf_r+0x9c>
 8006928:	2e0a      	cmp	r6, #10
 800692a:	d117      	bne.n	800695c <__swbuf_r+0x9c>
 800692c:	4621      	mov	r1, r4
 800692e:	4628      	mov	r0, r5
 8006930:	f7fe fb0a 	bl	8004f48 <_fflush_r>
 8006934:	b190      	cbz	r0, 800695c <__swbuf_r+0x9c>
 8006936:	e00f      	b.n	8006958 <__swbuf_r+0x98>
 8006938:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <__swbuf_r+0xb4>)
 800693a:	429c      	cmp	r4, r3
 800693c:	d101      	bne.n	8006942 <__swbuf_r+0x82>
 800693e:	68ac      	ldr	r4, [r5, #8]
 8006940:	e7cb      	b.n	80068da <__swbuf_r+0x1a>
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <__swbuf_r+0xb8>)
 8006944:	429c      	cmp	r4, r3
 8006946:	bf08      	it	eq
 8006948:	68ec      	ldreq	r4, [r5, #12]
 800694a:	e7c6      	b.n	80068da <__swbuf_r+0x1a>
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f7fd fb9e 	bl	8004090 <__swsetup_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	d0c8      	beq.n	80068ea <__swbuf_r+0x2a>
 8006958:	f04f 37ff 	mov.w	r7, #4294967295
 800695c:	4638      	mov	r0, r7
 800695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800696c:	6663      	str	r3, [r4, #100]	; 0x64
 800696e:	e7c2      	b.n	80068f6 <__swbuf_r+0x36>
 8006970:	08006af0 	.word	0x08006af0
 8006974:	08006b10 	.word	0x08006b10
 8006978:	08006ad0 	.word	0x08006ad0

0800697c <_wcrtomb_r>:
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697e:	4605      	mov	r5, r0
 8006980:	b085      	sub	sp, #20
 8006982:	461e      	mov	r6, r3
 8006984:	460f      	mov	r7, r1
 8006986:	4c0f      	ldr	r4, [pc, #60]	; (80069c4 <_wcrtomb_r+0x48>)
 8006988:	b991      	cbnz	r1, 80069b0 <_wcrtomb_r+0x34>
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	490e      	ldr	r1, [pc, #56]	; (80069c8 <_wcrtomb_r+0x4c>)
 800698e:	6a12      	ldr	r2, [r2, #32]
 8006990:	2a00      	cmp	r2, #0
 8006992:	bf08      	it	eq
 8006994:	460a      	moveq	r2, r1
 8006996:	a901      	add	r1, sp, #4
 8006998:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800699c:	463a      	mov	r2, r7
 800699e:	47a0      	blx	r4
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	bf01      	itttt	eq
 80069a4:	2300      	moveq	r3, #0
 80069a6:	6033      	streq	r3, [r6, #0]
 80069a8:	238a      	moveq	r3, #138	; 0x8a
 80069aa:	602b      	streq	r3, [r5, #0]
 80069ac:	b005      	add	sp, #20
 80069ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b0:	6824      	ldr	r4, [r4, #0]
 80069b2:	4f05      	ldr	r7, [pc, #20]	; (80069c8 <_wcrtomb_r+0x4c>)
 80069b4:	6a24      	ldr	r4, [r4, #32]
 80069b6:	2c00      	cmp	r4, #0
 80069b8:	bf08      	it	eq
 80069ba:	463c      	moveq	r4, r7
 80069bc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80069c0:	e7ed      	b.n	800699e <_wcrtomb_r+0x22>
 80069c2:	bf00      	nop
 80069c4:	2000000c 	.word	0x2000000c
 80069c8:	20000510 	.word	0x20000510

080069cc <__ascii_wctomb>:
 80069cc:	b149      	cbz	r1, 80069e2 <__ascii_wctomb+0x16>
 80069ce:	2aff      	cmp	r2, #255	; 0xff
 80069d0:	bf85      	ittet	hi
 80069d2:	238a      	movhi	r3, #138	; 0x8a
 80069d4:	6003      	strhi	r3, [r0, #0]
 80069d6:	700a      	strbls	r2, [r1, #0]
 80069d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80069dc:	bf98      	it	ls
 80069de:	2001      	movls	r0, #1
 80069e0:	4770      	bx	lr
 80069e2:	4608      	mov	r0, r1
 80069e4:	4770      	bx	lr
	...

080069e8 <_init>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	bf00      	nop
 80069ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ee:	bc08      	pop	{r3}
 80069f0:	469e      	mov	lr, r3
 80069f2:	4770      	bx	lr

080069f4 <_fini>:
 80069f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f6:	bf00      	nop
 80069f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fa:	bc08      	pop	{r3}
 80069fc:	469e      	mov	lr, r3
 80069fe:	4770      	bx	lr
